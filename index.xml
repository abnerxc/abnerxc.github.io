<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Abner的博客</title>
    <link>https://abnerxc.github.io/</link>
    <description>Recent content on Abner的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 25 Jul 2025 20:07:58 +0800</lastBuildDate><atom:link href="https://abnerxc.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redroid安卓容器</title>
      <link>https://abnerxc.github.io/android/redroid%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 25 Jul 2025 20:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/android/redroid%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;文档地址：https://github.com/remote-android/redroid-doc/tree/master&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;ubuntu-2204安装&#34;&gt;Ubuntu 22.04安装 &lt;a href=&#34;#ubuntu-2204%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install linux-modules-extra-&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;uname -r&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 用于加载 Linux 内核中的 binder_linux 模块,该模块为 Android 的 Binder 通信机制提供支持&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo modprobe binder_linux devices&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;binder,hwbinder,vndbinder&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#添加开机启动(可选)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;binder_linux&amp;#34;&lt;/span&gt; | sudo tee -a /etc/modules
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#  (可选)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo modprobe ashmem_linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -itd --rm --privileged &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --pull always &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -v ~/data11:/data &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    -p 5555:5555 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --name redroid11 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    redroid/redroid:12.0.0_64only-latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;docker运行&#34;&gt;docker运行 &lt;a href=&#34;#docker%e8%bf%90%e8%a1%8c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;version: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3.0&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;services:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  redroid:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    image: registry.cn-guangzhou.aliyuncs.com/xuchen/proxy:redroid-12.0.0_64only-latest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    container_name: redroid-12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stdin_open: true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tty: true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    privileged: true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ports:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - 5555:5555
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    volumes:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - /home/abner/Document/redroid:/data:rw
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      -v /dev/dri:/dev/dri  &lt;span style=&#34;color:#75715e&#34;&gt;#GPU硬件加速需挂载设备：-v /dev/dri:/dev/dri 并设置redroid.gpu.mode=host。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    command:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.redroid_width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1080&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.redroid_height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1920&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.redroid_dpi&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;480&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.redroid_fps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.redroid_gpu_mode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;host &lt;span style=&#34;color:#75715e&#34;&gt;#auto, host(使用GPU), guest(软件模拟)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.redroid_net_ndns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#dns&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.redroid_net_dns1&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;114.114.114.114
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.hardware&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mt6891 &lt;span style=&#34;color:#75715e&#34;&gt;#cpu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.serialno&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;861503068361145&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#设置设备序列号，用于ADB识别&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.verifiedbootstate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;orange &lt;span style=&#34;color:#75715e&#34;&gt;#系统验证状态：green（官方锁定）、orange（已解锁Bootloader）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - androidboot.selinux&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;permissive      &lt;span style=&#34;color:#75715e&#34;&gt;#enforcing, permissive 强制模式或宽容模式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - ro.secure&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                         &lt;span style=&#34;color:#75715e&#34;&gt;#0允许root shell，1限制为普通用户&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - ro.build.product&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;chopin             &lt;span style=&#34;color:#75715e&#34;&gt;#设备型号标识&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - ro.product.manufacturer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Xiaomi      &lt;span style=&#34;color:#75715e&#34;&gt;#设备制造商信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;redroid参数查看&#34;&gt;redroid参数查看 &lt;a href=&#34;#redroid%e5%8f%82%e6%95%b0%e6%9f%a5%e7%9c%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;redroid: 容器专属参数&lt;/li&gt;
&lt;li&gt;androidboot:内核启动参数,通过U-Boot设置bootargs → 内核设备树（DTB）的/chosen/bootargs节点 → 系统启动后通过/proc/cmdline查看&lt;/li&gt;
&lt;li&gt;ro:只读系统属性,运行 &lt;code&gt;adb shell getprop | grep &amp;quot;ro\.&amp;quot;&lt;/code&gt; 可查看所有只读属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;qtscrcpy&#34;&gt;QtScrcpy &lt;a href=&#34;#qtscrcpy&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#报错解决&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install libqt5multimedia5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;qtscrcpy问题&#34;&gt;QtScrcpy问题 &lt;a href=&#34;#qtscrcpy%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;讯飞输入支持键盘,其他不好使&lt;/li&gt;
&lt;li&gt;QtScrcpy 键盘映射 在软件keymap目录下，目前不好使&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;qtscrcpy-键盘映射&#34;&gt;QtScrcpy 键盘映射 &lt;a href=&#34;#qtscrcpy-%e9%94%ae%e7%9b%98%e6%98%a0%e5%b0%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在线调试地址：https://github.com/barry-ran/QtScrcpy/blob/dev/docs/KeyMapDes.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Transformers-入门篇</title>
      <link>https://abnerxc.github.io/llm/transformers-%E5%85%A5%E9%97%A8%E7%AF%87/</link>
      <pubDate>Tue, 18 Mar 2025 15:35:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/llm/transformers-%E5%85%A5%E9%97%A8%E7%AF%87/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;代码：https://colab.research.google.com/drive/1VO2FJqN2D2LnByGQsXYbZ0GbzYYe-JCo#scrollTo=z2c4EnOjYc5l&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;第一章autotokenizer&#34;&gt;第一章：AutoTokenizer &lt;a href=&#34;#%e7%ac%ac%e4%b8%80%e7%ab%a0autotokenizer&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;第1步模型加载&#34;&gt;第1步、模型加载 &lt;a href=&#34;#%e7%ac%ac1%e6%ad%a5%e6%a8%a1%e5%9e%8b%e5%8a%a0%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; transformers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AutoTokenizer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#从huggingface加载模型，输入模型名称，即可加载对应的分词器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AutoTokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uer/roberta-xlarge-wwm-chinese-cluecorpussmall&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 默认会存在 系统用户的【.cache-&amp;gt;huggingface-&amp;gt;hub-&amp;gt;model-{模型名称}-&amp;gt;snapshots】目录里面&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 指定保存模型到本地目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./roberta_tokenizer&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 从本地加载tokenizer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AutoTokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./roberta_tokenizer&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokenizer
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;第2步句子分词&#34;&gt;第2步、句子分词 &lt;a href=&#34;#%e7%ac%ac2%e6%ad%a5%e5%8f%a5%e5%ad%90%e5%88%86%e8%af%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 分词&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 当前模型会拆分成一个个字，每个模型不一样&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;弱小的我也有大梦想&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokens&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tokenize(sen)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokens
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# [&amp;#39;弱&amp;#39;, &amp;#39;小&amp;#39;, &amp;#39;的&amp;#39;, &amp;#39;我&amp;#39;, &amp;#39;也&amp;#39;, &amp;#39;有&amp;#39;, &amp;#39;大&amp;#39;, &amp;#39;梦&amp;#39;, &amp;#39;想&amp;#39;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;第3步查看词典&#34;&gt;第3步、查看词典 &lt;a href=&#34;#%e7%ac%ac3%e6%ad%a5%e6%9f%a5%e7%9c%8b%e8%af%8d%e5%85%b8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 中文 &amp;#39;##榭&amp;#39;: 16588,  ##无意义。但是英文会把一个单词拆成词根&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vocab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;vocab_size
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;第4步索引转换&#34;&gt;第4步、索引转换 &lt;a href=&#34;#%e7%ac%ac4%e6%ad%a5%e7%b4%a2%e5%bc%95%e8%bd%ac%e6%8d%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将词序转换成id序列，进入神经网络&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convert_tokens_to_ids(tokens)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ids
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# [2483, 2207, 4638, 2769, 738, 3300, 1920, 3457, 2682]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将词序转成tokens&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokens&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convert_ids_to_tokens(ids)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokens
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# [&amp;#39;弱&amp;#39;, &amp;#39;小&amp;#39;, &amp;#39;的&amp;#39;, &amp;#39;我&amp;#39;, &amp;#39;也&amp;#39;, &amp;#39;有&amp;#39;, &amp;#39;大&amp;#39;, &amp;#39;梦&amp;#39;, &amp;#39;想&amp;#39;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将token转回成字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;str_sen &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;convert_tokens_to_string(tokens)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;str_sen
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#39;弱 小 的 我 也 有 大 梦 想&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;便捷调用&#34;&gt;便捷调用 &lt;a href=&#34;#%e4%be%bf%e6%8d%b7%e8%b0%83%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将词序转换成id序列，编码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(sen)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ids
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# [101, 2483, 2207, 4638, 2769, 738, 3300, 1920, 3457, 2682, 102]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 序列多了 101和102 模型的词开始和结束，如果不需要&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(sen,add_special_tokens&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将id转换成字符串，解码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;str_sen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(ids,skip_special_tokens&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;str_sen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;第5步填充和截断&#34;&gt;第5步：填充和截断 &lt;a href=&#34;#%e7%ac%ac5%e6%ad%a5%e5%a1%ab%e5%85%85%e5%92%8c%e6%88%aa%e6%96%ad&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 填充&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(sen,padding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;max_length&amp;#34;&lt;/span&gt;,max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ids &lt;span style=&#34;color:#75715e&#34;&gt;# [101, 2483, 2207, 4638, 2769, 738, 3300, 1920, 3457, 2682, 102, 0, 0, 0, 0]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 截断&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(sen,max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,truncation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ids &lt;span style=&#34;color:#75715e&#34;&gt;# [101, 2483, 2207, 4638, 102]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;快捷调用&#34;&gt;快捷调用 &lt;a href=&#34;#%e5%bf%ab%e6%8d%b7%e8%b0%83%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 填充真实有效部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode_plus(sen,padding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;max_length&amp;#34;&lt;/span&gt;,max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 简洁写法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer(sen,padding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;max_length&amp;#34;&lt;/span&gt;,max_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;第6步处理批数据&#34;&gt;第6步：处理批数据 &lt;a href=&#34;#%e7%ac%ac6%e6%ad%a5%e5%a4%84%e7%90%86%e6%89%b9%e6%95%b0%e6%8d%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sens&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;弱小的我也有大梦想&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;有梦想谁都了不起&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;迎着风追逐梦想&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer(sens)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs &lt;span style=&#34;color:#75715e&#34;&gt;# {&amp;#39;input_ids&amp;#39;: [[101, 2483, 2207, 4638, 2769, 738, 3300, 1920, 3457, 2682, 102], [101, 3300, 3457, 2682, 6443, 6963, 749, 679, 6629, 102], [101, 6816, 4708, 7599, 6841, 6852, 3457, 2682, 102]], &amp;#39;token_type_ids&amp;#39;: [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]], &amp;#39;attention_mask&amp;#39;: [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1]]}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fast-slow-tokenizer&#34;&gt;Fast/ Slow Tokenizer &lt;a href=&#34;#fast-slow-tokenizer&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;我有一个梦想Dreaming!&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Fast基于Rust实现，slow基于Python实现&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fast_tokenizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AutoTokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uer/roberta-xlarge-wwm-chinese-cluecorpussmall&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fast_tokenizer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# slow_tokenizer = AutoTokenizer.from_pretrained(&amp;#34;uer/roberta-xlarge-wwm-chinese-cluecorpussmall&amp;#34;, use_fast=False)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# slow_tokenizer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;特殊的加载&#34;&gt;特殊的加载 &lt;a href=&#34;#%e7%89%b9%e6%ae%8a%e7%9a%84%e5%8a%a0%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 远程仓库里面有自有实现的分词器代码 trust_remote_code调用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokenizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AutoTokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;THUDM/chatglm-6b&amp;#34;&lt;/span&gt;,trust_remote_code&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokenizer
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;第二章model基本使用&#34;&gt;第二章：Model基本使用 &lt;a href=&#34;#%e7%ac%ac%e4%ba%8c%e7%ab%a0model%e5%9f%ba%e6%9c%ac%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;模型加载与保存&#34;&gt;模型加载与保存 &lt;a href=&#34;#%e6%a8%a1%e5%9e%8b%e5%8a%a0%e8%bd%bd%e4%b8%8e%e4%bf%9d%e5%ad%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; transformers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AutoModel
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;模型下载&#34;&gt;模型下载 &lt;a href=&#34;#%e6%a8%a1%e5%9e%8b%e4%b8%8b%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 强制下载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AutoModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hfl/rbt3&amp;#34;&lt;/span&gt;,force_download&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# git下载：git clone &amp;#34;模型地址&amp;#34;  ，如果只需要模型的部分指定文件，可使用 git lfs clone &amp;#34;模型地址&amp;#34; --include=&amp;#34;*.bin&amp;#34; &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 离线下载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AutoModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/User/Download/hfl/rbt3&amp;#34;&lt;/span&gt;)  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;模型参数&#34;&gt;模型参数 &lt;a href=&#34;#%e6%a8%a1%e5%9e%8b%e5%8f%82%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AutoConfig&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hfl/rbt3&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;模型调用&#34;&gt;模型调用 &lt;a href=&#34;#%e6%a8%a1%e5%9e%8b%e8%b0%83%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;弱小的我也有大梦想&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AutoTokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hfl/rbt3&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer(sen,return_tensors&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pt&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;不带model-head的模型调用&#34;&gt;不带Model Head的模型调用 &lt;a href=&#34;#%e4%b8%8d%e5%b8%a6model-head%e7%9a%84%e6%a8%a1%e5%9e%8b%e8%b0%83%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AutoModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hfl/rbt3&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ouput&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;model(&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;tokenizer(sen,return_tensors&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pt&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ouput
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;带model-head的模型调用&#34;&gt;带Model Head的模型调用 &lt;a href=&#34;#%e5%b8%a6model-head%e7%9a%84%e6%a8%a1%e5%9e%8b%e8%b0%83%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;form transformers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AutoModelForSequenceClassification
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clz_model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;AutoModelForSequenceClassification&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hfl/rbt3&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ouput&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;model(&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;tokenizer(sen,return_tensors&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pt&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ouput
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;第三章datasets基本使用&#34;&gt;第三章：Datasets基本使用 &lt;a href=&#34;#%e7%ac%ac%e4%b8%89%e7%ab%a0datasets%e5%9f%ba%e6%9c%ac%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;加载在线数据集&#34;&gt;加载在线数据集 &lt;a href=&#34;#%e5%8a%a0%e8%bd%bd%e5%9c%a8%e7%ba%bf%e6%95%b0%e6%8d%ae%e9%9b%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; datasets &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;datasets&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;load_dataset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;madao33/new-title-chinese&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;datasets
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;加载数据集合集中的某一项任务&#34;&gt;加载数据集合集中的某一项任务 &lt;a href=&#34;#%e5%8a%a0%e8%bd%bd%e6%95%b0%e6%8d%ae%e9%9b%86%e5%90%88%e9%9b%86%e4%b8%ad%e7%9a%84%e6%9f%90%e4%b8%80%e9%a1%b9%e4%bb%bb%e5%8a%a1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;datasets&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;load_dataset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;super_glue&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boolq&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;datasets
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;按照数据集划分进行加载&#34;&gt;按照数据集划分进行加载 &lt;a href=&#34;#%e6%8c%89%e7%85%a7%e6%95%b0%e6%8d%ae%e9%9b%86%e5%88%92%e5%88%86%e8%bf%9b%e8%a1%8c%e5%8a%a0%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;datasets&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;load_dataset(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;madao33/new-title-chinese&amp;#34;&lt;/span&gt;,split&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;train&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;datasets
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AI模型VLLM部署</title>
      <link>https://abnerxc.github.io/llm/%E6%A8%A1%E5%9E%8Bvllm%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 05 Mar 2025 18:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/llm/%E6%A8%A1%E5%9E%8Bvllm%E9%83%A8%E7%BD%B2/</guid>
      <description>&lt;h1 id=&#34;环境说明&#34;&gt;环境说明 &lt;a href=&#34;#%e7%8e%af%e5%a2%83%e8%af%b4%e6%98%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;OS: Ubuntu 22.04
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GPU: A10显卡 24G
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CPU: 12核
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vLLM: 0.7.X
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Python: 3.10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MiniConda3: lastest version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Nvidia Driver: 12.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CUDA: 12.4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;软件安装&#34;&gt;软件安装 &lt;a href=&#34;#%e8%bd%af%e4%bb%b6%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;conda-安装&#34;&gt;conda 安装 &lt;a href=&#34;#conda-%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir -p ~/miniconda3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf ~/miniconda3/miniconda.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 初始化conda&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda init bash  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#配置清华源&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#显示检索路径，每次安装包时会将包源路径显示出来&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --set show_channel_urls yes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --set always_yes True
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#执行以下命令清除索引缓存，保证用的是镜像站提供的索引&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda clean -i
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 显示所有镜像通道路径命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --show channels
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#不显示base环境&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/miniconda3/bin/conda config --set auto_activate_base false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使配置生效&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ~/.bashrc 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#虚拟环境创建 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda create --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;vllm python&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3.10
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda activate vllm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nvidia驱动安装&#34;&gt;nvidia驱动安装 &lt;a href=&#34;#nvidia%e9%a9%b1%e5%8a%a8%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装nvidia驱动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get upgrade -y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 必要依赖&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install -y dkms build-essential &lt;span style=&#34;color:#75715e&#34;&gt;# 执行完成重启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# linux禁用Nouvau（如果没有需要执行下面命令）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;echo &amp;#34;blacklist nouveau&amp;#34; &amp;gt;&amp;gt; /etc/modprobe.d/blacklist.conf&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;echo &amp;#34;blacklist lbm-nouveau&amp;#34; &amp;gt;&amp;gt; /etc/modprobe.d/blacklist.conf&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo bash -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;echo &amp;#34;options nouveau modeset=0&amp;#34; &amp;gt;&amp;gt; /etc/modprobe.d/blacklist.conf&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo update-initramfs -u &lt;span style=&#34;color:#75715e&#34;&gt;# 执行完成重启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装驱动  https://www.nvidia.cn/drivers 自行查找对应显卡驱动和系统版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir ~/Downloads  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cd ~/Downloads 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dpkg -i nvidia-driver-local-repo-ubuntu2204-550.144.03_1.0-1_amd64.deb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get upgrade -y
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install -y cuda-drivers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 重启服务器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cuda工具包安装&#34;&gt;cuda工具包安装 &lt;a href=&#34;#cuda%e5%b7%a5%e5%85%b7%e5%8c%85%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#下载地址：https://developer.nvidia.com/cuda-toolkit-archive，找到12.4.0版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~/Downloads 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://developer.download.nvidia.com/compute/cuda/12.4.0/local_installers/cuda_12.4.0_550.54.14_linux.run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chmod a+x cuda_12.4.0_550.54.14_linux.run 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo sh cuda_12.4.0_550.54.14_linux.run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#设置环境变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim ~/.bashrc  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$LD_LIBRARY_PATH:/usr/local/cuda-12.4/lib64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:/usr/local/cuda-12.4/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export CUDA_HOME&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$CUDA_HOME:/usr/local/cuda-12.4
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#查看安装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nvcc --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;pytorch和vllm安装&#34;&gt;pytorch和vllm安装 &lt;a href=&#34;#pytorch%e5%92%8cvllm%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装pytorch https://download.pytorch.org/whl/torch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# torch-2.4.0+cu124-cp310-cp310-linux_x86_64.whl ，其中cu124表示cuda-12.4.0 cp310表示python-3.10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd ~/Downloads
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://download.pytorch.org/whl/cu124/torch-2.4.0%2Bcu124-cp310-cp310-linux_x86_64.whl#sha256&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2cb28155635e3d3d0be198e3f3e7457a1d7b99e8c2eedc73fe22fab574d11a4c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda activate vllm
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install torch-2.4.0+cu124-cp310-cp310-linux_x86_64.whl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install vLLM
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;vllm运行&#34;&gt;vllm运行 &lt;a href=&#34;#vllm%e8%bf%90%e8%a1%8c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;魔搭社区方式下载&#34;&gt;魔搭社区方式下载 &lt;a href=&#34;#%e9%ad%94%e6%90%ad%e7%a4%be%e5%8c%ba%e6%96%b9%e5%bc%8f%e4%b8%8b%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#优先使用阿里推出的魔搭下载，模型没有huggingface全面，教程地址：https://modelscope.cn/docs/home&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;modelscope download --model &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;unsloth/DeepSeek-R1-Distill-Llama-8B&amp;#39;&lt;/span&gt; --local_dir &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/home/ubuntu/data/DeepSeek-R1-Distill-Llama-8B&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;huggingface方式模型下载备选&#34;&gt;huggingface方式模型下载（备选） &lt;a href=&#34;#huggingface%e6%96%b9%e5%bc%8f%e6%a8%a1%e5%9e%8b%e4%b8%8b%e8%bd%bd%e5%a4%87%e9%80%89&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; huggingface_hub &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; snapshot_download
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unsloth/DeepSeek-R1-Distill-Llama-8B&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;local_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/ubuntu/data/DeepSeek-R1-Distill-Llama-8B&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# repo_id 模型id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# local_dir 下载地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# endpoint 镜像地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# resume_download (中断后)继续下载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;snapshot_download(repo_id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;model_name, local_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;local_dir,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  revision&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://hf-mirror.com&amp;#39;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;#镜像地址会限流,不建议使用较大参数模型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  force_download&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;模型调用&#34;&gt;模型调用 &lt;a href=&#34;#%e6%a8%a1%e5%9e%8b%e8%b0%83%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h3 id=&#34;模型启动&#34;&gt;模型启动 &lt;a href=&#34;#%e6%a8%a1%e5%9e%8b%e5%90%af%e5%8a%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;启动说明：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CUDA_VISIBLE_DEVICES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; vllm serve /home/ubuntu/data/DeepSeek-R1-Distill-Llama-8B --port &lt;span style=&#34;color:#ae81ff&#34;&gt;8088&lt;/span&gt; --max-model-len &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;参数说明:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CUDA_VISIBLE_DEVICES&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0：指定使用的 GPU 设备（0 表示第一块 GPU）。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/home/ubuntu/data/DeepSeek-R1-Distill-Llama-8B：模型的实际保存路径。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--port：服务监听的端口号（可根据需要修改）。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--max-model-len：模型的最大上下文长度。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--tensor-parallel-size、-tp：多张量并行副本数量（对于 GPU）。默认值：1。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--gpu-memory-utilization：设置每张GPU的显存利用率上限，取值范围为0~1（例如：0.9表示限制为90%的显存使用）
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--host 和 --port：指定服务器地址和端口。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--enforce-eager：启用即时执行模式（Eager Execution），即模型推理会在每个操作执行时立即进行，而非先构建完整的操作图。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--dtype：模型权重和激活的精度类型。可能的值：auto、half、float16、bfloat16、float、float32。默认值：auto。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--max-num-seqs：每次迭代的最大序列数。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;--distributed-executor-backend&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ray：指定分布式服务的后端，可能的值：ray、mp。默认值：ray（当使用超过一个 GPU 时，自动设置为 ray）。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;服务启动后，可以通过访问 http://localhost:8088/docs 查看 API 文档，验证服务是否正常运行
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;后台启动：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nohup vllm serve /home/ubuntu/data/DeepSeek-R1-Distill-Llama-8B --port &lt;span style=&#34;color:#ae81ff&#34;&gt;8088&lt;/span&gt; --max-model-len &lt;span style=&#34;color:#ae81ff&#34;&gt;16384&lt;/span&gt; --gpu-memory-utilization 0.9 &amp;gt; ./logs/vllm.log 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;测试调用&#34;&gt;测试调用 &lt;a href=&#34;#%e6%b5%8b%e8%af%95%e8%b0%83%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl --location &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://101.33.248.34:8088/v1/chat/completions&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--header &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type: application/json&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;--data &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;model&amp;#34;: &amp;#34;/home/ubuntu/data/DeepSeek-R1-Distill-Llama-8B&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;messages&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;role&amp;#34;: &amp;#34;user&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;            &amp;#34;content&amp;#34;: &amp;#34;你是谁？&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;open-webui访问vllm&#34;&gt;open-webui访问vllm &lt;a href=&#34;#open-webui%e8%ae%bf%e9%97%aevllm&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;conda create --name openwebui python&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3.12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install open-webui -i https://mirrors.aliyun.com/pypi/simple/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 启动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#镜像站点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export HF_ENDPOINT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://hf-mirror.com
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 禁用OLLAMA API&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export ENABLE_OLLAMA_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 设置vllm API的基础URL为本地服务器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export OPENAI_API_BASE_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://localhost:8088/v1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 设置默认模型路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export DEFAULT_MODELS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/ubuntu/data/DeepSeek-R1-Distill-Llama-8B&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 启动Open WebUI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;open-webui serve  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 后台启动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nohup open-webui serve &amp;gt; ./logs/open-webui.log 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>AI模型微调</title>
      <link>https://abnerxc.github.io/llm/%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/</link>
      <pubDate>Mon, 03 Mar 2025 18:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/llm/%E6%A8%A1%E5%9E%8B%E5%BE%AE%E8%B0%83/</guid>
      <description>&lt;h1 id=&#34;基础操作&#34;&gt;基础操作 &lt;a href=&#34;#%e5%9f%ba%e7%a1%80%e6%93%8d%e4%bd%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;安装依赖&#34;&gt;安装依赖 &lt;a href=&#34;#%e5%ae%89%e8%a3%85%e4%be%9d%e8%b5%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装 unsloth 包。unsloth 是一个用于微调大型语言模型（LLM）的工具，可以让模型运行更快、占用更少内存。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install unsloth 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 卸载当前已安装的 unsloth 包（如果已安装），然后从 GitHub 的源代码安装最新版本。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这样可以确保我们使用的是最新功能和修复。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip uninstall unsloth &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pip install &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;upgrade &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;no&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;cache&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;dir &lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;no&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;deps git&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;https:&lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt;github&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;com&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;unslothai&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;unsloth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装 bitsandbytes 和 unsloth_zoo 包。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# bitsandbytes 是一个用于量化和优化模型的库，可以帮助减少模型占用的内存。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# unsloth_zoo 可能包含了一些预训练模型或其他工具，方便我们使用。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install bitsandbytes unsloth_zoo 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;加载预训练模型&#34;&gt;加载预训练模型 &lt;a href=&#34;#%e5%8a%a0%e8%bd%bd%e9%a2%84%e8%ae%ad%e7%bb%83%e6%a8%a1%e5%9e%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; unsloth &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; FastLanguageModel  &lt;span style=&#34;color:#75715e&#34;&gt;# 导入FastLanguageModel类，用来加载和使用模型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; torch  &lt;span style=&#34;color:#75715e&#34;&gt;# 导入torch工具，用于处理模型的数学运算&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;max_seq_length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置模型处理文本的最大长度，相当于给模型设置一个“最大容量”&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dtype &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置数据类型，让模型自动选择最适合的精度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load_in_4bit &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 使用4位量化来节省内存，就像把大箱子压缩成小箱子&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 加载预训练模型，并获取tokenizer工具&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model, tokenizer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FastLanguageModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    model_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unsloth/DeepSeek-R1-Distill-Llama-8B&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 指定要加载的模型名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    max_seq_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max_seq_length,  &lt;span style=&#34;color:#75715e&#34;&gt;# 使用前面设置的最大长度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dtype&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dtype,  &lt;span style=&#34;color:#75715e&#34;&gt;# 使用前面设置的数据类型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    load_in_4bit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;load_in_4bit,  &lt;span style=&#34;color:#75715e&#34;&gt;# 使用4位量化&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# token=&amp;#34;hf_...&amp;#34;,  # 如果需要访问授权模型，可以在这里填入密钥&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;微调前测试&#34;&gt;微调前测试 &lt;a href=&#34;#%e5%be%ae%e8%b0%83%e5%89%8d%e6%b5%8b%e8%af%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prompt_style &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;以下是描述任务的指令，以及提供进一步上下文的输入。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;请写出一个适当完成请求的回答。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;在回答之前，请仔细思考问题，并创建一个逻辑连贯的思考过程，以确保回答准确无误。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;### 指令：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;你是一位资深银行营销专家，需要根据客户需求生成完整的银行领域活动方案。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;请回答以下问题。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;### 问题：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{question}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;### 回答：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;think&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{answer}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 定义提示风格的字符串模板，用于格式化问题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;question &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;请为年轻白领设计信用卡开卡促销活动&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FastLanguageModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;for_inference(model)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 准备模型以进行推理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokenizer([prompt_style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(question, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)], return_tensors&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cuda&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用 tokenizer 对格式化后的问题进行编码，并移动到 GPU&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    input_ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_ids,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    attention_mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attention_mask,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    max_new_tokens&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1200&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    use_cache&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 使用模型生成回答&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;batch_decode(outputs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 解码模型生成的输出为可读文本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(response[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 打印生成的回答部分&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数据准备&#34;&gt;数据准备 &lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e5%87%86%e5%a4%87&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;EOS_TOKEN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;eos_token  &lt;span style=&#34;color:#75715e&#34;&gt;# 必须添加结束标记&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 导入数据集加载函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; datasets &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; load_dataset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 加载指定的数据集，选择中文语言和训练集的前500条记录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dataset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_dataset(path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;, data_files&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/home/ubuntu/code/all.jsonl&amp;#34;&lt;/span&gt;, split&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;train[0:500]&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 打印数据集的列名，查看数据集中有哪些字段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;formatting_prompts_func&lt;/span&gt;(examples):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 从数据集中提取问题和回答&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    texts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []  &lt;span style=&#34;color:#75715e&#34;&gt;# 用于存储格式化后的文本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; messages &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; examples[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;messages&amp;#34;&lt;/span&gt;]:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 提取用户问题（第二个消息）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        question &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; messages[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 提取助手回答（第三个消息）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        answer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; messages[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;][&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;# 格式化模板&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        formatted_text &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; prompt_style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(question&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;question, answer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;answer)&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;EOS_TOKEN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        texts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(formatted_text)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;: texts,  &lt;span style=&#34;color:#75715e&#34;&gt;# 返回包含所有格式化文本的字典&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dataset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dataset&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;map(formatting_prompts_func, batched&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# print(dataset[&amp;#34;text&amp;#34;][0])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;执行微调&#34;&gt;执行微调 &lt;a href=&#34;#%e6%89%a7%e8%a1%8c%e5%be%ae%e8%b0%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FastLanguageModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;for_training(model)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; FastLanguageModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get_peft_model(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    model,  &lt;span style=&#34;color:#75715e&#34;&gt;# 传入已经加载好的预训练模型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置 LoRA 的秩，决定添加的可训练参数数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    target_modules &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q_proj&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;k_proj&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;v_proj&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;o_proj&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 指定模型中需要微调的关键模块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gate_proj&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;up_proj&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;down_proj&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lora_alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置 LoRA 的超参数，影响可训练参数的训练方式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    lora_dropout &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置防止过拟合的参数，这里设置为 0 表示不丢弃任何参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bias &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,    &lt;span style=&#34;color:#75715e&#34;&gt;# 设置是否添加偏置项，这里设置为 &amp;#34;none&amp;#34; 表示不添加&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    use_gradient_checkpointing &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;unsloth&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 使用优化技术节省显存并支持更大的批量大小&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    random_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3407&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置随机种子，确保每次运行代码时模型的初始化方式相同&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    use_rslora &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置是否使用 Rank Stabilized LoRA 技术，这里设置为 False 表示不使用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    loftq_config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置是否使用 LoftQ 技术，这里设置为 None 表示不使用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; trl &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; SFTTrainer  &lt;span style=&#34;color:#75715e&#34;&gt;# 导入 SFTTrainer，用于监督式微调&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; transformers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; TrainingArguments  &lt;span style=&#34;color:#75715e&#34;&gt;# 导入 TrainingArguments，用于设置训练参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; unsloth &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; is_bfloat16_supported  &lt;span style=&#34;color:#75715e&#34;&gt;# 导入函数，检查是否支持 bfloat16 数据格式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trainer &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SFTTrainer(  &lt;span style=&#34;color:#75715e&#34;&gt;# 创建一个 SFTTrainer 实例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    model&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;model,  &lt;span style=&#34;color:#75715e&#34;&gt;# 传入要微调的模型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tokenizer,  &lt;span style=&#34;color:#75715e&#34;&gt;# 传入 tokenizer，用于处理文本数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    train_dataset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;dataset,  &lt;span style=&#34;color:#75715e&#34;&gt;# 传入训练数据集&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dataset_text_field&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 指定数据集中文本字段的名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    max_seq_length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;max_seq_length,  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置最大序列长度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dataset_num_proc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 设置数据处理的并行进程数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    packing&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 是否启用打包功能（这里设置为 False，打包可以让训练更快，但可能影响效果）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    args&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;TrainingArguments(  &lt;span style=&#34;color:#75715e&#34;&gt;# 定义训练参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        per_device_train_batch_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 每个设备（如 GPU）上的批量大小&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gradient_accumulation_steps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 梯度累积步数，用于模拟大批次训练&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        warmup_steps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 预热步数，训练开始时学习率逐渐增加的步数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        max_steps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 最大训练步数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        learning_rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2e-4&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 学习率，模型学习新知识的速度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fp16&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; is_bfloat16_supported(),  &lt;span style=&#34;color:#75715e&#34;&gt;# 是否使用 fp16 格式加速训练（如果环境不支持 bfloat16）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        bf16&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;is_bfloat16_supported(),  &lt;span style=&#34;color:#75715e&#34;&gt;# 是否使用 bfloat16 格式加速训练（如果环境支持）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        logging_steps&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 每隔多少步记录一次训练日志&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        optim&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;adamw_8bit&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 使用的优化器，用于调整模型参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        weight_decay&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.01&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 权重衰减，防止模型过拟合&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lr_scheduler_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;linear&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 学习率调度器类型，控制学习率的变化方式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        seed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3407&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 随机种子，确保训练结果可复现&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        output_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;outputs&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 训练结果保存的目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        report_to&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 是否将训练结果报告到外部工具（如 WandB），这里设置为不报告&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;trainer_stats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; trainer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;train() &lt;span style=&#34;color:#75715e&#34;&gt;# 开始训练&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;微调后测试&#34;&gt;微调后测试 &lt;a href=&#34;#%e5%be%ae%e8%b0%83%e5%90%8e%e6%b5%8b%e8%af%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将模型切换到推理模式，准备回答问题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;FastLanguageModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;for_inference(model)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将问题转换成模型能理解的格式，并发送到 GPU 上&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokenizer([prompt_style&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(question, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)], return_tensors&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;pt&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;to(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cuda&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 让模型根据问题生成回答，最多生成 4000 个新词&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;generate(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    input_ids&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;input_ids,  &lt;span style=&#34;color:#75715e&#34;&gt;# 输入的数字序列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    attention_mask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;inputs&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attention_mask,  &lt;span style=&#34;color:#75715e&#34;&gt;# 注意力遮罩，帮助模型理解哪些部分重要&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    max_new_tokens&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4000&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 最多生成 4000 个新词&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    use_cache&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;# 使用缓存加速生成&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将生成的回答从数字转换回文字&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tokenizer&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;batch_decode(outputs)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 打印回答&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(response[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将微调后的模型保存为-gguf-格式&#34;&gt;将微调后的模型保存为 GGUF 格式 &lt;a href=&#34;#%e5%b0%86%e5%be%ae%e8%b0%83%e5%90%8e%e7%9a%84%e6%a8%a1%e5%9e%8b%e4%bf%9d%e5%ad%98%e4%b8%ba-gguf-%e6%a0%bc%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 导入 Google Colab 的 userdata 模块，用于访问用户数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; google.colab &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; userdata
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 从 Google Colab 用户数据中获取 Hugging Face 的 API 令牌&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HUGGINGFACE_TOKEN &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; userdata&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HUGGINGFACE_TOKEN&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将模型保存为 8 位量化格式（Q8_0）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 这种格式文件小且运行快，适合部署到资源受限的设备&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;: model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save_pretrained_gguf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;, tokenizer,)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将模型保存为 16 位量化格式（f16）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 16 位量化精度更高，但文件稍大&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;: model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save_pretrained_gguf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model_f16&amp;#34;&lt;/span&gt;, tokenizer, quantization_method &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;f16&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将模型保存为 4 位量化格式（q4_k_m）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 4 位量化文件最小，但精度可能稍低&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;: model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save_pretrained_gguf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;model&amp;#34;&lt;/span&gt;, tokenizer, quantization_method &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;q4_k_m&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;模型上传huggingface&#34;&gt;模型上传HuggingFace &lt;a href=&#34;#%e6%a8%a1%e5%9e%8b%e4%b8%8a%e4%bc%a0huggingface&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 导入 Hugging Face Hub 的 create_repo 函数，用于创建一个新的模型仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; huggingface_hub &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; create_repo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 在 Hugging Face Hub 上创建一个新的模型仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;create_repo(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Conard/fortunetelling&amp;#34;&lt;/span&gt;, token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;HUGGINGFACE_TOKEN, exist_ok&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 将模型和分词器上传到 Hugging Face Hub 上的仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;push_to_hub_gguf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Conard/fortunetelling&amp;#34;&lt;/span&gt;, tokenizer, token&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;HUGGINGFACE_TOKEN)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Go三色标记混合写屏障GC模式全总结</title>
      <link>https://abnerxc.github.io/go/go%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B7%B7%E5%90%88%E5%86%99%E5%B1%8F%E9%9A%9Cgc%E6%A8%A1%E5%BC%8F%E5%85%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 21 Sep 2024 10:46:12 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/go%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0%E6%B7%B7%E5%90%88%E5%86%99%E5%B1%8F%E9%9A%9Cgc%E6%A8%A1%E5%BC%8F%E5%85%A8%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文：https://www.yuque.com/aceld/golang/zhzanb&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;视频链接地址：https://www.bilibili.com/video/BV1wz4y1y7Kd&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;垃圾回收(Garbage Collection，简称GC)是编程语言中提供的自动的内存管理机制，自动释放不需要的内存对象，让出存储器资源。GC过程中无需程序员手动执行。GC机制在现代很多编程语言都支持，GC能力的性能与优劣也是不同语言之间对比度指标之一。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go V1.3之前的标记-清扫(mark and sweep)&lt;/li&gt;
&lt;li&gt;Go V1.5的三色并发标记法&lt;/li&gt;
&lt;li&gt;Go V1.5的三色标记为什么需要STW&lt;/li&gt;
&lt;li&gt;Go V1.5的三色标记为什么需要屏障机制(“强-弱” 三色不变式、插入屏障、删除屏障 )&lt;/li&gt;
&lt;li&gt;Go V1.8混合写屏障机制&lt;/li&gt;
&lt;li&gt;Go V1.8混合写屏障机制的全场景分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;一go-v13之前的标记-清除mark-and-sweep算法&#34;&gt;一、Go V1.3之前的标记-清除(mark and sweep)算法 &lt;a href=&#34;#%e4%b8%80go-v13%e4%b9%8b%e5%89%8d%e7%9a%84%e6%a0%87%e8%ae%b0-%e6%b8%85%e9%99%a4mark-and-sweep%e7%ae%97%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;标记-清除mark-and-sweep的原理&#34;&gt;标记-清除(mark and sweep)的原理 &lt;a href=&#34;#%e6%a0%87%e8%ae%b0-%e6%b8%85%e9%99%a4mark-and-sweep%e7%9a%84%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;此算法主要有两个主要的步骤：&lt;code&gt;标记(Mark phase)&lt;/code&gt;和&lt;code&gt;清除(Sweep phase)&lt;/code&gt;
&lt;strong&gt;第一步&lt;/strong&gt;，暂停程序业务逻辑, 分类出可达和不可达的对象，然后做上标记。
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC1.png&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;图中表示是程序与对象的可达关系，目前程序的可达对象有对象1-2-3，对象4-7等五个对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步&lt;/strong&gt;, 开始标记，程序找出它所有可达的对象，并做上标记。如下图所示：
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC2.png&#34; alt=&#34;gc&#34;&gt;
所以对象1-2-3、对象4-7等五个对象被做上标记。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步&lt;/strong&gt;,  标记完了之后，然后开始清除未标记的对象. 结果如下。
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC3.png&#34; alt=&#34;gc&#34;&gt;
操作非常简单，但是有一点需要额外注意：mark and sweep算法在执行的时候，需要程序暂停！即 STW(stop the world)，STW的过程中，CPU不执行用户代码，全部用于垃圾回收，这个过程的影响很大，所以STW也是一些回收机制最大的难题和希望优化的点。所以在执行第三步的这段时间，程序会暂定停止任何工作，卡在那等待回收执行完毕。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四步&lt;/strong&gt;, 停止暂停，让程序继续跑。然后循环重复这个过程，直到process程序生命周期结束。&lt;/p&gt;
&lt;h1 id=&#34;二标记-清除mark-and-sweep的缺点&#34;&gt;二、标记-清除(mark and sweep)的缺点 &lt;a href=&#34;#%e4%ba%8c%e6%a0%87%e8%ae%b0-%e6%b8%85%e9%99%a4mark-and-sweep%e7%9a%84%e7%bc%ba%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;标记清除算法明了，过程鲜明干脆，但是也有非常严重的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STW，stop the world；让程序暂停，程序出现卡顿 &lt;code&gt;(重要问题)&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;标记需要扫描整个heap；&lt;/li&gt;
&lt;li&gt;清除数据会产生heap碎片；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go V1.3版本之前就是以上来实施的,  在执行GC的基本流程就是首先启动STW暂停，然后执行标记，再执行数据回收，最后停止STW，如图所示。
&lt;img src=&#34;https://abnerxc.github.io/img/go-STW1.png&#34; alt=&#34;gc&#34;&gt;
从上图来看，全部的GC时间都是包裹在STW范围之内的，这样貌似程序暂停的时间过长，影响程序的运行性能。所以Go V1.3 做了简单的优化,将STW的步骤提前, 减少STW暂停的时间范围.如下所示
&lt;img src=&#34;https://abnerxc.github.io/img/go-STW2.png&#34; alt=&#34;gc&#34;&gt;
上图主要是将STW的步骤提前了一步，因为在Sweep清除的时候，可以不需要STW停止，因为这些对象已经是不可达对象了，不会出现回收写冲突等问题。&lt;/p&gt;
&lt;p&gt;但是无论怎么优化，Go V1.3都面临这个一个重要问题，就是mark-and-sweep 算法会暂停整个程序 。&lt;/p&gt;
&lt;h1 id=&#34;三go-v15的三色并发标记法&#34;&gt;三、Go V1.5的三色并发标记法 &lt;a href=&#34;#%e4%b8%89go-v15%e7%9a%84%e4%b8%89%e8%89%b2%e5%b9%b6%e5%8f%91%e6%a0%87%e8%ae%b0%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Golang中的垃圾回收主要应用三色标记法，GC过程和其他用户goroutine可并发运行，但需要一定时间的&lt;strong&gt;STW(stop the world)&lt;/strong&gt;，所谓&lt;strong&gt;三色标记法&lt;/strong&gt;实际上就是通过三个阶段的标记来确定清楚的对象都有哪些？我们来看一下具体的过程。
&lt;strong&gt;第一步&lt;/strong&gt; , 每次新创建的对象，默认的颜色都是标记为“白色”，如图所示。
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC4.png&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图所示，我们的程序可抵达的内存对象关系如左图所示，右边的标记表，是用来记录目前每个对象的标记颜色分类。这里面需要注意的是，所谓“程序”，则是一些对象的根节点集合。所以我们如果将“程序”展开，会得到类似如下的表现形式，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC5.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步&lt;/strong&gt;, 每次GC回收开始, 会从根节点开始遍历所有对象，把遍历到的对象从白色集合放入“灰色”集合如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC6.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里 要注意的是，本次遍历是一次遍历，非递归形式，是从程序抽次可抵达的对象遍历一层，如上图所示，当前可抵达的对象是对象1和对象4，那么自然本轮遍历结束，对象1和对象4就会被标记为灰色，灰色标记表就会多出这两个对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步&lt;/strong&gt;, 遍历灰色集合，将灰色对象引用的对象从白色集合放入灰色集合，之后将此灰色对象放入黑色集合，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC7.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;这一次遍历是只扫描灰色对象，将灰色对象的第一层遍历可抵达的对象由白色变为灰色，如：对象2、对象7. 而之前的灰色对象1和对象4则会被标记为黑色，同时由灰色标记表移动到黑色标记表中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四步&lt;/strong&gt;, 重复第三步, 直到灰色中无任何对象，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC8.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC9.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们全部的可达对象都遍历完后，灰色标记表将不再存在灰色对象，目前全部内存的数据只有两种颜色，黑色和白色。那么黑色对象就是我们程序逻辑可达（需要的）对象，这些数据是目前支撑程序正常业务运行的，是合法的有用数据，不可删除，白色的对象是全部不可达对象，目前程序逻辑并不依赖他们，那么白色对象就是内存中目前的垃圾数据，需要被清除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第五步&lt;/strong&gt;: 回收所有的白色标记表的对象. 也就是回收垃圾，如图所示。
以上我们将全部的白色对象进行删除回收，
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC10.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;剩下的就是全部依赖的黑色对象。&lt;/p&gt;
&lt;p&gt;以上便是&lt;code&gt;三色并发标记法&lt;/code&gt;，不难看出，我们上面已经清楚的体现&lt;code&gt;三色&lt;/code&gt;的特性。但是这里面可能会有很多并发流程均会被扫描，执行并发流程的内存可能相互依赖，为了在GC过程中保证数据的安全，我们在开始三色标记之前就会加上STW，在扫描确定黑白对象之后再放开STW。但是很明显这样的GC扫描的性能实在是太低了。&lt;/p&gt;
&lt;h1 id=&#34;四没有stw的三色标记法&#34;&gt;四、没有STW的三色标记法 &lt;a href=&#34;#%e5%9b%9b%e6%b2%a1%e6%9c%89stw%e7%9a%84%e4%b8%89%e8%89%b2%e6%a0%87%e8%ae%b0%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;先抛砖引玉，我们加入如果没有STW，那么也就不会再存在性能上的问题，那么接下来我们假设如果三色标记法不加入STW会发生什么事情？
我们还是基于上述的三色并发标记法来说, 他是一定要依赖STW的. 因为如果不暂停程序, 程序的逻辑改变对象引用关系, 这种动作如果在标记阶段做了修改，会影响标记结果的正确性，我们来看看一个场景，如果三色标记法, 标记过程不使用STW将会发生什么事情?&lt;/p&gt;
&lt;p&gt;我们把初始状态设置为已经经历了第一轮扫描，目前黑色的有对象1和对象4， 灰色的有对象2和对象7，其他的为白色对象，且对象2是通过指针p指向对象3的，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC11.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在如果三色标记过程不启动STW，那么在GC扫描过程中，任意的对象均可能发生读写操作，如图所示，在还没有扫描到对象2的时候，已经标记为黑色的对象4，此时创建指针q，并且指向白色的对象3。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC12.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;与此同时灰色的对象2将指针p移除，那么白色的对象3实则就是被挂在了已经扫描完成的黑色的对象4下，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC13.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我们正常指向三色标记的算法逻辑，将所有灰色的对象标记为黑色，那么对象2和对象7就被标记成了黑色，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC14.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么就执行了三色标记的最后一步，将所有白色对象当做垃圾进行回收，如图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC15.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是最后我们才发现，本来是对象4合法引用的对象3，却被GC给“误杀”回收掉了。&lt;/p&gt;
&lt;p&gt;可以看出，有两种情况，在三色标记法中，是不希望被发生的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件1: 一个白色对象被黑色对象引用&lt;code&gt;(白色被挂在黑色下)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;条件2: 灰色对象与它之间的可达关系的白色对象遭到破坏&lt;code&gt;(灰色同时丢了该白色)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果当以上两个条件同时满足时，就会出现对象丢失现象!&lt;/p&gt;
&lt;p&gt;并且，如图所示的场景中，如果示例中的白色对象3还有很多下游对象的话, 也会一并都清理掉。&lt;/p&gt;
&lt;p&gt;为了防止这种现象的发生，最简单的方式就是STW，直接禁止掉其他用户程序对对象引用关系的干扰，但是STW的过程有明显的资源浪费，对所有的用户程序都有很大影响。那么是否可以在保证对象不丢失的情况下合理的尽可能的提高GC效率，减少STW时间呢？答案是可以的，我们只要使用一种机制，尝试去破坏上面的两个必要条件就可以了。&lt;/p&gt;
&lt;h1 id=&#34;五屏障机制&#34;&gt;五、屏障机制 &lt;a href=&#34;#%e4%ba%94%e5%b1%8f%e9%9a%9c%e6%9c%ba%e5%88%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;强-弱-三色不变式&#34;&gt;“强-弱” 三色不变式 &lt;a href=&#34;#%e5%bc%ba-%e5%bc%b1-%e4%b8%89%e8%89%b2%e4%b8%8d%e5%8f%98%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;强三色不变式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不存在黑色对象引用到白色对象的指针。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC16.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;强三色不变色实际上是强制性的不允许黑色对象引用白色对象，这样就不会出现有白色对象被误删的情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;弱三色不变式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有被黑色对象引用的白色对象都处于灰色保护状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC17.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;弱三色不变式强调，黑色对象可以引用白色对象，但是这个白色对象必须存在其他灰色对象对它的引用，或者可达它的链路上游存在灰色对象。 这样实则是黑色对象引用白色对象，白色对象处于一个危险被删除的状态，但是上游灰色对象的引用，可以保护该白色对象，使其安全。&lt;/p&gt;
&lt;p&gt;为了遵循上述的两个方式，GC算法演进到两种屏障方式，他们“插入屏障”, “删除屏障”。&lt;/p&gt;
&lt;h2 id=&#34;插入屏障&#34;&gt;插入屏障 &lt;a href=&#34;#%e6%8f%92%e5%85%a5%e5%b1%8f%e9%9a%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;具体操作: 在A对象引用B对象的时候，B对象被标记为灰色。(将B挂在A下游，B必须被标记为灰色)
满足: &lt;code&gt;强三色不变式&lt;/code&gt;. (不存在黑色对象引用白色对象的情况了， 因为白色会强制变成灰色)
伪码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;添加下游对象(当前下游对象slot, 新下游对象ptr) {   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  //1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  标记灰色(新下游对象ptr)   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  //2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  当前下游对象slot = 新下游对象ptr  				  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;场景：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A.添加下游对象(nil, B)   //A 之前没有下游， 新添加一个下游对象B， B被标记为灰色
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A.添加下游对象(C, B)     //A 将下游对象C 更换为B，  B被标记为灰色
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这段伪码逻辑就是写屏障,. 我们知道,黑色对象的内存槽有两种位置, 栈和堆. 栈空间的特点是容量小,但是要求相应速度快,因为函数调用弹出频繁使用, 所以“插入屏障”机制,在栈空间的对象操作中不使用. 而仅仅使用在堆空间对象的操作中.&lt;/p&gt;
&lt;p&gt;接下来，我们用几张图，来模拟整个一个详细的过程， 希望您能够更可观的看清晰整体流程。
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC18-1.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC18-2.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC18-3.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC18-4.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC18-5.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC18-6.jpeg&#34; alt=&#34;gc&#34;&gt;
但是如果栈不添加,当全部三色标记扫描之后,栈上有可能依然存在白色对象被引用的情况(如上图的对象9).  所以要对栈重新进行三色标记扫描, 但这次为了对象不丢失, 要对本次标记扫描启动STW暂停. 直到栈空间的三色标记结束.
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC18-7.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC18-8.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC18-9.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后将栈和堆空间 扫描剩余的全部 白色节点清除.  这次STW大约的时间在10~100ms间.
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC18-10.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;删除屏障&#34;&gt;删除屏障 &lt;a href=&#34;#%e5%88%a0%e9%99%a4%e5%b1%8f%e9%9a%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;具体操作: 被删除的对象，如果自身为灰色或者白色，那么被标记为灰色。
满足: &lt;code&gt;弱三色不变式&lt;/code&gt;. (保护灰色对象到白色对象的路径不会断)
伪代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;添加下游对象(当前下游对象slot， 新下游对象ptr) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  //1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  if (当前下游对象slot是灰色 || 当前下游对象slot是白色) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  		标记灰色(当前下游对象slot)     //slot为被删除对象， 标记为灰色
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  //2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  当前下游对象slot = 新下游对象ptr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;场景：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A.添加下游对象(B, nil)   //A对象，删除B对象的引用。  B被A删除，被标记为灰(如果B之前为白)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A.添加下游对象(B, C)		 //A对象，更换下游B变成C。   B被A删除，被标记为灰(如果B之前为白)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，我们用几张图，来模拟整个一个详细的过程， 希望您能够更可观的看清晰整体流程。
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC19-1.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC19-2.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC19-3.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC19-4.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC19-5.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC19-6.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC19-7.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种方式的回收精度低，一个对象即使被删除了最后一个指向它的指针也依旧可以活过这一轮，在下一轮GC中被清理掉。&lt;/p&gt;
&lt;h1 id=&#34;六go-v18的混合写屏障hybrid-write-barrier机制&#34;&gt;六、Go V1.8的混合写屏障(hybrid write barrier)机制 &lt;a href=&#34;#%e5%85%adgo-v18%e7%9a%84%e6%b7%b7%e5%90%88%e5%86%99%e5%b1%8f%e9%9a%9chybrid-write-barrier%e6%9c%ba%e5%88%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;插入写屏障和删除写屏障的短板：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插入写屏障：结束时需要STW来重新扫描栈，标记栈上引用的白色对象的存活；&lt;/li&gt;
&lt;li&gt;删除写屏障：回收精度低，GC开始时STW扫描堆栈来记录初始快照，这个过程会保护开始时刻的所有存活对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go V1.8版本引入了混合写屏障机制（hybrid write barrier），避免了对栈re-scan的过程，极大的减少了STW的时间。结合了两者的优点。&lt;/p&gt;
&lt;h2 id=&#34;混合写屏障规则&#34;&gt;混合写屏障规则 &lt;a href=&#34;#%e6%b7%b7%e5%90%88%e5%86%99%e5%b1%8f%e9%9a%9c%e8%a7%84%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;具体操作:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.  GC开始将栈上的对象全部扫描并标记为黑色(之后不再进行第二次重复扫描，无需STW)，
2.  GC期间，任何在栈上创建的新对象，均为黑色。
3.  被删除的对象标记为灰色。
4.  被添加的对象标记为灰色。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;满足: 变形的&lt;code&gt;弱三色不变式&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;添加下游对象(当前下游对象slot, 新下游对象ptr) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	//1 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		标记灰色(当前下游对象slot)    //只要当前下游对象被移走，就标记灰色
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	//2 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	标记灰色(新下游对象ptr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  		
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	//3
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  	当前下游对象slot = 新下游对象ptr
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;这里我们注意， 屏障技术是不在栈上应用的，因为要保证栈的运行效率。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;混合写屏障的具体场景分析&#34;&gt;混合写屏障的具体场景分析 &lt;a href=&#34;#%e6%b7%b7%e5%90%88%e5%86%99%e5%b1%8f%e9%9a%9c%e7%9a%84%e5%85%b7%e4%bd%93%e5%9c%ba%e6%99%af%e5%88%86%e6%9e%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;接下来，我们用几张图，来模拟整个一个详细的过程， 希望您能够更可观的看清晰整体流程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意混合写屏障是Gc的一种屏障机制，所以只是当程序执行GC的时候，才会触发这种机制。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;GC开始：扫描栈区，将可达对象全部标记为黑
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC20-1.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC20-2.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;场景一-对象被一个堆对象删除引用成为栈对象的下游&#34;&gt;场景一： 对象被一个堆对象删除引用，成为栈对象的下游 &lt;a href=&#34;#%e5%9c%ba%e6%99%af%e4%b8%80-%e5%af%b9%e8%b1%a1%e8%a2%ab%e4%b8%80%e4%b8%aa%e5%a0%86%e5%af%b9%e8%b1%a1%e5%88%a0%e9%99%a4%e5%bc%95%e7%94%a8%e6%88%90%e4%b8%ba%e6%a0%88%e5%af%b9%e8%b1%a1%e7%9a%84%e4%b8%8b%e6%b8%b8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//前提：堆对象4-&amp;gt;对象7 = 对象7；  //对象7 被 对象4引用
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;栈对象1-&amp;gt;对象7 = 堆对象7；  //将堆对象7 挂在 栈对象1 下游
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;堆对象4-&amp;gt;对象7 = null；    //对象4 删除引用 对象7
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC21-1.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC21-2.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;场景二-对象被一个栈对象删除引用成为另一个栈对象的下游&#34;&gt;场景二： 对象被一个栈对象删除引用，成为另一个栈对象的下游 &lt;a href=&#34;#%e5%9c%ba%e6%99%af%e4%ba%8c-%e5%af%b9%e8%b1%a1%e8%a2%ab%e4%b8%80%e4%b8%aa%e6%a0%88%e5%af%b9%e8%b1%a1%e5%88%a0%e9%99%a4%e5%bc%95%e7%94%a8%e6%88%90%e4%b8%ba%e5%8f%a6%e4%b8%80%e4%b8%aa%e6%a0%88%e5%af%b9%e8%b1%a1%e7%9a%84%e4%b8%8b%e6%b8%b8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new 栈对象9；
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;对象8-&amp;gt;对象3 = 对象9；      //将栈对象3 挂在 栈对象9 下游
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;对象2-&amp;gt;对象3 = null；      //对象2 删除引用 对象3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC22-1.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC22-2.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC22-3.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;场景三对象被一个堆对象删除引用成为另一个堆对象的下游&#34;&gt;场景三：对象被一个堆对象删除引用，成为另一个堆对象的下游 &lt;a href=&#34;#%e5%9c%ba%e6%99%af%e4%b8%89%e5%af%b9%e8%b1%a1%e8%a2%ab%e4%b8%80%e4%b8%aa%e5%a0%86%e5%af%b9%e8%b1%a1%e5%88%a0%e9%99%a4%e5%bc%95%e7%94%a8%e6%88%90%e4%b8%ba%e5%8f%a6%e4%b8%80%e4%b8%aa%e5%a0%86%e5%af%b9%e8%b1%a1%e7%9a%84%e4%b8%8b%e6%b8%b8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;堆对象10-&amp;gt;对象7 = 堆对象7；       //将堆对象7 挂在 堆对象10 下游
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;堆对象4-&amp;gt;对象7 = null；         //对象4 删除引用 对象7
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC23-1.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC23-2.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC23-3.jpeg&#34; alt=&#34;gc&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;场景四对象从一个栈对象删除引用成为另一个堆对象的下游&#34;&gt;场景四：对象从一个栈对象删除引用，成为另一个堆对象的下游 &lt;a href=&#34;#%e5%9c%ba%e6%99%af%e5%9b%9b%e5%af%b9%e8%b1%a1%e4%bb%8e%e4%b8%80%e4%b8%aa%e6%a0%88%e5%af%b9%e8%b1%a1%e5%88%a0%e9%99%a4%e5%bc%95%e7%94%a8%e6%88%90%e4%b8%ba%e5%8f%a6%e4%b8%80%e4%b8%aa%e5%a0%86%e5%af%b9%e8%b1%a1%e7%9a%84%e4%b8%8b%e6%b8%b8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;栈对象1-&amp;gt;对象2=null //对象1删除引用对象2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;堆对象4-&amp;gt;对象2=栈对象2 //对象4添加下游栈对象2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;堆对象4-&amp;gt;对象7=null //对象4删除引用对象7
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-GC24-1.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC24-2.jpeg&#34; alt=&#34;gc&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/go-GC24-3.jpeg&#34; alt=&#34;gc&#34;&gt;
Golang中的混合写屏障满足弱三色不变式，结合了删除写屏障和插入写屏障的优点，只需要在开始时并发扫描各个goroutine的栈，使其变黑并一直保持，这个过程不需要STW，而标记结束后，因为栈在扫描后始终是黑色的，也无需再进行re-scan操作了，减少了STW的时间。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结 &lt;a href=&#34;#%e6%80%bb%e7%bb%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GoV1.3- 普通标记清除法，整体过程需要启动STW，效率极低。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GoV1.5- 三色标记法， 堆空间启动写屏障，栈空间不启动，全部扫描之后，需要重新扫描一次栈(需要STW)，效率普通&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GoV1.8-三色标记法，混合写屏障机制， 栈空间不启动，堆空间启动。整个过程几乎不需要STW，效率较高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Go中make与new区别</title>
      <link>https://abnerxc.github.io/go/go%E4%B8%ADmake%E4%B8%8Enew%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 20 Sep 2024 10:46:12 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/go%E4%B8%ADmake%E4%B8%8Enew%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;h1 id=&#34;变量的声明&#34;&gt;变量的声明 &lt;a href=&#34;#%e5%8f%98%e9%87%8f%e7%9a%84%e5%a3%b0%e6%98%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;量的声明我们可以通过var关键字，然后就可以在程序中使用。当我们不指定变量的默认值时，这些变量的默认值是他们的零值，比如int类型的零值是&lt;code&gt;0&lt;/code&gt;,string类型的零值是&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，引用类型的零值是&lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对于例子中的两种类型的声明，我们可以直接使用，对其进行赋值输出。但是如果我们换成指针类型呢？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go run test1.go 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;panic: runtime error: invalid memory address or nil pointer dereference
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;signal SIGSEGV: segmentation violation code&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x1 addr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x0 pc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0x4849df&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;goroutine &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;running&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main.main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	/home/itheima/go/src/golang_deeper/make_new/t
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从这个提示中可以看出，对于引用类型的变量，我们不光要声明它，还要为它分配内容空间，否则我们的值放在哪里去呢？这就是上面错误提示的原因。&lt;/p&gt;
&lt;h1 id=&#34;new&#34;&gt;new &lt;a href=&#34;#new&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;对于上面的问题我们如何解决呢？既然我们知道了没有为其分配内存，那么我们使用new分配一个吧。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;=new(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们使用new关键字，为引用类型变量分配内存，然后就可以进行赋值了。现在再运行程序，PASS，打印10。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sync&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Mutex&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;age&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;//默认给u分配到内存全部为0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt;()  &lt;span style=&#34;color:#75715e&#34;&gt;//可以直接使用，因为lock为0,是开锁状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;张三&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unlock&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ go run test2.go 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;amp;&lt;span style=&#34;color:#f92672&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 张三 0&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就是new，它返回的永远是类型的指针，指向分配类型的内存地址。&lt;/p&gt;
&lt;h1 id=&#34;make&#34;&gt;make &lt;a href=&#34;#make&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;make也是用于内存分配的，但是和new不同。它只用于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;chan&lt;/li&gt;
&lt;li&gt;slice
的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型，因为这三种类型就是引用类型，所以就没有必要返回他们的指针了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;make与new的异同&#34;&gt;make与new的异同 &lt;a href=&#34;#make%e4%b8%8enew%e7%9a%84%e5%bc%82%e5%90%8c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;同：堆空间分配
不同：make: 只用于slice、map以及channel的初始化， 无可替代；new: 用于类型内存分配(初始化值为0)， 不常用&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go常用bug和性能问题的实践方法</title>
      <link>https://abnerxc.github.io/go/go%E5%B8%B8%E7%94%A8bug%E5%92%8C%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 19 Sep 2024 17:50:03 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/go%E5%B8%B8%E7%94%A8bug%E5%92%8C%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E7%9A%84%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文地址：https://www.yuque.com/aceld/golang/ga6pb1&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;一分析程序的运行时间与cpu利用率情况&#34;&gt;一、分析程序的运行时间与CPU利用率情况 &lt;a href=&#34;#%e4%b8%80%e5%88%86%e6%9e%90%e7%a8%8b%e5%ba%8f%e7%9a%84%e8%bf%90%e8%a1%8c%e6%97%b6%e9%97%b4%e4%b8%8ecpu%e5%88%a9%e7%94%a8%e7%8e%87%e6%83%85%e5%86%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;shell内置time指令&#34;&gt;shell内置time指令 &lt;a href=&#34;#shell%e5%86%85%e7%bd%aetime%e6%8c%87%e4%bb%a4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个方法不算新颖，但是确很实用。 &lt;code&gt;time&lt;/code&gt;是Unix/Linux内置多命令，使用时一般不用传过多参数，直接跟上需要调试多程序即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time go run main.go 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;斐波那契数列第30项的值为： &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real	0m0.843s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user	0m0.216s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sys	0m0.389s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面是使用time对 go run main.go对执行程序做了性能分析，得到3个指标。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;real:从程序开始到结束，实际度过的时间；&lt;/li&gt;
&lt;li&gt;user:程序在用户态度过的时间；&lt;/li&gt;
&lt;li&gt;sys:程序在系统态度过时间。
一般情况下 real &amp;gt;= user + sys，因为系统还有其它进程(切换其他进程中间对于本进程会有空白期)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;usrbintime指令&#34;&gt;/usr/bin/time指令 &lt;a href=&#34;#usrbintime%e6%8c%87%e4%bb%a4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个指令比内置的time更加详细一些，使用的时候需要用绝对路径，而且要加上参数&lt;code&gt;-v&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ /usr/bin/time -v go run main.go  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Command being timed: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;go run main.go&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	User time &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;seconds&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: 0.12
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	System time &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;seconds&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: 0.06
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Percent of CPU this job got: 115%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Elapsed &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;wall clock&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; time &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;h:mm:ss or m:ss&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: 0:00.16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Average shared text size &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;kbytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Average unshared data size &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;kbytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Average stack size &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;kbytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Average total size &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;kbytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Maximum resident set size &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;kbytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;41172&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Average resident set size &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;kbytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Major &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;requiring I/O&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; page faults: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Minor &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;reclaiming a frame&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; page faults: &lt;span style=&#34;color:#ae81ff&#34;&gt;15880&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Voluntary context switches: &lt;span style=&#34;color:#ae81ff&#34;&gt;897&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Involuntary context switches: &lt;span style=&#34;color:#ae81ff&#34;&gt;183&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Swaps: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	File system inputs: &lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	File system outputs: &lt;span style=&#34;color:#ae81ff&#34;&gt;2664&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Socket messages sent: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Socket messages received: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Signals delivered: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Page size &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bytes&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Exit status: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;二分析golang程序的内存使用情况&#34;&gt;二、分析golang程序的内存使用情况 &lt;a href=&#34;#%e4%ba%8c%e5%88%86%e6%9e%90golang%e7%a8%8b%e5%ba%8f%e7%9a%84%e5%86%85%e5%ad%98%e4%bd%bf%e7%94%a8%e6%83%85%e5%86%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;内存占用情况查看&#34;&gt;内存占用情况查看 &lt;a href=&#34;#%e5%86%85%e5%ad%98%e5%8d%a0%e7%94%a8%e6%83%85%e5%86%b5%e6%9f%a5%e7%9c%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们先写一段demo例子代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//slice 会动态扩容，用slice来做堆内存申请&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; loop begin.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; loop end.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Start.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;force gc.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GC&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;//强制调用gc回收&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Done.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;//睡眠，保持程序不退出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编译&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build -o snippet_mem &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./snippet_mem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在./snippet_mem进程没有执行完，再开一个窗口，通过&lt;code&gt;top&lt;/code&gt;命令查看进程的内存占用情况&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;top -p &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pidof snippet_mem&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;得到结果如下
&lt;img src=&#34;https://abnerxc.github.io/img/godebug1.png&#34; alt=&#34;godebug1&#34;&gt;
我们看出来，没有退出的snippet_mem进程有约830m的内存被占用。&lt;/p&gt;
&lt;p&gt;直观上来说，这个程序在test()函数执行完后，切片contaner的内存应该被释放，不应该占用830M那么大。&lt;/p&gt;
&lt;h2 id=&#34;使用godebug与gctrace来分析程序的内存使用情况&#34;&gt;使用GODEBUG与gctrace来分析程序的内存使用情况 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8godebug%e4%b8%8egctrace%e6%9d%a5%e5%88%86%e6%9e%90%e7%a8%8b%e5%ba%8f%e7%9a%84%e5%86%85%e5%ad%98%e4%bd%bf%e7%94%a8%e6%83%85%e5%86%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;执行snippet_mem程序之前添加环境变量GODEBUG=&amp;lsquo;gctrace=1&amp;rsquo;来跟踪打印垃圾回收器信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GODEBUG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gctrace=1&amp;#39;&lt;/span&gt; ./snippet_mem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;设置gctrace=1会使得垃圾回收器在每次回收时汇总所回收内存的大小以及耗时，
并将这些内容汇总成单行内容打印到标准错误输出中。
格式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc # @#s #%: #+#+# ms clock, #+#/#/#+# ms cpu, #-&amp;gt;#-&amp;gt;# MB, # MB goal, # P
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;含义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc #        GC次数的编号，每次GC时递增
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@#s         距离程序开始执行时的时间
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#%          GC占用的执行时间百分比
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#+...+#     GC使用的时间
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#-&amp;gt;#-&amp;gt;# MB  GC开始，结束，以及当前活跃堆内存的大小，单位M
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# MB goal   全局堆内存大小
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# P         使用processor的数量
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 15 @0.123s 4%: 0.051+43+0.003 ms clock, 0.83+0/44/0+0.057 ms cpu, 277-&amp;gt;277-&amp;gt;94 MB, 277 MB goal, 0 MB stacks, 0 MB globals, 16 P
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该条信息含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gc 15&lt;/code&gt;:Gc 调试编号为15&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@0.123s&lt;/code&gt;:此时程序已经执行了0.123s&lt;/li&gt;
&lt;li&gt;&lt;code&gt;4%:&lt;/code&gt;:0.123s中其中gc模块占用了4%的时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.051+43+0.003 ms clock&lt;/code&gt;:垃圾回收的时间，分别为STW（stop-the-world）清扫的时间+并发标记和扫描的时间+STW标记的时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0.83+0/44/0+0.057 ms cpu&lt;/code&gt;: 垃圾回收占用cpu时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;277-&amp;gt;277-&amp;gt;94 MB&lt;/code&gt;: GC开始前堆内存277M， GC结束后堆内存277M，当前活跃的堆内存94M&lt;/li&gt;
&lt;li&gt;&lt;code&gt;277 MB goal&lt;/code&gt;: 全局堆内存大小277M&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 MB stacks&lt;/code&gt;: 栈内存大小0M&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 MB globals&lt;/code&gt;: 全局变量内存大小0M&lt;/li&gt;
&lt;li&gt;&lt;code&gt;16 P&lt;/code&gt;: 使用processor的数量16&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解了GC的调试信息读法后，接下来我们来分析一下本次GC的结果。
执行GODEBUG调试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GODEBUG&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gctrace=1&amp;#39;&lt;/span&gt; ./snippet_mem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024/09/19 21:04:09  ===&amp;gt; loop begin.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 1 @0.003s 2%: 0.040+2.0+0.012 ms clock, 0.81+0/2.1/0+0.24 ms cpu, 4-&amp;gt;4-&amp;gt;1 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 2 @0.006s 4%: 0.027+8.1+0.14 ms clock, 0.55+0/6.6/0+2.9 ms cpu, 4-&amp;gt;5-&amp;gt;3 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 3 @0.015s 4%: 0.026+2.9+0.010 ms clock, 0.52+0/2.9/0+0.21 ms cpu, 7-&amp;gt;7-&amp;gt;2 MB, 8 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 4 @0.019s 22%: 0.050+1.1+5.2 ms clock, 1.0+0/1.1/0+105 ms cpu, 6-&amp;gt;10-&amp;gt;7 MB, 6 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 5 @0.026s 17%: 0.028+10+0.014 ms clock, 0.56+0/10/0+0.29 ms cpu, 19-&amp;gt;19-&amp;gt;6 MB, 19 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 6 @0.037s 12%: 0.031+14+0.067 ms clock, 0.63+0/4.5/0.001+1.3 ms cpu, 14-&amp;gt;24-&amp;gt;18 MB, 14 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 7 @0.067s 8%: 0.037+44+0.21 ms clock, 0.75+0/44/0+4.2 ms cpu, 46-&amp;gt;46-&amp;gt;28 MB, 46 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 8 @0.116s 7%: 0.035+25+0.028 ms clock, 0.71+0/24/0+0.57 ms cpu, 72-&amp;gt;72-&amp;gt;44 MB, 72 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 9 @0.150s 6%: 0.036+53+0.059 ms clock, 0.72+0/53/0+1.1 ms cpu, 113-&amp;gt;113-&amp;gt;38 MB, 113 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 10 @0.204s 6%: 0.079+9.0+0.011 ms clock, 1.5+0/8.9/0+0.23 ms cpu, 86-&amp;gt;86-&amp;gt;48 MB, 86 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 11 @0.213s 6%: 0.10+19+0.23 ms clock, 2.1+0/19/0+4.6 ms cpu, 108-&amp;gt;108-&amp;gt;108 MB, 108 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 12 @0.283s 5%: 0.025+40+0.024 ms clock, 0.50+0/40/0+0.48 ms cpu, 277-&amp;gt;277-&amp;gt;169 MB, 277 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 13 @0.408s 4%: 0.035+101+0.006 ms clock, 0.70+0/101/0+0.12 ms cpu, 433-&amp;gt;433-&amp;gt;147 MB, 433 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 14 @0.510s 4%: 0.011+18+0.005 ms clock, 0.22+0/18/0+0.10 ms cpu, 330-&amp;gt;330-&amp;gt;183 MB, 330 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 15 @0.529s 4%: 0.010+36+0.011 ms clock, 0.20+0/36/0+0.22 ms cpu, 413-&amp;gt;413-&amp;gt;229 MB, 413 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024/09/19 21:04:10  ===&amp;gt; loop end.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024/09/19 21:04:10 force gc.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 16 @0.566s 4%: 0.022+116+0.004 ms clock, 0.45+0/116/0+0.094 ms cpu, 516-&amp;gt;516-&amp;gt;0 MB, 516 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 17 @0.682s 4%: 0.080+0.17+0.073 ms clock, 1.6+0/0.15/0+1.4 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 20 P (forced)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2024/09/19 21:04:10 Done.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GC forced
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gc 18 @121.392s 0%: 0.029+0.29+0.004 ms clock, 0.59+0/0.31/0+0.093 ms cpu, 0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal, 0 MB stacks, 0 MB globals, 20 P
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分析&lt;/p&gt;
&lt;p&gt;先看在test()函数执行完后立即打印的gc 16那行的信息。516-&amp;gt;516-&amp;gt;0 MB, 516 MB goal表示垃圾回收器已经把516M的内存标记为非活跃的内存。&lt;/p&gt;
&lt;p&gt;再看下一个记录gc 17行0-&amp;gt;0-&amp;gt;0 MB, 4 MB goal表示垃圾回收器中的全局堆内存大小由888M下降为4M。&lt;/p&gt;
&lt;p&gt;结论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在test()函数执行完后，demo程序中的切片容器所申请的堆空间都被垃圾回收器回收了。&lt;/li&gt;
&lt;li&gt;如果此时在top指令查询内存的时候，如果依然是800+MB，说明垃圾回收器回收了应用层的内存后，&lt;code&gt;（可能）并不会立即将内存归还给系统&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;runtimereadmemstats&#34;&gt;runtime.ReadMemStats &lt;a href=&#34;#runtimereadmemstats&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;接下来换另一种方式查看内存的方式 利用 &lt;code&gt;runtime&lt;/code&gt;库里的&lt;code&gt;ReadMemStats()&lt;/code&gt;方法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ms&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MemStats&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadMemStats&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ms&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; Alloc:%d(bytes) HeapIdle:%d(bytes) HeapReleased:%d(bytes)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ms&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ms&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ms&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//slice 会动态扩容，用slice来做堆内存申请&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; loop begin.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; loop end.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; [Start].&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; [force gc].&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GC&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;//强制调用gc回收&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; [Done].&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;//睡眠，保持程序不退出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们， 封装了一个函数&lt;code&gt;readMemStats()&lt;/code&gt;，这里面主要是调用runtime中的&lt;code&gt;ReadMemStats()&lt;/code&gt;方法获得内存信息，然后通过&lt;code&gt;log&lt;/code&gt;打印出来。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;Start&lt;/span&gt;].
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;71280&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;66633728&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;66600960&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;132535744&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;336756736&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;155721728&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;loop&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;598300600&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;609181696&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;434323456&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;force&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gc&lt;/span&gt;].
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;].
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;55840&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1207427072&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;434266112&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;38&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56656&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1207394304&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;434266112&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;56912&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1207394304&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1206493184&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;58&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57488&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1207394304&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1206493184&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;08&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57616&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1207394304&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1206493184&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c2020&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;=&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;57744&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1207394304&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;1206493184&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;by&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alloc：已分配但尚未释放的内存字节数，包括堆内存和栈内存等&lt;/li&gt;
&lt;li&gt;HeapIdle：当前未使用但仍然保留给堆的内存字节数（即可以快速重新使用的内存）&lt;/li&gt;
&lt;li&gt;HeapReleased：已归还给操作系统（但未来可能再次申请）的堆内存字节数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，打印&lt;code&gt;[Done]&lt;/code&gt;.之后那条trace信息，Alloc已经下降，即内存已被垃圾回收器回收。在2025/09/19 21:17:31和2020/03/02 18:21:48的两条trace信息中，HeapReleased开始上升，即垃圾回收器把内存归还给系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更多MemStats说明：&lt;a href=&#34;https://pkg.go.dev/runtime#MemStats&#34;&gt;https://pkg.go.dev/runtime#MemStats&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;pprof工具&#34;&gt;pprof工具 &lt;a href=&#34;#pprof%e5%b7%a5%e5%85%b7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;pprof工具支持网页上查看内存的使用情况，需要在代码中添加一个协程即可。&lt;/p&gt;
&lt;p&gt;完整示例代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http/pprof&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ms&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MemStats&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadMemStats&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ms&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; Alloc:%d(bytes) HeapIdle:%d(bytes) HeapReleased:%d(bytes)&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ms&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Alloc&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ms&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HeapIdle&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ms&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HeapReleased&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//slice 会动态扩容，用slice来做堆内存申请&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; loop begin.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; loop end.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//启动pprof&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0:10000&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; [Start].&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; [force gc].&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GC&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;//强制调用gc回收&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; [Done].&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;readMemStats&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3600&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;//睡眠，保持程序不退出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问：http://127.0.0.1:10000/debug/pprof/heap?debug=1 查看&lt;/p&gt;
&lt;p&gt;浏览器的内容其中有一部分如下，记录了目前的内存情况&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# runtime.MemStats
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Alloc = 393328
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# TotalAlloc = 1503610448
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Sys = 991758840
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Lookups = 0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Mallocs = 1023
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Frees = 233
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# HeapAlloc = 393328
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# HeapSys = 985137152
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# HeapIdle = 984096768
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# HeapInuse = 1040384
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# HeapReleased = 984006656
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# HeapObjects = 790
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# Stack = 524288 / 524288
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# MSpan = 75680 / 81600
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# MCache = 24000 / 31200
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# BuckHashSys = 1450271
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# GCSys = 3206184
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# OtherSys = 1328145
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# NextGC = 4194304
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# LastGC = 1758288816398705240
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;三分析golang程序的cpu性能情况&#34;&gt;三、分析Golang程序的CPU性能情况 &lt;a href=&#34;#%e4%b8%89%e5%88%86%e6%9e%90golang%e7%a8%8b%e5%ba%8f%e7%9a%84cpu%e6%80%a7%e8%83%bd%e6%83%85%e5%86%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;cpu性能测试代码&#34;&gt;CPU性能测试代码 &lt;a href=&#34;#cpu%e6%80%a7%e8%83%bd%e6%b5%8b%e8%af%95%e4%bb%a3%e7%a0%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;math/rand&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http/pprof&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; loop begin.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;genSomeBytes&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ===&amp;gt; loop end.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//生成一个随机字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;genSomeBytes&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buff&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;buff&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;rand&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Intn&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;buff&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//启动pprof&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0:10000&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用pprof-web界面查看&#34;&gt;使用pprof-Web界面查看 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8pprof-web%e7%95%8c%e9%9d%a2%e6%9f%a5%e7%9c%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;浏览器访问: http://127.0.0.1:10000/debug/pprof/
&lt;img src=&#34;https://abnerxc.github.io/img/godebug2.png&#34; alt=&#34;godebug2&#34;&gt;
我们可以直接点击网页的profile,浏览器会给我们下载一个profile文件.&lt;/p&gt;
&lt;h2 id=&#34;使用pprof工具查看&#34;&gt;使用pprof工具查看 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8pprof%e5%b7%a5%e5%85%b7%e6%9f%a5%e7%9c%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;将下载的profile文件和go的二进制文件一起放在同一个目录下，然后执行如下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go tool pprof &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;binary&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;profile&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;binary:go可执行的二进制文件&lt;/li&gt;
&lt;li&gt;profile:web界面下载的profile文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go tool pprof ./democpu profile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;File: democpu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type: cpu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Time: Mar 3, 2020 at 11:18pm (CST)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Duration: 30.13s, Total samples = 6.27s (20.81%)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Entering interactive mode (type &amp;#34;help&amp;#34; for commands, &amp;#34;o&amp;#34; for options)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(pprof)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;help可以查看一些指令,我么可以通过top来查看cpu的性能情况.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(pprof) top
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Showing nodes accounting for 5090ms, 81.18% of 6270ms total
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dropped 80 nodes (cum &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;= 31.35ms)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Showing top 10 nodes out of 60
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      flat  flat%   sum%        cum   cum%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    1060ms 16.91% 16.91%     2170ms 34.61%  math/rand.(*lockedSource).Int63
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     850ms 13.56% 30.46%      850ms 13.56%  sync.(*Mutex).Unlock (inline)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     710ms 11.32% 41.79%     2950ms 47.05%  math/rand.(*Rand).Int31n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     570ms  9.09% 50.88%      990ms 15.79%  bytes.(*Buffer).Write
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     530ms  8.45% 59.33%      540ms  8.61%  syscall.Syscall
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     370ms  5.90% 65.23%      370ms  5.90%  runtime.procyield
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     270ms  4.31% 69.54%     4490ms 71.61%  main.genSomeBytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     250ms  3.99% 73.52%     3200ms 51.04%  math/rand.(*Rand).Intn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     250ms  3.99% 77.51%      250ms  3.99%  runtime.memmove
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     230ms  3.67% 81.18%      690ms 11.00%  runtime.suspendG
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(pprof)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里面有几列数据,需要说明一下.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flat：当前函数占用CPU的耗时&lt;/li&gt;
&lt;li&gt;flat%：:当前函数占用CPU的耗时百分比&lt;/li&gt;
&lt;li&gt;sum%：函数占用CPU的耗时累计百分比&lt;/li&gt;
&lt;li&gt;cum：当前函数加上调用当前函数的函数占用CPU的总耗时&lt;/li&gt;
&lt;li&gt;cum%：当前函数加上调用当前函数的函数占用CPU的总耗时百分比&lt;/li&gt;
&lt;li&gt;最后一列：函数名称&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;通过go-tool-pprof得到profile文件&#34;&gt;通过go tool pprof得到profile文件 &lt;a href=&#34;#%e9%80%9a%e8%bf%87go-tool-pprof%e5%be%97%e5%88%b0profile%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;web下载的默认是30s,通过下面命令可以得到60s的profile文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go tool pprof http://localhost:10000/debug/pprof/profile?seconds&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; go tool pprof http://localhost:10000/debug/pprof/profile?seconds=60
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Fetching profile over HTTP from http://localhost:10000/debug/pprof/profile?seconds=60
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Saved profile in /home/abner/pprof/pprof.procpu.samples.cpu.001.pb.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;File: procpu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type: cpu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Time: Sep 19, 2024 at 10:28pm (CST)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Duration: 60.16s, Total samples = 18.90s (31.42%)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Entering interactive mode (type &amp;#34;help&amp;#34; for commands, &amp;#34;o&amp;#34; for options)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(pprof) top
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Showing nodes accounting for 14990ms, 79.31% of 18900ms total
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Dropped 191 nodes (cum &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;&lt;/span&gt;= 94.50ms)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Showing top 10 nodes out of 74
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      flat  flat%   sum%        cum   cum%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    3650ms 19.31% 19.31%     8440ms 44.66%  math/rand.(*Rand).Int31n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    2960ms 15.66% 34.97%     2960ms 15.66%  internal/runtime/syscall.Syscall6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    2770ms 14.66% 49.63%     2770ms 14.66%  internal/chacha8rand.block
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    1190ms  6.30% 55.93%     3050ms 16.14%  bytes.(*Buffer).Write
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    1160ms  6.14% 62.06%     1160ms  6.14%  runtime.memmove
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     780ms  4.13% 66.19%    14010ms 74.13%  main.genSomeBytes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     780ms  4.13% 70.32%     3970ms 21.01%  runtime.rand
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     660ms  3.49% 73.81%     9100ms 48.15%  math/rand.(*Rand).Intn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     550ms  2.91% 76.72%    10130ms 53.60%  math/rand.Intn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     490ms  2.59% 79.31%     4790ms 25.34%  math/rand.(*Rand).Int63 (inline)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(pprof) 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;可视化查看&#34;&gt;可视化查看 &lt;a href=&#34;#%e5%8f%af%e8%a7%86%e5%8c%96%e6%9f%a5%e7%9c%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;输入web&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go tool pprof ./democpu profile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;File: democpu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type: cpu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Time: Mar 3, 2020 at 11:18pm (CST)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Duration: 30.13s, Total samples = 6.27s (20.81%)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Entering interactive mode (type &amp;#34;help&amp;#34; for commands, &amp;#34;o&amp;#34; for options)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(pprof) web
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里如果报找不到graphviz工具,需要安装一下
Ubuntu安装:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install graphviz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mac安装:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install graphviz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Win安装:
下载https://graphviz.gitlab.io/_pages/Download/Download_windows.html
将graphviz安装目录下的bin文件夹添加到Path环境变量中。 在终端输入dot -version查看是否安装成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/godebug3.png&#34; alt=&#34;godebug3&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GRPC笔记</title>
      <link>https://abnerxc.github.io/go/grpc%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 22 Jul 2024 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/grpc%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;安装protobuf&#34;&gt;安装Protobuf &lt;a href=&#34;#%e5%ae%89%e8%a3%85protobuf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;下载&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/releases&#34;&gt;Protocol Buffers&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;配置环境变量，macos如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:$JAVA_HOME/bin:&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;go env GOPATH&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;/bin:/Users/abner/tools/platform-tools:/Users/abner/tools/apache-maven-3.9.11/bin:/Users/abner/tools/protoc-32.0-osx-x86_64/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;执行source ~/.zshrc 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;最后终端输入&lt;code&gt;protoc&lt;/code&gt; 验证&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;安装gRPC核心库&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get google.golang.org/grpc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;上面安装的是protocol编译器,他可以生成不同语言代码。接着安装go语言的代码生成工具&lt;code&gt;protoc-gen-go&lt;/code&gt;，其他语言自行研究&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;proto文件编写&#34;&gt;proto文件编写 &lt;a href=&#34;#proto%e6%96%87%e4%bb%b6%e7%bc%96%e5%86%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//这是在说明使用的是proto3语法
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;syntax &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//这事在说明生成的路径,这里的.表示当前目录,service代码生成的go文件包名是service
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;option go_package &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.;service&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 定义服务Greeter，这个服务中有一个rpc方法SayHello，请求参数是HelloRequest，返回参数是HelloReply。一个文件可以定义多个service服务，可以把一组相关的
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service Greeter &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rpc SayHello &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HelloRequest&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; returns &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;HelloReply&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 请求参数
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message HelloRequest &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  string reqName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 响应参数
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message HelloReply &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  string respMsg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编写完上面内容后，在文件目录执行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;protoc --go_out&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;.  greeter.proto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;protoc --go-grpc_out&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;.  greeter.proto
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;proto文件介绍&#34;&gt;proto文件介绍 &lt;a href=&#34;#proto%e6%96%87%e4%bb%b6%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;message&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;message: protobuf中定义一个消息类型是通过关键字message字段指定的。类似c++中的class,java中的class,go中的struct，一个proto文件中可以定义多个消息类型&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;字段规则&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;required: 表示字段必须赋值,否则编译不过。在proto3中，required字段已弃用
optional: 表示字段可以不赋值。在proto3中，required、optional字段已都已经默认optional
repeated: 表示字段可以重复赋值,在go中会被定义为切片&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;消息号&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在消息体的定义中，每个字段都必须要有一个唯一的编号，标识从[1,2^29-1]范围内的一个整数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;嵌套消息&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;可以在其他消息类型中定义使用消息，例如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message Father &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    message Son &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        string name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        int32 age &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        repeated int32 weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 3;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    repeated Son sons &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果要在外部使用这个消息类型，需要Father.Son的形式使用。如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message Family &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Father.Son one &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;服务定义&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;在proto文件中定义服务，服务中可以定义多个方法，每个方法都对应一个RPC方法。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service GoodsService &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rpc Serarch&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SearchRequest&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; returns &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SearchResponse&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;服务端编写&#34;&gt;服务端编写 &lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%ab%af%e7%bc%96%e5%86%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;server.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;demo/grpc/pb&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runtime&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;const port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:50051&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type ServerDemo struct &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	pb.UnimplementedGreeterServer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s *ServerDemo&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; SayHello&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx context.Context, req *pb.HelloRequest&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;resp *pb.HelloReply, err error&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	msg :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmt.Sprintf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello,%s[rpc-server,os=%s,nowNanosecond=%d]&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		req.ReqName, runtime.GOOS, time.Now&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;.Nanosecond&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &amp;amp;pb.HelloReply&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;RespMsg: msg&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	listen, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; net.Listen&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, port&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		panic&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	newServer :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grpc.NewServer&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	pb.RegisterGreeterServer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;newServer, &amp;amp;ServerDemo&lt;span style=&#34;color:#f92672&#34;&gt;{})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	err &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newServer.Serve&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;listen&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fmt.Println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;客户端编写&#34;&gt;客户端编写 &lt;a href=&#34;#%e5%ae%a2%e6%88%b7%e7%ab%af%e7%bc%96%e5%86%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;client.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;demo/grpc/pb&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;const &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	address     &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost:50051&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	defaultName &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kaola&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	conn, e :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grpc.Dial&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;address, grpc.WithInsecure&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; e !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		panic&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	defer conn.Close&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	c :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pb.NewGreeterClient&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	reply, e :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c.SayHello&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context.Background&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;, &amp;amp;pb.HelloRequest&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;ReqName: defaultName&lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; e !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		log.Fatal&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	fmt.Println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;reply.RespMsg&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;认证&#34;&gt;认证 &lt;a href=&#34;#%e8%ae%a4%e8%af%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;gRPC默认内置了两种认证方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSL/TLS认证方式&lt;/li&gt;
&lt;li&gt;基于Token的认证方式
同时，gRPC提供了接口用于扩展自定义认证方式
项目路面结构&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— hello/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— client/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— main.go   // 客户端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— main.go   // 服务端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— proto/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— hello/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— hello.proto   // proto描述文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— hello.pb.go   // proto编译后文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;ssltls认证&#34;&gt;SSL/TLS认证 &lt;a href=&#34;#ssltls%e8%ae%a4%e8%af%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这里直接扩展hello项目，实现TLS认证机制&lt;/p&gt;
&lt;p&gt;首先需要准备证书，在hello目录新建keys目录用于存放证书文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;证书制作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;制作私钥 (.key)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Key considerations for algorithm &amp;#34;RSA&amp;#34; ≥ 2048-bit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openssl genrsa -out server.key &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Key considerations for algorithm &amp;#34;ECDSA&amp;#34; ≥ secp384r1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# List ECDSA the supported curves (openssl ecparam -list_curves)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openssl ecparam -genkey -name secp384r1 -out server.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自签名公钥(x509) (PEM-encodings .pem|.crt)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ openssl req -new -x509 -sha256 -key server.key -out server.pem -days &lt;span style=&#34;color:#ae81ff&#34;&gt;3650&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;自定义信息&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Country Name &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; letter code&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;AU&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:CN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;State or Province Name &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;full name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Some-State&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:XxXx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Locality Name &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eg, city&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;:XxXx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Organization Name &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eg, company&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Internet Widgits Pty Ltd&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:XX Co. Ltd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Organizational Unit Name &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;eg, section&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;:Dev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Common Name &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;:server name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Email Address &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;:xxx@xxx.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;目录结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— hello-tls/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— client/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— main.go   // 客户端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— main.go   // 服务端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— keys/                 // 证书目录
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server.key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— proto/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— hello/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— hello.proto   // proto描述文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— hello.pb.go   // proto编译后文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例代码
修改服务端代码：server/main.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pb &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/jergoo/go-grpc-example/proto/hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang.org/x/net/context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/credentials&amp;#34;&lt;/span&gt; // 引入grpc认证包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/grpclog&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;const &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // Address gRPC服务地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:50052&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 定义helloService并实现约定的接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type helloService struct&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// HelloService Hello服务
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var HelloService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; helloService&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// SayHello 实现Hello服务接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;h helloService&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; SayHello&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx context.Context, in *pb.HelloRequest&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*pb.HelloResponse, error&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pb.HelloResponse&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp.Message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmt.Sprintf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello %s.&amp;#34;&lt;/span&gt;, in.Name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resp, nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listen, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; net.Listen&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, Address&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to listen: %v&amp;#34;&lt;/span&gt;, err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // TLS认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    creds, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; credentials.NewServerTLSFromFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../keys/server.pem&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../keys/server.key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to generate credentials %v&amp;#34;&lt;/span&gt;, err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 实例化grpc Server, 并开启TLS认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grpc.NewServer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;grpc.Creds&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;creds&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 注册HelloService
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pb.RegisterHelloServer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s, HelloService&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grpclog.Println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Listen on &amp;#34;&lt;/span&gt; + Address + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; with TLS&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s.Serve&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;listen&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务端在实例化grpc Server时，可配置多种选项，TLS认证是其中之一&lt;/p&gt;
&lt;p&gt;客户端添加TLS认证：client/main.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pb &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/jergoo/go-grpc-example/proto/hello&amp;#34;&lt;/span&gt; // 引入proto包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang.org/x/net/context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/credentials&amp;#34;&lt;/span&gt; // 引入grpc认证包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/grpclog&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;const &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // Address gRPC服务地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:50052&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // TLS连接
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    creds, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; credentials.NewClientTLSFromFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../keys/server.pem&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to create TLS credentials %v&amp;#34;&lt;/span&gt;, err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grpc.Dial&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Address, grpc.WithTransportCredentials&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;creds&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalln&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    defer conn.Close&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 初始化客户端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pb.NewHelloClient&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 调用方法
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    req :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &amp;amp;pb.HelloRequest&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gRPC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c.SayHello&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context.Background&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;, req&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalln&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grpclog.Println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;res.Message&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;客户端添加TLS认证的方式和服务端类似，在创建连接Dial时，同样可以配置多种选项，后面的示例中会看到更多的选项。&lt;/p&gt;
&lt;h2 id=&#34;token认证&#34;&gt;Token认证 &lt;a href=&#34;#token%e8%ae%a4%e8%af%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;再进一步，继续扩展hello-tls项目，实现TLS + Token认证机制，也可以不需要TLS，仅使用token。下面的例子使用TLS + Token认证机制
目录结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— hello_token/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— client/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— main.go   // 客户端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— main.go   // 服务端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— keys/             // 证书目录
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server.key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— proto/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— hello/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— hello.proto   // proto描述文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— hello.pb.go   // proto编译后文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例代码&lt;/p&gt;
&lt;p&gt;先修改客户端实现：client/main.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pb &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/jergoo/go-grpc-example/proto/hello&amp;#34;&lt;/span&gt; // 引入proto包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang.org/x/net/context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/credentials&amp;#34;&lt;/span&gt; // 引入grpc认证包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/grpclog&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;const &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // Address gRPC服务地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:50052&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // OpenTLS 是否开启TLS认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OpenTLS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// customCredential 自定义认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type customCredential struct&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// GetRequestMetadata 实现自定义认证接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c customCredential&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; GetRequestMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx context.Context, uri ...string&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;string, error&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;appid&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;101010&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;appkey&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i am key&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// RequireTransportSecurity 自定义认证是否开启TLS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c customCredential&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; RequireTransportSecurity&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; bool &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; OpenTLS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var err error
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var opts &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;grpc.DialOption
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; OpenTLS &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        // TLS连接
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        creds, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; credentials.NewClientTLSFromFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../keys/server.pem&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            grpclog.Fatalf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to create TLS credentials %v&amp;#34;&lt;/span&gt;, err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        opts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;opts, grpc.WithTransportCredentials&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;creds&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        opts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;opts, grpc.WithInsecure&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 使用自定义认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    opts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;opts, grpc.WithPerRPCCredentials&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;new&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customCredential&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grpc.Dial&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Address, opts...&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalln&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    defer conn.Close&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 初始化客户端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pb.NewHelloClient&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 调用方法
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    req :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &amp;amp;pb.HelloRequest&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gRPC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c.SayHello&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context.Background&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;, req&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalln&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grpclog.Println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;res.Message&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们定义了一个&lt;code&gt;customCredential&lt;/code&gt;结构，并实现了两个方法&lt;code&gt;GetRequestMetadata&lt;/code&gt;和&lt;code&gt;RequireTransportSecurity&lt;/code&gt;。这是gRPC提供的自定义认证方式，每次RPC调用都会传输认证信息。&lt;code&gt;customCredential&lt;/code&gt;其实是实现了&lt;code&gt;grpc/credential&lt;/code&gt;包内的&lt;code&gt;PerRPCCredentials&lt;/code&gt;接口。每次调用，token信息会通过请求的metadata传输到服务端。下面具体看一下服务端如何获取metadata中的信息。&lt;/p&gt;
&lt;p&gt;修改server/main.go中的SayHello方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pb &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/jergoo/go-grpc-example/proto/hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang.org/x/net/context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/codes&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/credentials&amp;#34;&lt;/span&gt; // 引入grpc认证包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/grpclog&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/metadata&amp;#34;&lt;/span&gt; // 引入grpc meta包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;const &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // Address gRPC服务地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:50052&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 定义helloService并实现约定的接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type helloService struct&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// HelloService ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var HelloService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; helloService&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// SayHello 实现Hello服务接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;h helloService&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; SayHello&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx context.Context, in *pb.HelloRequest&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*pb.HelloResponse, error&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 解析metada中的信息并验证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    md, ok :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metadata.FromContext&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !ok &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nil, grpc.Errorf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;codes.Unauthenticated, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;无Token认证信息&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        appid  string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        appkey string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; val, ok :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; md&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;appid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; ok &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        appid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; val, ok :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; md&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;appkey&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; ok &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        appkey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; appid !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;101010&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; appkey !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i am key&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nil, grpc.Errorf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;codes.Unauthenticated, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Token认证信息无效: appid=%s, appkey=%s&amp;#34;&lt;/span&gt;, appid, appkey&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pb.HelloResponse&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp.Message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmt.Sprintf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello %s.\nToken info: appid=%s,appkey=%s&amp;#34;&lt;/span&gt;, in.Name, appid, appkey&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resp, nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listen, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; net.Listen&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, Address&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to listen: %v&amp;#34;&lt;/span&gt;, err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // TLS认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    creds, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; credentials.NewServerTLSFromFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../keys/server.pem&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../keys/server.key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to generate credentials %v&amp;#34;&lt;/span&gt;, err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 实例化grpc Server, 并开启TLS认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grpc.NewServer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;grpc.Creds&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;creds&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 注册HelloService
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pb.RegisterHelloServer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s, HelloService&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grpclog.Println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Listen on &amp;#34;&lt;/span&gt; + Address + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; with TLS + Token&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s.Serve&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;listen&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;服务端可以从context中获取每次请求的metadata，从中读取客户端发送的token信息并验证有效性。
&lt;code&gt;google.golang.org/grpc/credentials/oauth&lt;/code&gt;包已实现了用于Google API的oauth和jwt验证的方法，使用方法可以参考官方文档。在实际应用中，我们可以根据自己的业务需求实现合适的验证方式。&lt;/p&gt;
&lt;h1 id=&#34;interceptor-拦截器&#34;&gt;Interceptor 拦截器 &lt;a href=&#34;#interceptor-%e6%8b%a6%e6%88%aa%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;grpc服务端和客户端都提供了interceptor功能，功能类似middleware，很适合在这里处理验证、日志等流程。&lt;/p&gt;
&lt;p&gt;在自定义Token认证的示例中，认证信息是由每个服务中的方法处理并认证的，如果有大量的接口方法，这种姿势就太不优雅了，每个接口实现都要先处理认证信息。这个时候interceptor就可以用来解决了这个问题，在请求被转到具体接口之前处理认证信息，一处认证，到处无忧。 在客户端，我们增加一个请求日志，记录请求相关的参数和耗时等等。修改hello_token项目实现：
目录结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— hello_interceptor/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— client/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— main.go   // 客户端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— main.go   // 服务端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— keys/             // 证书目录
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server.key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server.pem
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— proto/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— hello/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— hello.proto   // proto描述文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— hello.pb.go   // proto编译后文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例代码
服务端interceptor： hello_interceptor/server/main.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pb &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/jergoo/go-grpc-example/proto/hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang.org/x/net/context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/codes&amp;#34;&lt;/span&gt;       // grpc 响应状态码
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/credentials&amp;#34;&lt;/span&gt; // grpc认证包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/grpclog&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/metadata&amp;#34;&lt;/span&gt; // grpc metadata包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;const &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // Address gRPC服务地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:50052&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// 定义helloService并实现约定的接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type helloService struct&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// HelloService Hello服务
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;var HelloService &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; helloService&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// SayHello 实现Hello服务接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;h helloService&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; SayHello&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx context.Context, in *pb.HelloRequest&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;*pb.HelloResponse, error&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pb.HelloResponse&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resp.Message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmt.Sprintf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello %s.&amp;#34;&lt;/span&gt;, in.Name&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; resp, nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    listen, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; net.Listen&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, Address&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to listen: %v&amp;#34;&lt;/span&gt;, err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var opts &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;grpc.ServerOption
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // TLS认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    creds, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; credentials.NewServerTLSFromFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../keys/server.pem&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../keys/server.key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to generate credentials %v&amp;#34;&lt;/span&gt;, err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    opts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;opts, grpc.Creds&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;creds&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 注册interceptor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    opts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;opts, grpc.UnaryInterceptor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;interceptor&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 实例化grpc Server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grpc.NewServer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;opts...&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 注册HelloService
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pb.RegisterHelloServer&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s, HelloService&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grpclog.Println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Listen on &amp;#34;&lt;/span&gt; + Address + &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; with TLS + Token + Interceptor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s.Serve&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;listen&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// auth 验证Token
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func auth&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx context.Context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; error &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    md, ok :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; metadata.FromContext&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; !ok &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; grpc.Errorf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;codes.Unauthenticated, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;无Token认证信息&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        appid  string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        appkey string
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; val, ok :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; md&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;appid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; ok &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        appid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; val, ok :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; md&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;appkey&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; ok &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        appkey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; val&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; appid !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;101010&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; appkey !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i am key&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; grpc.Errorf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;codes.Unauthenticated, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Token认证信息无效: appid=%s, appkey=%s&amp;#34;&lt;/span&gt;, appid, appkey&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// interceptor 拦截器
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func interceptor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx context.Context, req interface&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;interface&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;, error&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; auth&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; nil, err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 继续处理请求
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; handler&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx, req&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实现客户端interceptor：hello_intercepror/client/main.go&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;package main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;import &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    pb &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/jergoo/go-grpc-example/proto/hello&amp;#34;&lt;/span&gt; // 引入proto包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang.org/x/net/context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/credentials&amp;#34;&lt;/span&gt; // 引入grpc认证包
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/grpclog&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;const &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // Address gRPC服务地址
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:50052&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // OpenTLS 是否开启TLS认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    OpenTLS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// customCredential 自定义认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;type customCredential struct&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// GetRequestMetadata 实现自定义认证接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c customCredential&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; GetRequestMetadata&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx context.Context, uri ...string&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;string, error&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; map&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;string&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;appid&amp;#34;&lt;/span&gt;:  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;101010&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;appkey&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;i am key&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;, nil
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// RequireTransportSecurity 自定义认证是否开启TLS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;c customCredential&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; RequireTransportSecurity&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; bool &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; OpenTLS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func main&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var err error
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    var opts &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;grpc.DialOption
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; OpenTLS &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        // TLS连接
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        creds, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; credentials.NewClientTLSFromFile&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../keys/server.pem&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;server name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            grpclog.Fatalf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to create TLS credentials %v&amp;#34;&lt;/span&gt;, err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        opts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;opts, grpc.WithTransportCredentials&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;creds&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        opts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;opts, grpc.WithInsecure&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 指定自定义认证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    opts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;opts, grpc.WithPerRPCCredentials&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;new&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;customCredential&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 指定客户端interceptor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    opts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;opts, grpc.WithUnaryInterceptor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;interceptor&lt;span style=&#34;color:#f92672&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    conn, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; grpc.Dial&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Address, opts...&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalln&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    defer conn.Close&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 初始化客户端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    c :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pb.NewHelloClient&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;conn&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // 调用方法
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    req :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &amp;amp;pb.HelloRequest&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;Name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;gRPC&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    res, err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c.SayHello&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context.Background&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;, req&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; err !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; nil &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        grpclog.Fatalln&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grpclog.Println&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;res.Message&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// interceptor 客户端拦截器
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func interceptor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx context.Context, method string, req, reply interface&lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; error &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; time.Now&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    err :&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; invoker&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctx, method, req, reply, cc, opts...&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grpclog.Printf&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;method=%s req=%v rep=%v duration=%s error=%v\n&amp;#34;&lt;/span&gt;, method, req, reply, time.Since&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;start&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;, err&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;内置trace&#34;&gt;内置Trace &lt;a href=&#34;#%e5%86%85%e7%bd%aetrace&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;grpc内置了客户端和服务端的请求追踪，基于&lt;code&gt;golang.org/x/net/trace&lt;/code&gt;包实现，默认是开启状态，可以查看事件和请求日志，对于基本的请求状态查看调试也是很有帮助的，客户端与服务端基本一致，这里以服务端开启trace server为例，修改hello项目服务端代码：
目录结构&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— hello_trace/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— client/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— main.go   // 客户端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— server/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— main.go   // 服务端
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|—— proto/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    |—— hello/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— hello.proto   // proto描述文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        |—— hello.pb.go   // proto编译后文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;示例代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/jergoo/go-grpc-example/proto/hello&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 引入编译生成的包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang.org/x/net/context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;golang.org/x/net/trace&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;google.golang.org/grpc/grpclog&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Address gRPC服务地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:50052&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 定义helloService并实现约定的接口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;helloService&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// HelloService Hello服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloService&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;helloService&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// SayHello 实现Hello服务接口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;h&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;helloService&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;SayHello&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HelloRequest&lt;/span&gt;) (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HelloResponse&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; new(&lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HelloResponse&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Message&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello %s.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;in&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Listen&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;grpclog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;failed to listen: %v&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 实例化grpc Server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;grpc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewServer&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 注册HelloService&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RegisterHelloServer&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloService&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 开启trace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;startTrace&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;grpclog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Listen on &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Serve&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;startTrace&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;trace&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;AuthRequest&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;any&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;sensitive&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:50051&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;grpclog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Trace listen on 50051&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里我们开启一个http服务监听50051端口，用来查看grpc请求的trace信息&lt;/p&gt;
&lt;h2 id=&#34;服务端事件查看&#34;&gt;服务端事件查看 &lt;a href=&#34;#%e6%9c%8d%e5%8a%a1%e7%ab%af%e4%ba%8b%e4%bb%b6%e6%9f%a5%e7%9c%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;访问：localhost:50051/debug/events，结果如图：
&lt;img src=&#34;https://abnerxc.github.io/img/grpc_trace_events.jpg&#34; alt=&#34;grpc-trace-events&#34;&gt;
可以看到服务端注册的服务和服务正常启动的事件信息。&lt;/p&gt;
&lt;h2 id=&#34;请求日志信息查看&#34;&gt;请求日志信息查看 &lt;a href=&#34;#%e8%af%b7%e6%b1%82%e6%97%a5%e5%bf%97%e4%bf%a1%e6%81%af%e6%9f%a5%e7%9c%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;访问：localhost:50051/debug/requests，结果如图：
&lt;img src=&#34;https://abnerxc.github.io/img/grpc_trace_requests.jpg&#34; alt=&#34;grpc-trace-events&#34;&gt;
这里可以显示最近的请求状态，包括请求的服务、参数、耗时、响应，对于简单的状态查看还是很方便的，默认值显示最近10条记录。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go的defer总结</title>
      <link>https://abnerxc.github.io/go/go%E7%9A%84defer%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 15 Mar 2024 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/go%E7%9A%84defer%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;一defer执行顺序&#34;&gt;一、defer执行顺序 &lt;a href=&#34;#%e4%b8%80defer%e6%89%a7%e8%a1%8c%e9%a1%ba%e5%ba%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;多个defer出现的时候，&lt;strong&gt;它是一个“栈”的关系，也就是先进后出&lt;/strong&gt;。一个函数中，写在前面的defer会比写在后面的defer调用的晚。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func1&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func2&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func3&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func1&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func2&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;B&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;func3&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-defer1.jpeg&#34; alt=&#34;go-defer&#34;&gt;
输出结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;B
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;二defer与return谁先谁后&#34;&gt;二、defer与return谁先谁后 &lt;a href=&#34;#%e4%ba%8cdefer%e4%b8%8ereturn%e8%b0%81%e5%85%88%e8%b0%81%e5%90%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deferFunc&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer func called&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;returnFunc&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;return func called&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;returnAndDefer&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;deferFunc&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;returnFunc&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;returnAndDefer&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行结果为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;return func called
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;defer func called
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结论为：return之后的语句先执行，defer后的语句后执行&lt;/p&gt;
&lt;h1 id=&#34;三函数的返回值初始化&#34;&gt;三、函数的返回值初始化 &lt;a href=&#34;#%e4%b8%89%e5%87%bd%e6%95%b0%e7%9a%84%e8%bf%94%e5%9b%9e%e5%80%bc%e5%88%9d%e5%a7%8b%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DeferFunc1&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = &amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;DeferFunc11&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// output t=0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;证明，只要声明函数的返回值变量名称，就会在函数初始化时候为之赋值为0，而且在函数体作用域可见。&lt;/p&gt;
&lt;h1 id=&#34;四有名函数返回值遇见defer情况&#34;&gt;四、有名函数返回值遇见defer情况 &lt;a href=&#34;#%e5%9b%9b%e6%9c%89%e5%90%8d%e5%87%bd%e6%95%b0%e8%bf%94%e5%9b%9e%e5%80%bc%e9%81%87%e8%a7%81defer%e6%83%85%e5%86%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;returnButDefer&lt;/span&gt;() (&lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) {  &lt;span style=&#34;color:#75715e&#34;&gt;//t初始化0， 并且作用域为该函数全域&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;returnButDefer&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// output t=0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该returnButDefer()本应的返回值是1，但是在return之后，又被defer的匿名func函数执行，所以t=t*10被执行，最后returnButDefer()返回给上层main()的结果为10&lt;/p&gt;
&lt;h1 id=&#34;五defer遇见panic&#34;&gt;五、defer遇见panic &lt;a href=&#34;#%e4%ba%94defer%e9%81%87%e8%a7%81panic&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;根据知识点2，我们知道，defer遇见return情况如下：
&lt;img src=&#34;https://abnerxc.github.io/img/go-defer2.jpeg&#34; alt=&#34;go-defer2&#34;&gt;
那么，遇到panic时，遍历本协程的defer链表，并执行defer。在执行defer过程中:遇到recover则停止panic，返回recover处继续往下执行。如果没有遇到recover，遍历完本协程的defer链表后，向stderr抛出panic信息。
&lt;img src=&#34;https://abnerxc.github.io/img/go-defer3.jpeg&#34; alt=&#34;go-defer3&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;defer遇见panic但是并不捕获异常的情况&#34;&gt;defer遇见panic，但是并不捕获异常的情况 &lt;a href=&#34;#defer%e9%81%87%e8%a7%81panic%e4%bd%86%e6%98%af%e5%b9%b6%e4%b8%8d%e6%8d%95%e8%8e%b7%e5%bc%82%e5%b8%b8%e7%9a%84%e6%83%85%e5%86%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;defer_call&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main 正常结束&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;defer_call&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer: panic 之前1&amp;#34;&lt;/span&gt;) }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer: panic 之前2&amp;#34;&lt;/span&gt;) }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;异常内容&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;//触发defer出栈&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer: panic 之后，永远执行不到&amp;#34;&lt;/span&gt;) }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// output
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;defer: panic 之前2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;defer: panic 之前1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;panic: 异常内容
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;//... 异常堆栈信息
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;defer遇见panic并捕获异常&#34;&gt;defer遇见panic，并捕获异常 &lt;a href=&#34;#defer%e9%81%87%e8%a7%81panic%e5%b9%b6%e6%8d%95%e8%8e%b7%e5%bc%82%e5%b8%b8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;defer_call&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main 正常结束&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;defer_call&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer: panic 之前1, 捕获异常&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; recover(); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer: panic 之前2, 不捕获&amp;#34;&lt;/span&gt;) }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;异常内容&amp;#34;&lt;/span&gt;)  &lt;span style=&#34;color:#75715e&#34;&gt;//触发defer出栈&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer: panic 之后, 永远执行不到&amp;#34;&lt;/span&gt;) }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;defer: panic 之前2, 不捕获
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;defer: panic 之前1, 捕获异常
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;异常内容
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;main 正常结束
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;defer 最大的功能是 panic 后依然有效
所以defer可以保证你的一些资源一定会被关闭，从而避免一些异常出现的问题。&lt;/p&gt;
&lt;h1 id=&#34;六defer中包含panic&#34;&gt;六、defer中包含panic &lt;a href=&#34;#%e5%85%addefer%e4%b8%ad%e5%8c%85%e5%90%abpanic&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; recover(); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fatal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;defer panic&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    panic(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;panic&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;defer panic
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;分析
&lt;strong&gt;panic仅有最后一个可以被revover捕获。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;触发&lt;code&gt;panic(&amp;quot;panic&amp;quot;)&lt;/code&gt;后defer顺序出栈执行，第一个被执行的defer中 会有panic(&amp;ldquo;defer panic&amp;rdquo;)异常语句，这个异常将会覆盖掉main中的异常panic(&amp;ldquo;panic&amp;rdquo;)，最后这个异常被第二个执行的defer捕获到。&lt;/p&gt;
&lt;h1 id=&#34;七defer下的函数参数包含子函数&#34;&gt;七、defer下的函数参数包含子函数 &lt;a href=&#34;#%e4%b8%83defer%e4%b8%8b%e7%9a%84%e5%87%bd%e6%95%b0%e5%8f%82%e6%95%b0%e5%8c%85%e5%90%ab%e5%ad%90%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;结果:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;3
4
2
1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;分析：
这里，有4个函数，他们的index序号分别为1，2，3，4。&lt;/p&gt;
&lt;p&gt;那么这4个函数的先后执行顺序是什么呢？这里面有两个defer， 所以defer一共会压栈两次，先进栈1，后进栈2。 那么在压栈function1的时候，需要连同函数地址、函数形参一同进栈，那么为了得到function1的第二个参数的结果，所以就需要先执行function3将第二个参数算出，那么function3就被第一个执行。同理压栈function2，就需要执行function4算出function2第二个参数的值。然后函数结束，先出栈fuction2、再出栈function1.&lt;/p&gt;
&lt;p&gt;所以顺序如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;defer压栈function1，压栈函数地址、形参1、形参2(调用function3) &amp;ndash;&amp;gt; 打印3&lt;/li&gt;
&lt;li&gt;defer压栈function2，压栈函数地址、形参1、形参2(调用function4) &amp;ndash;&amp;gt; 打印4&lt;/li&gt;
&lt;li&gt;defer出栈function2, 调用function2 &amp;ndash;&amp;gt; 打印2&lt;/li&gt;
&lt;li&gt;defer出栈function1, 调用function1&amp;ndash;&amp;gt; 打印1&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;八defer中的坑&#34;&gt;八、defer中的坑 &lt;a href=&#34;#%e5%85%abdefer%e4%b8%ad%e7%9a%84%e5%9d%91&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;defer-nil函数&#34;&gt;defer nil函数 &lt;a href=&#34;#defer-nil%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() = &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;runs&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//output&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;panic&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;runtime&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;invalid&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;memory&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pointer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dereference&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;名为 func 的函数一直运行至结束，然后 defer 函数会被执行且会因为值为 nil 而产生 panic 异常。然而值得注意的是，run() 的声明是没有问题，因为在外围函数运行完成后它才会被调用。&lt;/p&gt;
&lt;h2 id=&#34;循环中使用defer&#34;&gt;循环中使用defer &lt;a href=&#34;#%e5%be%aa%e7%8e%af%e4%b8%ad%e4%bd%bf%e7%94%a8defer&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;慎重在循环中使用defer&lt;/code&gt;，因为结果出人意料&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func demo(){
	for{
		row,err:=db.Query(&amp;#34;select .....&amp;#34;)
		if err!=nil{
			...
		}
		defer row.close()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上面的例子中，defer row.Close() 在循环中的延迟函数会在函数结束过后运行，而不是每次 for 循环结束之后。这些延迟函数会不停地堆积到延迟调用栈中，最终可能会导致一些不可预知的问题。&lt;/p&gt;
&lt;p&gt;解决方案1：不使用defer&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;demo&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select .....&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;.close()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决方案2：移交给函数
这样每次匿名函数执行完，会执行defer&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;demo&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select .....&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;row&lt;/span&gt;.close()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;延迟调用含有闭包的函数&#34;&gt;延迟调用含有闭包的函数 &lt;a href=&#34;#%e5%bb%b6%e8%bf%9f%e8%b0%83%e7%94%a8%e5%90%ab%e6%9c%89%e9%97%ad%e5%8c%85%e7%9a%84%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;database&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;database&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;() (&lt;span style=&#34;color:#a6e22e&#34;&gt;disconnect&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;connect&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;disconnect&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//运行 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;database&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;query db...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//output&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最终 disconnect 并没有输出，最后只有 connect ，这是一个 bug，最终的情况是 connect() 执行结束后，其执行域得以被保存起来，但内部的闭包并不会被执行。&lt;/p&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;database&lt;/span&gt;{}  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;connect&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; close()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;query db...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;在执行块中使用-defer&#34;&gt;在执行块中使用 defer &lt;a href=&#34;#%e5%9c%a8%e6%89%a7%e8%a1%8c%e5%9d%97%e4%b8%ad%e4%bd%bf%e7%94%a8-defer&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;想要在执行块执行结束后执行在块内延迟调用的函数，但事实并非如此，它们只会在块所属的函数执行结束后才被执行，这种情况适用于所有的代码块除了上文的函数块例如，for，switch 等&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;block: defer runs&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;block: ends&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main: ends&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//output&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;ends&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;ends&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;block&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;解决方案&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;func: defer runs&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;func: ends&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main: ends&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>基于Scratch创建最小且安全的golang docker镜像</title>
      <link>https://abnerxc.github.io/go/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/</link>
      <pubDate>Mon, 12 Sep 2022 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83/</guid>
      <description>&lt;h1 id=&#34;golang打包镜像对比&#34;&gt;golang打包镜像对比 &lt;a href=&#34;#golang%e6%89%93%e5%8c%85%e9%95%9c%e5%83%8f%e5%af%b9%e6%af%94&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;从docker官方下载了镜像以后，发现一个运行go的环境需要779M,我得项目才3~4M，这是不可以接受的&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker image list
golang    latest       1c1309ff8e0d        10 days ago         779MB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就算使用alpine镜像也有269M&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker image list
golang     alpine      bbab7aea1231        7 weeks ago         269MB
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;于是打算自己构建golang运行的最小镜像.&lt;/p&gt;
&lt;h1 id=&#34;docker的multi-stage-builds&#34;&gt;docker的Multi-stage builds &lt;a href=&#34;#docker%e7%9a%84multi-stage-builds&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;多阶段构建是需要Docker 17.05或更高版本的新功能。在此之前，我们将看到docker scratch image，Zero Bytes Image。非常适合嵌入我们的静态二进制文件。&lt;/p&gt;
&lt;p&gt;先上代码,例子说明&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM        golang:alpine AS builder
MAINTAINER  Chen Xu &amp;lt;abner510@126.com&amp;gt;
RUN         apk update &amp;amp;&amp;amp; apk add --no-cache git ca-certificates tzdata &amp;amp;&amp;amp; update-ca-certificates &amp;amp;&amp;amp; adduser -D -g &amp;#39;&amp;#39; appuser
ENV         GOPROXY https://mirrors.aliyun.com/goproxy/
ENV         GO111MODULE on
WORKDIR     /go/cache
ADD         go.mod .
ADD         go.sum .
RUN         go mod download
WORKDIR     /go/src/ginx
ADD        . /go/src/ginx
RUN         CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -ldflags=&amp;#34;-w -s&amp;#34; -o server

#容器构建
FROM        scratch AS prod
COPY        --from=builder /etc/passwd /etc/passwd
COPY        --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY        --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY        --from=builder /go/src/ginx/config /app/config
COPY        --from=builder /go/src/ginx/server /app
USER        appuser
EXPOSE      9000
CMD         [&amp;#34;/app/server&amp;#34;, &amp;#34;-e=prod&amp;#34;]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;代码示例说明&#34;&gt;代码示例说明 &lt;a href=&#34;#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b%e8%af%b4%e6%98%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;添加ssl证书支持https和时区&#34;&gt;添加SSL证书支持HTTPS和时区 &lt;a href=&#34;#%e6%b7%bb%e5%8a%a0ssl%e8%af%81%e4%b9%a6%e6%94%af%e6%8c%81https%e5%92%8c%e6%97%b6%e5%8c%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;apk add --no-cache git ca-certificates tzdata &amp;amp;&amp;amp; update-ca-certificates
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;添加运行golang的用户&#34;&gt;添加运行golang的用户 &lt;a href=&#34;#%e6%b7%bb%e5%8a%a0%e8%bf%90%e8%a1%8cgolang%e7%9a%84%e7%94%a8%e6%88%b7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;adduser -D -g &amp;#39;&amp;#39; appuser
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;go-mod模式项目包管理加快构建速度&#34;&gt;go mod模式项目包管理，加快构建速度 &lt;a href=&#34;#go-mod%e6%a8%a1%e5%bc%8f%e9%a1%b9%e7%9b%ae%e5%8c%85%e7%ae%a1%e7%90%86%e5%8a%a0%e5%bf%ab%e6%9e%84%e5%bb%ba%e9%80%9f%e5%ba%a6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ENV         GOPROXY https://goproxy.io   #设置代理，国内的墙你懂的
ENV         GO111MODULE on  #开启go mod 模式  ，老版本GO111MODULE=auto 默认是自动
WORKDIR     /go/cache  # 设置包的下载目录
ADD         go.mod .
ADD         go.sum .
RUN         go mod download
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-alilog.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;cgo编译使用&#34;&gt;CGO编译使用 &lt;a href=&#34;#cgo%e7%bc%96%e8%af%91%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;由于scratch是空镜像，&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -ldflags=&amp;#34;-w -s&amp;#34; -o server
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CGO_ENABLED=0&lt;/code&gt; ，CGO_ENABLED 是因为 交叉编译不支持 CGO，我们这里禁用它&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a -installsuffix cgo&lt;/code&gt; , &lt;code&gt;-a&lt;/code&gt;:强制重新编译，简单来说，就是不利用缓存或已编译好的部分文件，直接所有包都是最新的代码重新编译和关联; &lt;code&gt;installsuffix&lt;/code&gt;:在软件包安装的目录中增加后缀标识，以保持输出与默认版本分开&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;制作golang运行的容器&#34;&gt;制作golang运行的容器 &lt;a href=&#34;#%e5%88%b6%e4%bd%9cgolang%e8%bf%90%e8%a1%8c%e7%9a%84%e5%ae%b9%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FROM        scratch AS prod #镜像版本
COPY        --from=builder /etc/passwd /etc/passwd  #这里需要使用appuer账号信息
COPY        --from=builder /usr/share/zoneinfo /usr/share/zoneinfo #时区
COPY        --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ #SSL证书文件
COPY        --from=builder /go/src/ginx/config /app/config #应用配置文件
COPY        --from=builder /go/src/ginx/server /app #应用二进制文件
USER        appuser #运行用户
EXPOSE      9000 #暴露端口
CMD         [&amp;#34;/app/server&amp;#34;, &amp;#34;-e=prod&amp;#34;] #运行应用，传入运行参数
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;阿里云加速翻墙速度&#34;&gt;阿里云加速翻墙速度 &lt;a href=&#34;#%e9%98%bf%e9%87%8c%e4%ba%91%e5%8a%a0%e9%80%9f%e7%bf%bb%e5%a2%99%e9%80%9f%e5%ba%a6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;1、创建镜像仓库
&lt;img src=&#34;https://abnerxc.github.io/img/go-aliset1.jpeg&#34; alt=&#34;&#34;&gt;
2、选择仓库&lt;code&gt;管理&lt;/code&gt;，进行配置仓库
3、选择git仓库版本，这里本人是放在github上，所以选择github，进行授权，选择自己的仓库和项目，配置如下具体dockerfile文件根据自己仓库路径配置
&lt;img src=&#34;https://abnerxc.github.io/img/go-aliset2.jpeg&#34; alt=&#34;&#34;&gt;
4、选择构建即可&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Centos7优化</title>
      <link>https://abnerxc.github.io/tool/linux-centos%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 21 Jul 2022 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/tool/linux-centos%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h2 id=&#34;替换源&#34;&gt;替换源 &lt;a href=&#34;#%e6%9b%bf%e6%8d%a2%e6%ba%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo sed -e &amp;#39;s|^mirrorlist=|#mirrorlist=|g&amp;#39; -e &amp;#39;s|^#baseurl=http://mirror.centos.org|baseurl=https://mirrors.aliyun.com|g&amp;#39; -i.bak /etc/yum.repos.d/CentOS-*.repo

sudo yum makecache
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;无法远程ssh&#34;&gt;无法远程SSH &lt;a href=&#34;#%e6%97%a0%e6%b3%95%e8%bf%9c%e7%a8%8bssh&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/etc/ssh/sshd_config的PermitRootLogin的参数为yes
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装增强&#34;&gt;安装增强 &lt;a href=&#34;#%e5%ae%89%e8%a3%85%e5%a2%9e%e5%bc%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum install -y gcc gcc-devel gcc-c++ gcc-c++-devel make kernel kernel-devel bzip2 vim wget  #需要的安装包
shutdown -r now  #重启电脑
ln -s /usr/src/kernels/3.10.0(内核版本号/ /usr/src/linux　   ## 增加软连接
#点击虚拟机设备-&amp;gt;安装增强
mount /dev/cdrom /mnt  #挂载增强光盘到系统，提示只读不用管
cd /mnt &amp;amp;&amp;amp;  ./VBoxLinuxAdditions.run  
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;挂载&#34;&gt;挂载 &lt;a href=&#34;#%e6%8c%82%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir /root/www &amp;amp;&amp;amp; chmod -R 777 /root/www
mount -t vboxsf docker /root/www   #手动挂载
### 此时如果提示/sbin/mount.vboxsf: mounting failed with the error: No such device，说明内核模块vboxsf未加载，可通过lsmod | grep vboxsf查看（无结果说明未加载）。
modprobe vboxsf #加载vboxsf模块
#自动挂载
vim /etc/fstab
docker /root/www   vboxsf rw,gid=100,uid=1000,auto /0 0
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;修改主机名&#34;&gt;修改主机名 &lt;a href=&#34;#%e4%bf%ae%e6%94%b9%e4%b8%bb%e6%9c%ba%e5%90%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vim /etc/sysconfig/network
vim ~/.bash_profile
export PS1=&amp;#39;[\u@\H \W]$&amp;#39;
source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;永久关闭防火墙&#34;&gt;永久关闭防火墙 &lt;a href=&#34;#%e6%b0%b8%e4%b9%85%e5%85%b3%e9%97%ad%e9%98%b2%e7%81%ab%e5%a2%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;systemctl stop firewalld service
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;selinux关闭&#34;&gt;selinux关闭 &lt;a href=&#34;#selinux%e5%85%b3%e9%97%ad&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;修改/etc/selinux/config
将SELINUX=enforcing改为SELINUX=disabled,
状态 /usr/sbin/sestatus -v
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ssh客户端超时&#34;&gt;SSH客户端超时 &lt;a href=&#34;#ssh%e5%ae%a2%e6%88%b7%e7%ab%af%e8%b6%85%e6%97%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /etc/ssh
cp sshd_config sshd_config.bak
sed -i &amp;#34;s/#ClientAliveInterval 0/ClientAliveInterval 60/g&amp;#34; sshd_config
sed -i &amp;#34;s/#ClientAliveCountMax 3/ClientAliveCountMax 3/g&amp;#34; sshd_config
grep ClientAlive sshd_config
diff sshd_config sshd_config.bak
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;dnf包管理器&#34;&gt;dnf包管理器 &lt;a href=&#34;#dnf%e5%8c%85%e7%ae%a1%e7%90%86%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum install epel-release &amp;amp;&amp;amp; yum install dnf
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mysql安装&#34;&gt;mysql安装 &lt;a href=&#34;#mysql%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;源:sudo yum localinstall https://repo.mysql.com/mysql80-community-release-el7-1.noarch.rpm
安装：sudo yum install mysql-community-server
启动：systemctl start  mysqld.service
查看初始密码：sudo grep &amp;#39;temporary password&amp;#39; /var/log/mysqld.log
#mysql 设置
1.mysql -u root -p ，因为首次安装没有密码直接回车登录
2. 修改密码   ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;su123456&amp;#39;;
3.  创建远程访问    
    CREATE USER &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;123456&amp;#39;;
    GRANT ALL ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39;;
    ALTER USER &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED WITH mysql_native_password BY &amp;#39;123456&amp;#39;;

防火墙端口：firewall-cmd --zone=public --add-port=3306/tcp --permanent  
重启防火墙：systemctl restart firewalld  
设置开机启动：systemctl enable mysqld  
配置文件：/etc/my.cnf   数据存放：/var/lib/mysql  Log：/var/log
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;redis安装&#34;&gt;redis安装 &lt;a href=&#34;#redis%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;安装：sudo yum install redis
启动：sudo systemctl start redis  启动
防火墙端口：firewall-cmd --zone=public --add-port=6379/tcp --permanent &amp;amp;&amp;amp; systemctl restart firewalld.service
开机启动：sudo systemctl enable redis 
配置文件：/etc/redis.conf
日志：/var/log/redis/redis.log 
开启远程：bind 注释  ，protected-mode 改no ,设置密码  requirepass foobared
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nodejs&#34;&gt;nodejs &lt;a href=&#34;#nodejs&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -sL https://rpm.nodesource.com/setup_12.x | bash -
yum install -y nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;memcached&#34;&gt;memcached &lt;a href=&#34;#memcached&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum install libevent libevent-devel memcached
systemctl enable memcached
firewall-cmd --zone=public --add-port=11211/tcp --permanent &amp;amp;&amp;amp; systemctl restart firewalld.service
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nginx&#34;&gt;nginx &lt;a href=&#34;#nginx&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
sudo yum install -y nginx
sudo systemctl enable nginx
firewall-cmd --zone=public --add-port=80/tcp --permanent &amp;amp;&amp;amp; systemctl restart firewalld.service
# nginx默认配置位置
/etc/nginx/nginx.conf  
# 403问题，修改配置user=root ,关闭selinux（修改/etc/selinux/config 文件将SELINUX=enforcing改为SELINUX=disabled） ，开启html的目录读取权限
/etc/nginx/conf.d/default.conf
# 默认wwwroot位置
/usr/share/nginx/html
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;php&#34;&gt;php &lt;a href=&#34;#php&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
sudo yum -y install https://rpms.remirepo.net/enterprise/remi-release-7.rpm
sudo yum-config-manager --enable remi-php74
sudo yum -y install yum-utils
sudo yum update

# yum list | grep redis #查看扩展
yum -y install php php-cli  php-fpm php-common php-gd php-intl php-soap php-xsl php-xmlrpc php-bz2 php-zip php-pcntl php-pdo_mysql php-mysqli php-mbstring php-exif php-bcmath php-calendar php-sockets php-gettext php-shmop php-sysvmsg php-sysvsem php-sysvshm php-opcache php-pecl-xdebug3 php-pecl-redis5  php-pecl-memcached php-pecl-mongodb php-pecl-swoole4 php-pecl-protobuf  php-pecl-amqp

sudo systemctl enable php-fpm
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;rabbitmq&#34;&gt;rabbitmq &lt;a href=&#34;#rabbitmq&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo rpm -Uvh https://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm
sudo yum install erlang socat
wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.19/rabbitmq-server-3.8.19-1.el7.noarch.rpm
sudo rpm --import https://www.rabbitmq.com/rabbitmq-signing-key-public.asc
sudo rpm -Uvh rabbitmq-server-3.8.19-1.el7.noarch.rpm
systemctl enable rabbitmq-server
sudo /sbin/service rabbitmq-server start #启动服务

#安装web界面
sudo rabbitmq-plugins enable rabbitmq_management
sudo firewall-cmd --zone=public --permanent --add-port=4369/tcp --add-port=25672/tcp --add-port=5671-5672/tcp --add-port=15672/tcp  --add-port=61613-61614/tcp --add-port=1883/tcp --add-port=8883/tcp &amp;amp;&amp;amp; systemctl restart firewalld.service
默认的用户名和密码为guest / guest，登录后进入管理界面,3.8版本后guest必须修改配置文件才能远程
#添加用户
#./rabbitmqctl add_user 账号 密码
./rabbitmqctl add_user admin rabbitmq@666
#分配用户标签(admin为要赋予administrator权限的刚创建的那个账号的名字)
./rabbitmqctl set_user_tags admin administrator
#设置权限&amp;lt;即开启远程访问&amp;gt;(如果需要远程连接,例如java项目中需要调用mq,则一定要配置,否则无法连接到mq,admin为要赋予远程访问权限的刚创建的那个账号的名字,必须运行着rabbitmq此命令才能执行)
./rabbitmqctl set_permissions -p &amp;#34;/&amp;#34; admin &amp;#34;.*&amp;#34; &amp;#34;.*&amp;#34; &amp;#34;.*&amp;#34; 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;ssr&#34;&gt;SSR &lt;a href=&#34;#ssr&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;ssr安装&#34;&gt;ssr安装 &lt;a href=&#34;#ssr%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum -y install wget
wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh
chmod +x ssr.sh
./ssr.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ssr客户端下载&#34;&gt;SSR客户端下载 &lt;a href=&#34;#ssr%e5%ae%a2%e6%88%b7%e7%ab%af%e4%b8%8b%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Windows客户端：&lt;a href=&#34;https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases&#34;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mac客户端：&lt;a href=&#34;https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases&#34;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;安卓客户端：&lt;a href=&#34;https://github.com/shadowsocksr-backup/shadowsocksr-android/releases&#34;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;iPhone客户端：需要切换北美账号商店，ssr或者potatso Lite客户端等&lt;/li&gt;
&lt;li&gt;docker搭建：&lt;a href=&#34;https://www.51it.wang/ll/1137&#34;&gt;地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;u盘刻录&#34;&gt;u盘刻录 &lt;a href=&#34;#u%e7%9b%98%e5%88%bb%e5%bd%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo dd if=/Users/root/Downloads/ubuntu-14.04.6-server-amd64.iso of=/dev/rdisk2 bs=1m; sync
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;安装wifi-bcm4312&#34;&gt;安装wifi （bcm4312） &lt;a href=&#34;#%e5%ae%89%e8%a3%85wifi-bcm4312&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1、查看网卡型号，确认无线网卡型号为博通BCMXXX
yum install pciutils
lspci | grep Network # 无线网卡型号
lspci | grep Ethernet # 有线网卡型号

2、查看网卡型号，确认无线网卡型号为BCMXXX
sudo yum install https://download1.rpmfusion.org/free/el/rpmfusion-free-release-7.noarch.rpm
sudo yum install https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-7.noarch.rpm
重启电脑

3、查看内核
sudo yum install kernel-devel-$(uname -r) 

4、安装驱动
sudo yum install broadcom-wl akmod-wl akmods
sudo akmods  #这一步很慢
sudo yum update

5、链接
扫描：nmcli dev wifi list
链接：nmcli device wifi connect &amp;#34;olivia&amp;#34; password &amp;#34;makeit458&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;笔记本优化&#34;&gt;笔记本优化 &lt;a href=&#34;#%e7%ac%94%e8%ae%b0%e6%9c%ac%e4%bc%98%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1.合盖挂起关闭
vi /etc/systemd/logind.conf
HandleLidSwitch=lock（锁屏模式）   
systemctl restart systemd-logind
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;挂载winmac-共享文件&#34;&gt;挂载win||mac 共享文件 &lt;a href=&#34;#%e6%8c%82%e8%bd%bdwinmac-%e5%85%b1%e4%ba%ab%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum install cifs-utils -y
mount -t cifs //192.168.0.6/work /work -o username=abner,password=xuch@n,nounix,sec=ntlmssp,rw,dir_mode=0777,file_mode=0777


# echo &amp;#34;//192.168.0.6/work /work -o username=abner,password=xuch@n,nounix,sec=ntlmssp,rw,dir_mode=0777,file_mode=0777&amp;#34;  &amp;gt;  /etc/fstab   #开机自动 wifi 模式有问题，会导致挂载失败无法进入系统
mount -o remount,rw / 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;延迟脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash
sleep 60
mount -t cifs //192.168.0.6/work /work -o username=abner,password=xuch@n,nounix,sec=ntlmssp
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;挂载目录运行docker，权限等问题&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;firewall-cmd --zone=public --add-masquerade  --permanent    （permanent永久生效）
systemctl restart firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;linux安装go&#34;&gt;Linux安装go &lt;a href=&#34;#linux%e5%ae%89%e8%a3%85go&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 下载源码包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://dl.google.com/go/go1.13.5.linux-amd64.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 解压目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -C /usr/local/ -xzf go1.13.5.src.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 设置环境变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vi ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 内容追加&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$PATH:/usr/local/go/bin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 保存文件，执行使其生效&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source ~/.bashrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Docker搭建可一键部署的多域名LNMP环境</title>
      <link>https://abnerxc.github.io/tool/docker-%E6%90%AD%E5%BB%BA%E5%8F%AF%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E7%9A%84%E5%A4%9A%E5%9F%9F%E5%90%8Dlnmp%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 21 Jul 2022 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/tool/docker-%E6%90%AD%E5%BB%BA%E5%8F%AF%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E7%9A%84%E5%A4%9A%E5%9F%9F%E5%90%8Dlnmp%E7%8E%AF%E5%A2%83/</guid>
      <description>&lt;h1 id=&#34;docker搭建可一键部署的多域名lnmp环境&#34;&gt;Docker搭建可一键部署的多域名LNMP环境 &lt;a href=&#34;#docker%e6%90%ad%e5%bb%ba%e5%8f%af%e4%b8%80%e9%94%ae%e9%83%a8%e7%bd%b2%e7%9a%84%e5%a4%9a%e5%9f%9f%e5%90%8dlnmp%e7%8e%af%e5%a2%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;特点&#34;&gt;特点 &lt;a href=&#34;#%e7%89%b9%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;完全开源&lt;/li&gt;
&lt;li&gt;支持多版本PHP切换（PHP5.4、PHP5.6、PHP7.2&amp;hellip;)&lt;/li&gt;
&lt;li&gt;支持绑定任意多个域名&lt;/li&gt;
&lt;li&gt;支持HTTPS和HTTP/2&lt;/li&gt;
&lt;li&gt;PHP源代码位于host中&lt;/li&gt;
&lt;li&gt;MySQL data位于host中&lt;/li&gt;
&lt;li&gt;所有配置文件可在host中直接修改&lt;/li&gt;
&lt;li&gt;所有日志文件可在host中直接查看&lt;/li&gt;
&lt;li&gt;内置完整PHP扩展安装命令&lt;/li&gt;
&lt;li&gt;实际使用，确保100%可行&lt;/li&gt;
&lt;li&gt;实现一次配置，可在任何支持Docker系统使用&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;安装步骤&#34;&gt;安装步骤 &lt;a href=&#34;#%e5%ae%89%e8%a3%85%e6%ad%a5%e9%aa%a4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&#34;docker安装&#34;&gt;docker安装 &lt;a href=&#34;#docker%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;1--centos7安装方法&#34;&gt;1.  Centos7安装方法 &lt;a href=&#34;#1--centos7%e5%ae%89%e8%a3%85%e6%96%b9%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo yum install -y yum-utils device-mapper-persistent-data lvm2
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
sudo yum makecache fast
sudo yum -y install docker-ce
sudo service docker start
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2--ubuntu安装方法&#34;&gt;2.  Ubuntu安装方法 &lt;a href=&#34;#2--ubuntu%e5%ae%89%e8%a3%85%e6%96%b9%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common
curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository &amp;#34;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&amp;#34;
sudo apt-get -y update
sudo apt-get -y install docker-ce
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;docker-compose安装&#34;&gt;docker-compose安装 &lt;a href=&#34;#docker-compose%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看版本加入到docker组&#34;&gt;查看版本，加入到docker组 &lt;a href=&#34;#%e6%9f%a5%e7%9c%8b%e7%89%88%e6%9c%ac%e5%8a%a0%e5%85%a5%e5%88%b0docker%e7%bb%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker -v
$ docker-compose -v
$ sudo gpasswd -a ${USER} docker     
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就不用每次启动Docker都得加sudo了，注意，执行gpasswd命令之后要重新登陆才有效。&lt;/p&gt;
&lt;h2 id=&#34;使用国内镜像仓库&#34;&gt;使用国内镜像仓库 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e5%9b%bd%e5%86%85%e9%95%9c%e5%83%8f%e4%bb%93%e5%ba%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先注册一个阿里云账号，然后访问阿里云的&lt;a href=&#34;https://cr.console.aliyun.com/&#34;&gt;Docker镜像仓库&lt;/a&gt;，能找到加速器地址。&lt;/li&gt;
&lt;li&gt;对于Docker 1.10+，打开配置文件 /etc/docker/daemon.json（没有时新建该文件）：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mkdir -p /etc/docker
echo &amp;#39;{ &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://l714mp7z.mirror.aliyuncs.com&amp;#34;] }&amp;#39; &amp;gt;  /etc/docker/daemon.json
sudo systemctl daemon-reload
sudo systemctl restart docker
sudo systemctl enable docker

#开机启动centos7
systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Docker 1.10以下请看：https://yq.aliyun.com/articles/29941。&lt;/p&gt;
&lt;h2 id=&#34;安装容器和镜像&#34;&gt;安装容器和镜像 &lt;a href=&#34;#%e5%ae%89%e8%a3%85%e5%ae%b9%e5%99%a8%e5%92%8c%e9%95%9c%e5%83%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;如果是windows下基于virtualbox挂载目录到linux&#34;&gt;如果是windows下基于virtualbox挂载目录到linux &lt;a href=&#34;#%e5%a6%82%e6%9e%9c%e6%98%afwindows%e4%b8%8b%e5%9f%ba%e4%ba%8evirtualbox%e6%8c%82%e8%bd%bd%e7%9b%ae%e5%bd%95%e5%88%b0linux&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;安装增强工具centos7版本&#34;&gt;安装增强工具(centos7版本) &lt;a href=&#34;#%e5%ae%89%e8%a3%85%e5%a2%9e%e5%bc%ba%e5%b7%a5%e5%85%b7centos7%e7%89%88%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/docker-win-a.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum install -y gcc gcc-devel gcc-c++ gcc-c++-devel make kernel kernel-devel bzip2 vim wget  
sudo reboot  #重启
ln -s /usr/src/kernels/3.10.0（注意内核版本号自动补全） /usr/src/linux　   ## 增加软连接
#点击虚拟机设备-&amp;gt;安装增强
mount /dev/cdrom /mnt  #挂载增强光盘到系统，提示只读不用管
cd /mnt &amp;amp;&amp;amp;  ./VBoxLinuxAdditions.run
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;配置共享目录&#34;&gt;配置共享目录 &lt;a href=&#34;#%e9%85%8d%e7%bd%ae%e5%85%b1%e4%ba%ab%e7%9b%ae%e5%bd%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/docker-win-b.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;手动挂载&#34;&gt;手动挂载 &lt;a href=&#34;#%e6%89%8b%e5%8a%a8%e6%8c%82%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;ubuntu&#34;&gt;ubuntu &lt;a href=&#34;#ubuntu&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mkdir /home/abner/server  &amp;amp;&amp;amp; chmod -R 777 /home/abner/server 
sudo mount -t vboxsf docker /home/abner/server   #手动挂载 （这里挂载的目录最好不要和共享文件夹名称一样）
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;centos7&#34;&gt;centos7 &lt;a href=&#34;#centos7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo mkdir /root/server  &amp;amp;&amp;amp; chmod -R 777 /root/server 
sudo mount -t vboxsf docker /root/server
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;开机自动挂载&#34;&gt;开机自动挂载 &lt;a href=&#34;#%e5%bc%80%e6%9c%ba%e8%87%aa%e5%8a%a8%e6%8c%82%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;code&gt;virbox自动挂载不能勾选&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&#34;ubuntu-1&#34;&gt;ubuntu &lt;a href=&#34;#ubuntu-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo vim /etc/rc.local
##exit 0 前增加如下命令
sleep 1
sudo mount -t vboxsf docker /home/abner/server
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;centos7-1&#34;&gt;centos7 &lt;a href=&#34;#centos7-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir /root/server &amp;amp;&amp;amp; chmod -R 777 /root/server
mount -t vboxsf docker /root/server   #手动挂载
## 此时如果提示/sbin/mount.vboxsf: mounting failed with the error: No such device，说明内核模块vboxsf未加载，可通过lsmod | grep vboxsf查看（无结果说明未加载）。执行 `modprobe vboxsf` #加载vboxsf模块
#自动挂载
sudo vim /etc/fstab
docker /root/server   vboxsf rw,gid=100,uid=1000,auto 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;若走的端口转发按图如下配置&#34;&gt;若走的端口转发按图如下配置 &lt;a href=&#34;#%e8%8b%a5%e8%b5%b0%e7%9a%84%e7%ab%af%e5%8f%a3%e8%bd%ac%e5%8f%91%e6%8c%89%e5%9b%be%e5%a6%82%e4%b8%8b%e9%85%8d%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/docker-win-c.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;若走的桥接网卡正常ip地址连接即可&#34;&gt;若走的桥接网卡，正常IP地址连接即可 &lt;a href=&#34;#%e8%8b%a5%e8%b5%b0%e7%9a%84%e6%a1%a5%e6%8e%a5%e7%bd%91%e5%8d%a1%e6%ad%a3%e5%b8%b8ip%e5%9c%b0%e5%9d%80%e8%bf%9e%e6%8e%a5%e5%8d%b3%e5%8f%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h1 id=&#34;以下部分属于扩展&#34;&gt;以下部分属于扩展 &lt;a href=&#34;#%e4%bb%a5%e4%b8%8b%e9%83%a8%e5%88%86%e5%b1%9e%e4%ba%8e%e6%89%a9%e5%b1%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;目录说明&#34;&gt;目录说明 &lt;a href=&#34;#%e7%9b%ae%e5%bd%95%e8%af%b4%e6%98%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h4 id=&#34;大致框架&#34;&gt;大致框架 &lt;a href=&#34;#%e5%a4%a7%e8%87%b4%e6%a1%86%e6%9e%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/docker-win-d.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;目录结构&#34;&gt;目录结构 &lt;a href=&#34;#%e7%9b%ae%e5%bd%95%e7%bb%93%e6%9e%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;├── docker-compose.yml          容器启动配置文件
├── Dockerfile                  PHP-FPM构建配置文件
├── conf                        配置目录
│   ├── mysql                   MySQL配置文件目录
│   │   └── my.cnf              MySQL配置文件
│   ├── nginx                   Nginx配置文件目录
│   │   ├── conf.d              站点配置文件目录
│   │   │   ├── certs           SSL认证文件、密钥和加密文件目录
│   │   │   │   └── site2       站点2的认证文件目录
│   │   │   ├── site1.conf      站点1 Nginx配置文件
│   │   │   └── site2.conf      站点2 Nginx配置文件
│   │   └── nginx.conf          Nginx通用配置文件
│   └── php                     PHP配置目录
│       ├── php-fpm.d           PHP-FPM配置目录
│       │   └── www.conf        PHP-FPM配置文件
│       └── php.ini             PHP配置文件
├── log                         日志目录
│   ├── mysql                   MySQL日志目录
│   ├── nginx                   Nginx日志目录
│   └── php-fpm                 PHP-FPM日志目录
├── mysql                       MySQL数据文件目录
└── www                         站点根目录
    ├── site1                   站点1根目录
    └── site2                   站点2根目录
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;nginx配置&#34;&gt;nginx配置 &lt;a href=&#34;#nginx%e9%85%8d%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;server {
    listen  80;
    server_name www.site1.com;
    root /var/www/html/site1;
    index index.shtml index.php index.html;
    location ~* \.(css|js)$ {
        sendfile  off;
        break;
    }
    expires off;
    client_max_body_size 2M;
    client_body_temp_path /var/www/html;

    location / {
            index index.shtml index.php index.html;
            if (!-e $request_filename){
                 rewrite ^/(.+)$ /index.php?_url=https://abnerxc.github.io/$1 last;
            }
    }

    location ~ ^/.+\.php(/|$) {
        fastcgi_pass [容器的ip或者名称]:9000;  
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_read_timeout 600; 
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;站点部署&#34;&gt;站点部署 &lt;a href=&#34;#%e7%ab%99%e7%82%b9%e9%83%a8%e7%bd%b2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;本文有默认加了两个站点：www.site1.com（同localhost）和www.site2.com。&lt;br&gt;
要在本地访问这两个域名，需要修改你的hosts文件，添加以下两行：&lt;br&gt;
127.0.0.1 &lt;a href=&#34;https://www.site1.com&#34;&gt;www.site1.com&lt;/a&gt;&lt;br&gt;
127.0.0.1 &lt;a href=&#34;https://www.site2.com&#34;&gt;www.site2.com&lt;/a&gt;&lt;br&gt;
其中，www.site2.com为支持SSL/https和HTTP/2的示例站点。&lt;br&gt;
因为站点2的SSL采用自签名方式，所以浏览器有安全提示，继续访问就可以了，自己的站点用第三方SSL认证证书替换即可。&lt;br&gt;
如果只用到站点1，把站点2相关的目录和配置文件删除：&lt;br&gt;
./conf/nginx/conf.d/certs/site2/&lt;br&gt;
./conf/nginx/conf.d/site2.conf&lt;br&gt;
./www/site2/&lt;br&gt;
重启容器内的Nginx生效：&lt;br&gt;
docker exec -it dlnmp_nginx_1 nginx -s reload&lt;/p&gt;
&lt;h4 id=&#34;https使用&#34;&gt;HTTPS使用 &lt;a href=&#34;#https%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;./conf/nginx/conf.d/site2.conf&lt;br&gt;
如果是自签名，可以用廖雪峰提供的一个自动生成认证文件、私钥脚本：gencert.sh，
这个脚本已经放在项目中，在这个目录下：&lt;br&gt;
./conf/nginx/conf.d/certs/site2/&lt;br&gt;
在Bash中输入：&lt;br&gt;
$ ./gencert.sh&lt;br&gt;
输入一次域名，和几次密码（内容随意）后，就会生成几个认证文件。&lt;br&gt;
其中自签名情况不需要.csr和.origin.key后缀的文件。&lt;br&gt;
然后修改Nginx配置文件，配置SSL支持就可以了。&lt;/p&gt;
&lt;h4 id=&#34;docker-composeyml文件&#34;&gt;docker-compose.yml文件 &lt;a href=&#34;#docker-composeyml%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;如下是docker容器的运行配置docker-compose.yml的内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nginx:
  image: nginx:alpine
  ports:
    - &amp;#34;80:80&amp;#34;
    - &amp;#34;443:443&amp;#34;
  volumes:
    - ./www/:/var/www/html/:rw
    - ./conf/nginx/conf.d:/etc/nginx/conf.d/:ro
    - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    - ./log/nginx/:/var/log/nginx/:rw
  links:
    - php-fpm:fpm

php-fpm:
  build: .
  expose:
    - &amp;#34;9000&amp;#34;
  volumes:
    - ./www/:/var/www/html/:rw
    - ./conf/php/php.ini:/usr/local/etc/php/php.ini:ro
    - ./conf/php/php-fpm.d/www.conf:/usr/local/etc/php-fpm.d/www.conf:rw
    - ./log/php-fpm/:/var/log/php-fpm/:rw
  links:
    - mysql:mysql
    - redis:redis

mysql:
  image: mysql:latest
  ports:
    - &amp;#34;3306:3306&amp;#34;
  volumes:
    - ./conf/mysql/my.cnf:/etc/mysql/my.cnf:ro
    - ./mysql/:/var/lib/mysql/:rw
    - ./log/mysql/:/var/log/mysql/:rw
  environment:
    MYSQL_ROOT_PASSWORD: &amp;#34;123456&amp;#34;

redis:
  image: redis:latest
  ports:
    - &amp;#34;6379:6379&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;站点根目录写权限&#34;&gt;站点根目录写权限 &lt;a href=&#34;#%e7%ab%99%e7%82%b9%e6%a0%b9%e7%9b%ae%e5%bd%95%e5%86%99%e6%9d%83%e9%99%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;默认的，容器中的/var/www/html目录属于root，我们需要修改为www-data，PHP才能正常写目录。&lt;br&gt;
先进入到容器中：&lt;br&gt;
$ docker exec -it dlnmp_php-fpm_1 /bin/bash&lt;br&gt;
然后修改目录权限：&lt;br&gt;
$ chown -R www-data:www-data /var/www/html&lt;/p&gt;
&lt;h4 id=&#34;mysql连接&#34;&gt;MYSQL连接 &lt;a href=&#34;#mysql%e8%bf%9e%e6%8e%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;$ mysql -h 127.0.0.1 -u root -p
&lt;ul&gt;
&lt;li&gt;说明：这里MySQL的连接主机不能用localhost，因为MySQL客户端默认使用unix socket方式连接，应该直接用本地IP。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$pdo = new PDO(&amp;lsquo;mysql:host=mysql;dbname=site1&amp;rsquo;, &amp;lsquo;root&amp;rsquo;, &amp;lsquo;123456&amp;rsquo;);
&lt;ul&gt;
&lt;li&gt;说明：，host的值就是在指定的MySQL容器的名称。 redis,memcaced等类似&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;一键安装脚本&#34;&gt;一键安装脚本 &lt;a href=&#34;#%e4%b8%80%e9%94%ae%e5%ae%89%e8%a3%85%e8%84%9a%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash

function getVersionNum(){
    version=`cat /proc/version`
    cut=${version%%(*}
    dd=${cut:14}
}

function dockerAlis() {
    dps=&amp;#34;\$(docker ps -aq)&amp;#34;
    dcup=&amp;#34;ztth=&amp;#39;docker-compose -f /root/docker/ztth.yml up -d&amp;#39;&amp;#34;
    dcrs=&amp;#34;ztth-rs=&amp;#39;docker-compose -f /root/docker/ztth.yml restart&amp;#39;&amp;#34;
    dcrm=&amp;#34;ztth-rm=&amp;#39;docker-compose -f /root/docker/ztth.yml stop &amp;amp;&amp;amp; docker-compose -f /root/docker/ztth.yml rm&amp;#39;&amp;#34;
    dcps=&amp;#34;ztth-ps=&amp;#39;docker-compose -f /root/docker/ztth.yml ps&amp;#39;&amp;#34;
    dcip=&amp;#34;docker-ips=&amp;#39;docker inspect --format=&amp;#39;\&amp;#34;&amp;#39;\&amp;#34;&amp;#39;{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39;\&amp;#34;&amp;#39;\&amp;#34;&amp;#39; $dps&amp;#39;&amp;#34;
}

function main(){
	while [ True ];do
		echo -e &amp;#34;\033[33m CentOs7 docker安装步骤: \033[0m&amp;#34;
		echo -e &amp;#34;\033[33m The #1 docker服务安装 \033[0m&amp;#34;
		echo -e &amp;#34;\033[33m The #2 virtual box挂载安装，请保证安装增加工具和挂载目录已经添加 \033[0m&amp;#34;
		echo -e &amp;#34;\033[33m q键退出 \033[0m&amp;#34;
		read -p &amp;#39;选择安装: &amp;#39; number
		case $number in
          1)
            echo -e &amp;#34;\033[31m docker install starting \033[0m&amp;#34; \
            &amp;amp;&amp;amp; yum install -y wget \
            &amp;amp;&amp;amp; mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup \
            &amp;amp;&amp;amp; wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo \
            &amp;amp;&amp;amp; yum install -y yum-utils \
            &amp;amp;&amp;amp; yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo \
            &amp;amp;&amp;amp; yum install -y gcc gcc-devel gcc-c++ gcc-c++-devel make kernel kernel-devel bzip2 vim wget device-mapper-persistent-data lvm2 docker-ce \
            &amp;amp;&amp;amp; yum makecache fast \
            &amp;amp;&amp;amp; service docker start \
            &amp;amp;&amp;amp; curl -L  https://ghproxy.com/https://github.com/docker/compose/releases/download/v2.16.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose \
            &amp;amp;&amp;amp; chmod +x /usr/local/bin/docker-compose\
            &amp;amp;&amp;amp; gpasswd -a $USER docker \
            &amp;amp;&amp;amp; mkdir -p /etc/docker \
            &amp;amp;&amp;amp; echo &amp;#39;{&amp;#34;registry-mirrors&amp;#34;:[&amp;#34;https://l714mp7z.mirror.aliyuncs.com&amp;#34;]}&amp;#39;&amp;gt;&amp;gt; /etc/docker/daemon.json \
            &amp;amp;&amp;amp; systemctl daemon-reload \
            &amp;amp;&amp;amp; systemctl restart docker \
            &amp;amp;&amp;amp; systemctl enable docker \
            &amp;amp;&amp;amp; echo -e &amp;#34;\033[31m docker安装完成，请重启电脑，执行步骤2 \033[0m&amp;#34; &amp;amp;&amp;amp; exit
            ;;

          2)
            echo -e &amp;#34;\033[31m virtual box增强工具 install starting \033[0m&amp;#34; \
            &amp;amp;&amp;amp; getVersionNum &amp;amp;&amp;amp; rm -rf /usr/src/linux &amp;amp;&amp;amp; ln -s /usr/src/kernels/$dd /usr/src/linux \
            &amp;amp;&amp;amp; mount /dev/cdrom /mnt \
            &amp;amp;&amp;amp; cd /mnt &amp;amp;&amp;amp;  ./VBoxLinuxAdditions.run \
            &amp;amp;&amp;amp; mkdir -p /root/docker  &amp;amp;&amp;amp; chmod -R 777 /root/docker \
            &amp;amp;&amp;amp; echo &amp;#39;docker /root/docker   vboxsf rw,gid=100,uid=1000,auto 0 0&amp;#39;&amp;gt;&amp;gt; /etc/fstab \
            &amp;amp;&amp;amp; dockerAlis \
            &amp;amp;&amp;amp; echo &amp;#34;alias $dcup&amp;#34;&amp;gt;&amp;gt; /root/.bashrc \
            &amp;amp;&amp;amp; echo &amp;#34;alias $dcrs&amp;#34;&amp;gt;&amp;gt; /root/.bashrc \
            &amp;amp;&amp;amp; echo &amp;#34;alias $dcrm&amp;#34;&amp;gt;&amp;gt; /root/.bashrc \
            &amp;amp;&amp;amp; echo &amp;#34;alias $dcps&amp;#34;&amp;gt;&amp;gt; /root/.bashrc \
            &amp;amp;&amp;amp; echo &amp;#34;alias $dcip&amp;#34;&amp;gt;&amp;gt; /root/.bashrc \
            &amp;amp;&amp;amp; source /root/.bashrc \
            &amp;amp;&amp;amp; echo -e &amp;#34;\033[31m 请服务器重启 \033[0m&amp;#34;] &amp;amp;&amp;amp; exit
            ;;

		 &amp;#34;q&amp;#34;|&amp;#34;quit&amp;#34;)
            exit
            ;;

         *)
            echo &amp;#34;Input error!!&amp;#34;
             ;;

		esac
	done
}

main
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;常用操作&#34;&gt;常用操作 &lt;a href=&#34;#%e5%b8%b8%e7%94%a8%e6%93%8d%e4%bd%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;别名配置&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;alias docker-ips=&amp;#39;docker inspect --format=&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39;{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39;&amp;#34;&amp;#39;&amp;#34;&amp;#39; $(docker ps -aq)&amp;#39;
alias ztth=&amp;#39;docker-compose --compatibility -f /root/docker/ztth.yml up -d&amp;#39;
alias ztth-rs=&amp;#39;docker-compose --compatibility -f /root/docker/ztth.yml restart&amp;#39;
alias ztth-rm=&amp;#39;docker-compose --compatibility -f /root/docker/ztth.yml down -v&amp;#39;
alias ztth-ps=&amp;#39;docker-compose --compatibility -f /root/docker/ztth.yml ps&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;批量操作&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;批量删除镜像
docker rmi -f $(docker images -aq)
清理所有未使用资源
docker system prune -a --volumes
删除未使用镜像
docker image prune -a -f
删除未使用容器
docker rm -vf $(docker ps -aq)
批量删除卷
docker volume rm $(docker volume ls -qf dangling=true)
删除所有关闭的容器
docker ps -a | grep Exit | cut -d &amp;#39; &amp;#39; -f 1 | xargs docker rm
删除所有dangling镜像（即无tag的镜像）
docker rmi $(docker images | grep &amp;#34;^&amp;lt;none&amp;gt;&amp;#34; | awk &amp;#34;{print $3}&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;自动脚本&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;挂载到目录`/docker-entrypoint-initdb.d/`,首次创建容器会执行，但是多脚本必须是`01\02\03\04\05`这样的顺序开头，否则会报错。
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;docker pull docker.1ms.run/apache/rocketmq:5.3.2&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>git命令大全</title>
      <link>https://abnerxc.github.io/tool/git-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</link>
      <pubDate>Thu, 21 Jul 2022 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/tool/git-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</guid>
      <description>&lt;h3 id=&#34;查看添加提交删除找回重置修改文件&#34;&gt;查看、添加、提交、删除、找回，重置修改文件 &lt;a href=&#34;#%e6%9f%a5%e7%9c%8b%e6%b7%bb%e5%8a%a0%e6%8f%90%e4%ba%a4%e5%88%a0%e9%99%a4%e6%89%be%e5%9b%9e%e9%87%8d%e7%bd%ae%e4%bf%ae%e6%94%b9%e6%96%87%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git help &amp;lt;command&amp;gt; # 显示command的help
git show # 显示某次提交的内容 git show $id
git checkout -- &amp;lt;file&amp;gt; # 抛弃工作区修改
git checkout . # 抛弃工作区修改
git add &amp;lt;file&amp;gt; # 将工作文件修改提交到本地暂存区
git add . # 将所有修改过的工作文件提交暂存区
git rm &amp;lt;file&amp;gt; # 从版本库中删除文件
git rm &amp;lt;file&amp;gt; --cached # 从版本库中删除文件，但不删除文件
git reset &amp;lt;file&amp;gt; # 从暂存区恢复到工作文件
git reset -- . # 从暂存区恢复到工作文件
git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改
git commit &amp;lt;file&amp;gt; 
git commit . 
git commit -a # 将git add, git rm和git ci等操作都合并在一起做　　
git commit -am &amp;#34;some comments&amp;#34;
git commit --amend # 修改最后一次提交记录
git revert &amp;lt;$id&amp;gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象
git revert HEAD # 恢复最后一次提交的状态
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看文件diff&#34;&gt;查看文件diff &lt;a href=&#34;#%e6%9f%a5%e7%9c%8b%e6%96%87%e4%bb%b6diff&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git diff &amp;lt;file&amp;gt; # 比较当前文件和暂存区文件差异 git diff
git diff &amp;lt;id1&amp;gt;&amp;lt;id1&amp;gt;&amp;lt;id2&amp;gt; # 比较两次提交之间的差异
git diff &amp;lt;branch1&amp;gt;..&amp;lt;branch2&amp;gt; # 在两个分支之间比较
git diff --staged # 比较暂存区和版本库差异
git diff --cached # 比较暂存区和版本库差异
git diff --stat # 仅仅比较统计信息
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看提交记录&#34;&gt;查看提交记录 &lt;a href=&#34;#%e6%9f%a5%e7%9c%8b%e6%8f%90%e4%ba%a4%e8%ae%b0%e5%bd%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git log  # 查看分支的提交记录
git log &amp;lt;file&amp;gt; # 查看该文件每次提交记录
git log -p &amp;lt;file&amp;gt; # 查看每次详细修改内容的diff
git log -p -2 # 查看最近两次详细修改内容的diff
git log --stat #查看提交统计信息
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;查看切换创建和删除分支&#34;&gt;查看、切换、创建和删除分支 &lt;a href=&#34;#%e6%9f%a5%e7%9c%8b%e5%88%87%e6%8d%a2%e5%88%9b%e5%bb%ba%e5%92%8c%e5%88%a0%e9%99%a4%e5%88%86%e6%94%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git branch -r # 查看远程分支
git branch &amp;lt;new_branch&amp;gt; # 创建新的分支
git branch -v # 查看各个分支最后提交信息
git branch --merged # 查看已经被合并到当前分支的分支
git branch --no-merged # 查看尚未被合并到当前分支的分支
git checkout &amp;lt;branch&amp;gt; # 切换到某个分支
git checkout -b &amp;lt;new_branch&amp;gt; # 创建新的分支，并且切换过去
git checkout -b &amp;lt;new_branch&amp;gt; &amp;lt;branch&amp;gt; # 基于branch创建新的new_branch
git checkout $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git checkout $id -b &amp;lt;new_branch&amp;gt; # 把某次历史提交记录checkout出来，创建成一个分支
git checkout develop --patch 文件路径 #合并单个文件到当前分支
git branch -d &amp;lt;branch&amp;gt; # 删除某个分支
git branch -D &amp;lt;branch&amp;gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;分支合并和rebase&#34;&gt;分支合并和rebase &lt;a href=&#34;#%e5%88%86%e6%94%af%e5%90%88%e5%b9%b6%e5%92%8crebase&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;git merge &amp;lt;branch&amp;gt; # 将branch分支合并到当前分支
git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交
git rebase master &amp;lt;branch&amp;gt; # 将master rebase到branch，相当于： git co &amp;lt;branch&amp;gt; &amp;amp;&amp;amp; git rebase master &amp;amp;&amp;amp; git co master &amp;amp;&amp;amp; git merge &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;同步远程分支目录到本地&#34;&gt;同步远程分支目录到本地 &lt;a href=&#34;#%e5%90%8c%e6%ad%a5%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af%e7%9b%ae%e5%bd%95%e5%88%b0%e6%9c%ac%e5%9c%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;git remote update origin --prune
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git补丁管理方便在多台机器上开发同步时用&#34;&gt;Git补丁管理(方便在多台机器上开发同步时用) &lt;a href=&#34;#git%e8%a1%a5%e4%b8%81%e7%ae%a1%e7%90%86%e6%96%b9%e4%be%bf%e5%9c%a8%e5%a4%9a%e5%8f%b0%e6%9c%ba%e5%99%a8%e4%b8%8a%e5%bc%80%e5%8f%91%e5%90%8c%e6%ad%a5%e6%97%b6%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;git diff &amp;gt; ../sync.patch # 生成补丁
git apply ../sync.patch # 打补丁
git apply --check ../sync.patch #测试补丁能否成功
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git暂存管理&#34;&gt;Git暂存管理 &lt;a href=&#34;#git%e6%9a%82%e5%ad%98%e7%ae%a1%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;git stash # 暂存
git stash list # 列所有stash
git stash apply # 恢复暂存的内容
git stash drop # 删除暂存区
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git远程分支管理&#34;&gt;Git远程分支管理 &lt;a href=&#34;#git%e8%bf%9c%e7%a8%8b%e5%88%86%e6%94%af%e7%ae%a1%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;git pull # 抓取远程仓库所有分支更新并合并到本地
git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
git fetch origin # 抓取远程仓库更新
git merge origin/master # 将远程主分支合并到本地当前分支
git checkout --track origin/branch # 跟踪某个远程分支创建相应的本地分支
git checkout -b &amp;lt;local_branch&amp;gt; origin/&amp;lt;remote_branch&amp;gt; # 基于远程分支创建本地分支，功能同上
git push # push所有分支
git push origin master # 将本地主分支推到远程主分支
git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
git push origin &amp;lt;local_branch&amp;gt; # 创建远程分支， origin是远程仓库名
git push origin &amp;lt;local_branch&amp;gt;:&amp;lt;remote_branch&amp;gt; # 创建远程分支
git push origin :&amp;lt;remote_branch&amp;gt; #先删除本地分支(git br -d &amp;lt;branch&amp;gt;)，然后再push删除远程分支
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git远程仓库管理&#34;&gt;Git远程仓库管理 &lt;a href=&#34;#git%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93%e7%ae%a1%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;git remote -v # 查看远程服务器地址和仓库名称
git remote show origin # 查看远程服务器仓库状态
git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址
git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &amp;lt;repository&amp;gt; # 删除远程仓库
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;创建远程仓库&#34;&gt;创建远程仓库 &lt;a href=&#34;#%e5%88%9b%e5%bb%ba%e8%bf%9c%e7%a8%8b%e4%bb%93%e5%ba%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库
scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上
mkdir robbin_site.git &amp;amp;&amp;amp; cd robbin_site.git &amp;amp;&amp;amp; git --bare init # 在服务器创建纯仓库

git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址
git push -u origin master # 客户端首次提交
git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track
git remote set-head origin master # 设置远程仓库的HEAD指向master分支
也可以命令设置跟踪远程库和本地库

git branch --set-upstream master origin/master
git branch --set-upstream develop origin/develop
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-init&#34;&gt;git init &lt;a href=&#34;#git-init&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹.&lt;/p&gt;
&lt;h3 id=&#34;git-clone&#34;&gt;git clone &lt;a href=&#34;#git-clone&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;获取一个url对应的远程Git repo, 创建一个local copy.
一般的格式是git clone [url].
clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定.&lt;/p&gt;
&lt;h3 id=&#34;git-status&#34;&gt;git status &lt;a href=&#34;#git-status&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;查询repo的状态.
git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言.&lt;/p&gt;
&lt;h3 id=&#34;git-log&#34;&gt;git log &lt;a href=&#34;#git-log&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;在当前分支上查看提交日志
git log --oneline --number: 每条log只显示一行,显示number条.
git log --oneline --graph:可以图形化地表示出分支合并历史.
git log branchname可以显示特定分支的log.
git log --oneline branch1 ^branch2,可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).
git log --decorate会显示出tag信息.
git log --author=[author name] 可以指定作者的提交历史.
git log --since --before --until --after 根据提交时间筛选log.
--no-merges可以将merge的commits排除在外.
git log --grep 根据commit信息过滤log: git log --grep=keywords
默认情况下, git log --grep --author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上--all-match的option.
git log -S: filter by introduced diff.
比如: git log -SmethodName (注意S和后面的词之间没有等号分隔).
git log -p: show patch introduced at each commit.
每一个提交都是一个快照(snapshot),Git会把每次提交的diff计算出来,作为一个patch显示给你看.
另一种方法是git show [SHA].
git log --stat: show diffstat of changes introduced at each commit.
同样是用来看改动的相对信息的,--stat比-p的输出更简单一些.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-commit&#34;&gt;git commit &lt;a href=&#34;#git-commit&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;提交已经被add进来的改动.
git commit -m “the commit message&amp;#34;
git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下.
git commit --amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-reset&#34;&gt;git reset &lt;a href=&#34;#git-reset&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;undo changes and commits.
这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本.
git reset HEAD: unstage files from index and reset pointer to HEAD
这个命令用来把不小心add进去的文件从staged状态取出来,可以单独针对某一个文件操作: git reset HEAD - - filename, 这个- - 也可以不加.
git reset --soft
move HEAD to specific commit reference, index and staging are untouched.
git reset --hard
unstage files AND undo any changes in the working directory since last commit.
使用git reset —hard HEAD进行reset,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态.
这里的HEAD可以被写成任何一次提交的SHA-1.
不带soft和hard参数的git reset,实际上带的是默认参数mixed.

总结:
git reset --mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.
git reset --soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.
git reset --hard id.是将git的HEAD变了,文件也变了.
按改动范围排序如下:
soft (commit) &amp;lt; mixed (commit + add) &amp;lt; hard (commit + add + local working)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-revert&#34;&gt;git revert &lt;a href=&#34;#git-revert&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了.
git revert HEAD: 撤销最近的一个提交.
git revert会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-rm&#34;&gt;git rm &lt;a href=&#34;#git-rm&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;git rm file: 从staging区移除文件,同时也移除出工作目录.
git rm --cached: 从staging区移除文件,但留在工作目录中.
git rm --cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-clean&#34;&gt;git clean &lt;a href=&#34;#git-clean&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;git clean是从工作目录中移除没有track的文件.
通常的参数是git clean -df:
-d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-rebase&#34;&gt;git rebase &lt;a href=&#34;#git-rebase&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;--rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上.
rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要:
git rebase --continue就会继续打余下的补丁.
git rebase --abort将会终止rebase,当前分支将会回到rebase之前的状态.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git-reflog&#34;&gt;git reflog &lt;a href=&#34;#git-reflog&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.
当git reflog不指定引用的时候,默认列出HEAD的reflog.
HEAD@{0}代表HEAD当前的值,HEAD@{3}代表HEAD在3次变化之前的值.
git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中.&lt;/p&gt;
&lt;h3 id=&#34;cherry-pick&#34;&gt;cherry-pick &lt;a href=&#34;#cherry-pick&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上
git cherry-pick [&lt;options&gt;] &lt;commit-ish&gt;&amp;hellip;
常用options:
&amp;ndash;quit                退出当前的chery-pick序列
&amp;ndash;continue            继续当前的chery-pick序列
&amp;ndash;abort               取消当前的chery-pick序列，恢复当前分支
-n, &amp;ndash;no-commit       不自动提交
-e, &amp;ndash;edit            编辑提交信息&lt;/p&gt;
&lt;h3 id=&#34;git-代理设置&#34;&gt;git 代理设置 &lt;a href=&#34;#git-%e4%bb%a3%e7%90%86%e8%ae%be%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;http&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global http.proxy &amp;#34;socks5://127.0.0.1:1086&amp;#34;
git config --global https.proxy &amp;#34;socks5://127.0.0.1:1086&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;ssh 方式
在用户文件夹下，打开/.ssh/config文件（如果没有就自己创建一个touch ~/.ssh/config）&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Host github.com
	Port 443
	Hostname ssh.github.com
	IdentityFile /Users/abner/.ssh/id_rsa
	TCPKeepAlive yes
	ProxyCommand nc -X 5 -x 127.0.0.1:1086 %h %p
	ServerAliveInterval 30
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;git使用对比工具&#34;&gt;git使用对比工具 &lt;a href=&#34;#git%e4%bd%bf%e7%94%a8%e5%af%b9%e6%af%94%e5%b7%a5%e5%85%b7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;.gitconfig 添加 如下配置&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[diff]
    tool = bcomp
[difftool]
    prompt = false
[difftool &amp;#34;bcomp&amp;#34;]
    trustExitCode = true
    cmd = &amp;#34;/usr/local/bin/bcomp&amp;#34; &amp;#34;$LOCAL&amp;#34; &amp;#34;$REMOTE&amp;#34;
[merge]
    tool = bcomp
[mergetool]
    prompt = false
    keepBackup = false
[mergetool &amp;#34;bcomp&amp;#34;]
    trustExitCode = true
    cmd = &amp;#34;/usr/local/bin/bcomp&amp;#34; &amp;#34;$LOCAL&amp;#34; &amp;#34;$REMOTE&amp;#34; &amp;#34;$BASE&amp;#34; &amp;#34;$MERGED&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;windows-crlf&#34;&gt;windows CRLF &lt;a href=&#34;#windows-crlf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-cgo&#34; data-lang=&#34;cgo&#34;&gt;#提交时转换为LF，检出时转换为CRLF
git config --global core.autocrlf true
适用于Windows系统，且一般为Windows默认设置，会在提交时对换行符进行CRLF - LF的转换，检出时又会进行LF - CRLF的转换。

#提交时转换为LF，检出时不转换
git config --global core.autocrlf input
适用于Linux系统，所有换行符都会进行CRLF - LF转换，但操作时不会转换回CRLF。

#提交检出均不转换
git config --global core.autocrlf false
*适用于Windows系统，且只在Windows上开发的情况。在提交、检出时不会对CRLF/LF换行符进行转换
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Go-错误(error)处理方案</title>
      <link>https://abnerxc.github.io/go/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/</link>
      <pubDate>Thu, 21 Jul 2022 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E6%96%B9%E6%A1%88/</guid>
      <description>&lt;h1 id=&#34;error接口&#34;&gt;error接口 &lt;a href=&#34;#error%e6%8e%a5%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;code&gt;error&lt;/code&gt;其实是一个接口，内置的，看下他的定义&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// The error built-in interface type is the conventional interface for
// representing an error condition, with the nil value representing no error.
type error interface {
	Error() string
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它只有一个方法 &lt;code&gt;Error&lt;/code&gt;，只要实现了这个方法，就是实现了&lt;code&gt;error&lt;/code&gt;。现在我们自己定义一个错误试试。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type fileError struct {
}

func (fe *fileError) Error() string {
	return &amp;#34;文件错误&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;自定义-error&#34;&gt;自定义 error &lt;a href=&#34;#%e8%87%aa%e5%ae%9a%e4%b9%89-error&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;自定义了一个&lt;code&gt;fileError&lt;/code&gt;类型，实现了&lt;code&gt;error&lt;/code&gt;接口。现在测试下看看效果。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	conent, err := openFile()
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println(string(conent))
	}
}

//只是模拟一个错误
func openFile() ([]byte, error) {
	return nil, &amp;amp;fileError{}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行模拟的代码，可以看到&lt;code&gt;文件错误&lt;/code&gt;的通知。&lt;/p&gt;
&lt;p&gt;在实际的使用过程中，我们可能遇到很多错误，他们的区别是错误信息不一样，一种做法是每种错误都类似上面一样定义一个错误类型，但是这样太麻烦了。我们发现&lt;code&gt;Error&lt;/code&gt;返回的其实是个字符串，我们可以修改下，让这个字符串可以设置就可以了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type fileError struct {
	s string
}

func (fe *fileError) Error() string {
	return fe.s
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样改造后，我们就可以在声明&lt;code&gt;fileError&lt;/code&gt;的时候，设置好要提示的错误文字，就可以满足我们不同的需要了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//只是模拟一个错误
func openFile() ([]byte, error) {
	return nil, &amp;amp;fileError{&amp;#34;文件错误，自定义&amp;#34;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改fileError的名字，再创建一个辅助函数，便于我们创建不同的错误类型。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//blog:www.flysnow.org
//wechat:flysnow_org
func New(text string) error {
	return &amp;amp;errorString{text}
}

type errorString struct {
	s string
}

func (e *errorString) Error() string {
	return e.s
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以通过&lt;code&gt;New&lt;/code&gt;函数，辅助我们创建不同的错误了，这其实就是我们经常用到的&lt;code&gt;errors.New&lt;/code&gt;函数，被我们一步步剖析演化而来&lt;/p&gt;
&lt;p&gt;但是上面的方案只是解决了文案提示的错误自定义，能否像PHP那样指定到错误的文件行数，具体是哪一个方法错误呢&lt;/p&gt;
&lt;h1 id=&#34;推荐的方案&#34;&gt;推荐的方案 &lt;a href=&#34;#%e6%8e%a8%e8%8d%90%e7%9a%84%e6%96%b9%e6%a1%88&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;因为Go语言提供的错误太简单了，以至于简单的我们无法更好的处理问题，甚至不能为我们处理错误，提供更有用的信息，所以诞生了很多对错误处理的库，&lt;code&gt;github.com/pkg/errors&lt;/code&gt;是比较简洁的一样，并且功能非常强大，受到了大量开发者的欢迎，使用者很多。&lt;/p&gt;
&lt;p&gt;它的使用非常简单，如果我们要新生成一个错误，可以使用&lt;code&gt;New&lt;/code&gt;函数,生成的错误，自带调用堆栈信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func New(message string) error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果有一个现成的&lt;code&gt;error&lt;/code&gt;，我们需要对他进行再次包装处理，这时候有三个函数可以选择。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//只附加新的信息
func WithMessage(err error, message string) error

//只附加调用堆栈信息
func WithStack(err error) error

//同时附加堆栈和信息
func Wrap(err error, message string) error
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其实上面的包装，很类似于Java的异常包装，被包装的error，其实就是Cause,在前面的章节提到错误的根本原因，就是这个Cause。所以这个错误处理库为我们提供了Cause函数让我们可以获得最根本的错误原因。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func Cause(err error) error {
	type causer interface {
		Cause() error
	}

	for err != nil {
		cause, ok := err.(causer)
		if !ok {
			break
		}
		err = cause.Cause()
	}
	return err
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;code&gt;for&lt;/code&gt;循环一直找到最根本（最底层）的那个&lt;code&gt;error&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以上的错误我们都包装好了，也收集好了，那么怎么把他们里面存储的堆栈、错误原因等这些信息打印出来呢？其实，这个错误处理库的错误类型，都实现了&lt;code&gt;Formatter&lt;/code&gt;接口，我们可以通过&lt;code&gt;fmt.Printf&lt;/code&gt;函数输出对应的错误信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;%s,%v //功能一样，输出错误信息，不包含堆栈
%q //输出的错误信息带引号，不包含堆栈
%+v //输出错误信息和堆栈
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Mac优化</title>
      <link>https://abnerxc.github.io/tool/mac-%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 21 Jul 2022 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/tool/mac-%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;p&gt;全局设置代理&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export ALL_PROXY=socks5://127.0.0.1:1086
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;git-ssh&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global user.name &amp;#34;xuchen&amp;#34;
git config --global user.email &amp;#34;abner510@126.com&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;brew&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ruby -e &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者
/bin/zsh -c &amp;ldquo;$(curl -fsSL &lt;a href=&#34;https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)%22&#34;&gt;https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&amp;quot;&lt;/a&gt;
选择1 中科大源&lt;/p&gt;
&lt;p&gt;oh-my-zsh&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;zsh-autosuggestions 自动补全插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下载该插件到.oh-my-zsh的插件目录 &lt;code&gt;git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编辑.zshrc： &lt;code&gt;plugins=(git zsh-autosuggestions)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启命令行工具&lt;/li&gt;
&lt;li&gt;下载自动补全插件 &lt;code&gt;http://mimosa-pudica.net/src/incr-0.2.zsh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;放到oh-my-zsh的插件库中 &lt;code&gt;.oh-my-zsh/plugins/创建incr文件夹放到该文件夹中&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;.zshrc末尾添加：&lt;code&gt;source ~/.oh-my-zsh/plugins/incr/incr*.zsh&lt;/code&gt; 重启命令行&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ssh常用脚本</title>
      <link>https://abnerxc.github.io/tool/shell-ssh_script/</link>
      <pubDate>Thu, 21 Jul 2022 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/tool/shell-ssh_script/</guid>
      <description>&lt;h1 id=&#34;ssh登陆脚本&#34;&gt;ssh登陆脚本 &lt;a href=&#34;#ssh%e7%99%bb%e9%99%86%e8%84%9a%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;1mainsh&#34;&gt;1.main.sh &lt;a href=&#34;#1mainsh&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;#!/bin/bash
# 获取脚本绝对路径
SOURCE=&amp;#34;${BASH_SOURCE[0]}&amp;#34;
while [ -h &amp;#34;$SOURCE&amp;#34; ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=&amp;#34;$(cd -P &amp;#34;$(dirname &amp;#34;$SOURCE&amp;#34;)&amp;#34; &amp;amp;&amp;amp; pwd)&amp;#34;
  SOURCE=&amp;#34;$(readlink &amp;#34;$SOURCE&amp;#34;)&amp;#34;
  [[ $SOURCE != /* ]] &amp;amp;&amp;amp; SOURCE=&amp;#34;$DIR/$SOURCE&amp;#34; # if relative, re resolve it
done
direc=&amp;#34;$(cd -P &amp;#34;$(dirname &amp;#34;$SOURCE&amp;#34;)&amp;#34; &amp;amp;&amp;amp; pwd)&amp;#34;

# 颜色输出函数
function color(){
    blue=&amp;#34;\033[0;36m&amp;#34;
    red=&amp;#34;\033[0;31m&amp;#34;
    green=&amp;#34;\033[0;32m&amp;#34;
    close=&amp;#34;\033[m&amp;#34;
    case $1 in
        blue)
            echo -e &amp;#34;$blue $2 $close&amp;#34;
        ;;
        red)
            echo -e &amp;#34;$red $2 $close&amp;#34;
        ;;
        green)
            echo -e &amp;#34;$green $2 $close&amp;#34;
        ;;
        *)
            echo &amp;#34;Input color error!!&amp;#34;
        ;;
    esac
}

# 版权信息
function copyright(){
    echo &amp;#34;#####################&amp;#34;
    color blue &amp;#34;   SSH Login Platform   &amp;#34;
    echo &amp;#34;#####################&amp;#34;
    echo
}

# 下划线分隔符
function underline(){
    echo &amp;#34;-----------------------------------------&amp;#34;
}

# 获取服务器配置
function get_server_config() {
    local id=&amp;#34;$1&amp;#34;
    awk -v server_id=&amp;#34;server$id&amp;#34; -F &amp;#39;=&amp;#39; &amp;#39;
    BEGIN {
        current_section = &amp;#34;&amp;#34;
        ip = port = username = login_type = credential = label = &amp;#34;&amp;#34;
    }
    /^\[/ {
        current_section = substr($0, 2, length($0)-2)
        if(current_section == server_id) in_section=1
        else in_section=0
    }
    in_section &amp;amp;&amp;amp; NF&amp;gt;0 {
        gsub(/^[ \t]+|[ \t]+$/, &amp;#34;&amp;#34;, $1)
        gsub(/^[ \t]+|[ \t]+$/, &amp;#34;&amp;#34;, $2)
        
        if ($1 == &amp;#34;ip&amp;#34;) ip = $2
        if ($1 == &amp;#34;port&amp;#34;) port = $2
        if ($1 == &amp;#34;username&amp;#34;) username = $2
        if ($1 == &amp;#34;login_type&amp;#34;) login_type = $2
        if ($1 == &amp;#34;credential&amp;#34;) credential = $2
        if ($1 == &amp;#34;label&amp;#34;) label = $2
    }
    END {
        if (ip != &amp;#34;&amp;#34;) {
            printf &amp;#34;%s:%s:%s:%s:%s:%s&amp;#34;, ip, port, username, login_type, credential, label
        }
    }
    &amp;#39; &amp;#34;$direc/config.ini&amp;#34;
}

# 列出所有服务器
function list_servers() {
    awk -F &amp;#39;=&amp;#39; &amp;#39;
    BEGIN {
        print &amp;#34;序号 |       主机      | 登录方式 | 说明&amp;#34;
    }
    /^\[server/ {
        match($0, /server[0-9]+/)
        server_id = substr($0, RSTART+6, RLENGTH-6)
        ip = login_type = label = &amp;#34;&amp;#34;
    }
    !/^\[/ &amp;amp;&amp;amp; $1 ~ /[[:space:]]*ip/ {
        gsub(/^[ \t]+|[ \t]+$/, &amp;#34;&amp;#34;, $2)
        ip = $2
    }
    !/^\[/ &amp;amp;&amp;amp; $1 ~ /[[:space:]]*login_type/ {
        gsub(/^[ \t]+|[ \t]+$/, &amp;#34;&amp;#34;, $2)
        login_type = $2
    }
    !/^\[/ &amp;amp;&amp;amp; $1 ~ /[[:space:]]*label/ {
        gsub(/^[ \t]+|[ \t]+$/, &amp;#34;&amp;#34;, $2)
        label = $2
    }
    ip != &amp;#34;&amp;#34; &amp;amp;&amp;amp; login_type != &amp;#34;&amp;#34; &amp;amp;&amp;amp; label != &amp;#34;&amp;#34; {
        printf &amp;#34;\033[0;31m% 3s \033[m | %15s | %8s | %s\n&amp;#34;, server_id, ip, login_type, label
        server_id = ip = login_type = label = &amp;#34;&amp;#34;
    }
    &amp;#39; &amp;#34;$direc/config.ini&amp;#34;
}

# 主函数
function main(){
    while true; do
        clear
        copyright
        
        echo &amp;#34;序号 |       主机      | 登录方式 | 说明&amp;#34;
        underline
        list_servers
        underline
        
        read -p &amp;#39;[*] 选择主机: &amp;#39; number
        
        if [[ &amp;#34;$number&amp;#34; == &amp;#34;q&amp;#34; || &amp;#34;$number&amp;#34; == &amp;#34;quit&amp;#34; ]]; then
            exit
        fi
        
        config=$(get_server_config &amp;#34;$number&amp;#34;)
        
        if [ -z &amp;#34;$config&amp;#34; ]; then
            color red &amp;#34;[!] 无效的主机序号: $number&amp;#34;
            sleep 1
            continue
        fi
        
        IFS=&amp;#39;:&amp;#39; read -r ipaddr port username login_type credential label &amp;lt;&amp;lt;&amp;lt; &amp;#34;$config&amp;#34;
        
        # 显示调试信息
        color blue &amp;#34;[*] 解析配置：&amp;#34;
        echo &amp;#34;路径前缀: $direc&amp;#34;
        echo &amp;#34;IP地址: $ipaddr&amp;#34;
        echo &amp;#34;端口: $port&amp;#34;
        echo &amp;#34;用户名: $username&amp;#34;
        echo &amp;#34;登录类型: $login_type&amp;#34;
        echo &amp;#34;证书文件: $credential&amp;#34;
        
        if [[ &amp;#34;$login_type&amp;#34; == &amp;#34;pem&amp;#34; ]]; then
            pem_path=&amp;#34;$direc/keys/$credential&amp;#34;
            color green &amp;#34;[*] 使用证书: $credential&amp;#34;
            echo &amp;#34;证书路径: $pem_path&amp;#34;
            
            if [ ! -f &amp;#34;$pem_path&amp;#34; ]; then
                color red &amp;#34;[!] 证书文件不存在: $pem_path&amp;#34;
                sleep 2
                continue
            elif [ ! -r &amp;#34;$pem_path&amp;#34; ]; then
                color red &amp;#34;[!] 无权限读取证书文件&amp;#34;
                sleep 2
                continue
            fi
            
            ssh -i &amp;#34;$pem_path&amp;#34; &amp;#34;$username@$ipaddr&amp;#34; -p &amp;#34;$port&amp;#34;
            
        elif [[ &amp;#34;$login_type&amp;#34; == &amp;#34;pwd&amp;#34; ]]; then
            exp_path=&amp;#34;$direc/login.exp&amp;#34;
            
            if [ ! -f &amp;#34;$exp_path&amp;#34; ]; then
                color red &amp;#34;[!] expect脚本不存在: $exp_path&amp;#34;
                sleep 2
                continue
            elif [ ! -x &amp;#34;$exp_path&amp;#34; ]; then
                color red &amp;#34;[!] expect脚本不可执行&amp;#34;
                sleep 2
                continue
            fi
            
            expect -f &amp;#34;$exp_path&amp;#34; &amp;#34;$ipaddr&amp;#34; &amp;#34;$username&amp;#34; &amp;#34;$credential&amp;#34; &amp;#34;$port&amp;#34;
        else
            color red &amp;#34;[!] 未知的登录类型: $login_type&amp;#34;
            sleep 2
        fi
    done
}

main
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2loginexp&#34;&gt;2.login.exp &lt;a href=&#34;#2loginexp&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;#!/usr/bin/expect -f
proc abort {msg} {
    puts stderr $msg
    exit 1
}

if {$argc != 4} {
    abort &amp;#34;Usage: $argv0 host user password port&amp;#34;
}

set TARGET [lindex $argv 0]
set USER [lindex $argv 1]
set PASSWD [lindex $argv 2]
set PORT [lindex $argv 3]
set timeout 10

spawn ssh -o StrictHostKeyChecking=no -p $PORT $USER@$TARGET
match_max 100000

expect {
    &amp;#34;*yes/no&amp;#34; {
        send &amp;#34;yes\r&amp;#34;
        exp_continue
    }
    &amp;#34;*assword:&amp;#34; {
        send &amp;#34;$PASSWD\r&amp;#34;
        exp_continue
    }
    eof {
        puts &amp;#34;Connection closed.&amp;#34;
    }
    timeout {
        abort &amp;#34;Connection timeout&amp;#34;
    }
}

interact
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3configini&#34;&gt;3.config.ini &lt;a href=&#34;#3configini&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;[server1] 
ip=127.0.0.1
port=22
username=root
login_type=pwd
credential=123456
label=本地test

[server2] 
ip=127.0.0.1
port=22
username=root
login_type=pwd
credential=123456
label=本地test
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4在mainsh目录下新建keys文件夹将证书文件放在keys文件夹下证书权限为600&#34;&gt;4.在main.sh目录下新建keys文件夹，将证书文件放在keys文件夹下,证书权限为600 &lt;a href=&#34;#4%e5%9c%a8mainsh%e7%9b%ae%e5%bd%95%e4%b8%8b%e6%96%b0%e5%bb%bakeys%e6%96%87%e4%bb%b6%e5%a4%b9%e5%b0%86%e8%af%81%e4%b9%a6%e6%96%87%e4%bb%b6%e6%94%be%e5%9c%a8keys%e6%96%87%e4%bb%b6%e5%a4%b9%e4%b8%8b%e8%af%81%e4%b9%a6%e6%9d%83%e9%99%90%e4%b8%ba600&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;chmod 600 a.pem
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Ubuntu开机优化</title>
      <link>https://abnerxc.github.io/tool/linux-ubuntu%E4%BC%98%E5%8C%96/</link>
      <pubDate>Thu, 21 Jul 2022 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/tool/linux-ubuntu%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h1 id=&#34;安装openssh-server&#34;&gt;安装openssh-server &lt;a href=&#34;#%e5%ae%89%e8%a3%85openssh-server&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install openssh-server vim git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;内核升级&#34;&gt;内核升级 &lt;a href=&#34;#%e5%86%85%e6%a0%b8%e5%8d%87%e7%ba%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1、查看内核：uname -a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2、查询指定版本内核：apt-cache search linux| grep inux-headers-6.5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3、下载内核：sudo apt-get install linux-headers-6.5.0-45-generic linux-image-6.5.0-45-generic
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4、查看已安装的内核版本：dpkg --get-selections | grep linux-image
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5、安装各种网卡显卡驱动：sudo apt-get install linux-tools-6.5.0-45-generic  linux-modules-extra-6.5.0-45-generic
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;6、再次查看驱动：dpkg --get-selections  | grep linux
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7、修改内核启动顺序：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#备份&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo cp /etc/default/grub /etc/default/grub.bak
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo vim /etc/default/grub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#GRUB_DEFAULT=&amp;#34;1&amp;gt; 3&amp;#34; 其中&amp;#34;1&amp;gt; 3&amp;#34;表示在第一级菜单中序号为1的条目，在该条目的第二级菜单中我们选择序号为3的条目。也就是我们上面讲过的Ubuntu 高级选项（序号1）下的Ubuntu，Linux 4.8.0-36-generic（序号3）。请注意&amp;gt;号后面有空格。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    GRUB_DEFAULT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;gt; 5&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# 或者 GRUB_DEFAULT=&amp;#34;Advanced options for Ubuntu&amp;gt;Ubuntu, Linux 5.8.0-41-generic&amp;#34;    &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# 更新配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo update-grub
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;8、重启电脑
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;开启root&#34;&gt;开启root &lt;a href=&#34;#%e5%bc%80%e5%90%afroot&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;sudo vi /etc/ssh/sshd_config(33行)， #PermitRootLogin prohibit-password 修改为 &lt;code&gt;PermitRootLogin yes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;//使用sudo获得root权限 &lt;code&gt;sudo su&lt;/code&gt; //输入新密码并确认 &lt;code&gt;passwd root&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;替换国内源&#34;&gt;替换国内源 &lt;a href=&#34;#%e6%9b%bf%e6%8d%a2%e5%9b%bd%e5%86%85%e6%ba%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb http://mirrors.aliyun.com/ubuntu/ &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsb_release -sc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; main restricted universe multiverse&amp;#34;&lt;/span&gt; | sudo tee /etc/apt/sources.list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb-src http://mirrors.aliyun.com/ubuntu/ &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsb_release -sc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; main restricted universe multiverse&amp;#34;&lt;/span&gt; | sudo tee -a /etc/apt/sources.list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb http://mirrors.aliyun.com/ubuntu/ &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsb_release -sc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-updates main restricted universe multiverse&amp;#34;&lt;/span&gt; | sudo tee -a /etc/apt/sources.list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb-src http://mirrors.aliyun.com/ubuntu/ &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsb_release -sc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-updates main restricted universe multiverse&amp;#34;&lt;/span&gt; | sudo tee -a /etc/apt/sources.list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb http://mirrors.aliyun.com/ubuntu/ &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsb_release -sc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-security main restricted universe multiverse&amp;#34;&lt;/span&gt; | sudo tee -a /etc/apt/sources.list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;deb-src http://mirrors.aliyun.com/ubuntu/ &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;lsb_release -sc&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-security main restricted universe multiverse&amp;#34;&lt;/span&gt; | sudo tee -a /etc/apt/sources.list
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;删除无用软件&#34;&gt;删除无用软件 &lt;a href=&#34;#%e5%88%a0%e9%99%a4%e6%97%a0%e7%94%a8%e8%bd%af%e4%bb%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove libreoffice
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove unity-webapps-common  &lt;span style=&#34;color:#75715e&#34;&gt;#删除Amazon的链接&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get  remove   libreoffice-common   unity-webapps-common thunderbird totem rhythmbox  simple-scan gnome-mahjongg aisleriot gnome-mines cheese transmission-common gnome-orca gnome-sudoku webbrowser-app onboard deja-dup &lt;span style=&#34;color:#75715e&#34;&gt;#无用软件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove software-center &lt;span style=&#34;color:#75715e&#34;&gt;#删除自带的软件中心&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove imagemagick &lt;span style=&#34;color:#75715e&#34;&gt;#自带图片编辑&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gsettings set com.canonical.Unity.Lenses remote-content-search &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;none&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;#关闭dash在线资源搜索&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h1 id=&#34;常用安装和卸载&#34;&gt;常用安装和卸载 &lt;a href=&#34;#%e5%b8%b8%e7%94%a8%e5%ae%89%e8%a3%85%e5%92%8c%e5%8d%b8%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install alien &lt;span style=&#34;color:#75715e&#34;&gt;##alien默认没有安装，所以首先要安装它&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo alien xxxx.rpm &lt;span style=&#34;color:#75715e&#34;&gt;##将rpm转换位deb，完成后会生成一个同名的xxxx.deb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dpkg -i xxxx.deb &lt;span style=&#34;color:#75715e&#34;&gt;##安装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dpkg -l | grep netease &lt;span style=&#34;color:#75715e&#34;&gt;#查找包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge  netease-cloud-music  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove  &lt;span style=&#34;color:#75715e&#34;&gt;#干净的卸载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;设置时间使用utc&#34;&gt;设置时间使用UTC &lt;a href=&#34;#%e8%ae%be%e7%bd%ae%e6%97%b6%e9%97%b4%e4%bd%bf%e7%94%a8utc&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim /etc/default/rcS  &lt;span style=&#34;color:#75715e&#34;&gt;###将UTC=no改为UTC=yes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;自定义dhcp网络的dns-server-ip地址&#34;&gt;自定义DHCP网络的DNS Server IP地址 &lt;a href=&#34;#%e8%87%aa%e5%ae%9a%e4%b9%89dhcp%e7%bd%91%e7%bb%9c%e7%9a%84dns-server-ip%e5%9c%b0%e5%9d%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo vim /etc/dhcp/dhclient.conf文件，在第21行#prepend domain-name-servers 127.0.0.1;下一行添加如下2行使用aliyun和114的DNS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prepend domain-name-servers 114.114.114.114;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;prepend domain-name-servers 223.5.5.5;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;这样可以优先使用aliyun的dns，次要使用114的DNS。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;snap删除脚本-win字符替换&#34;&gt;snap删除脚本 win字符替换 &lt;a href=&#34;#snap%e5%88%a0%e9%99%a4%e8%84%9a%e6%9c%ac-win%e5%ad%97%e7%ac%a6%e6%9b%bf%e6%8d%a2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 停用 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl stop snapd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#删除和遗留文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt purge snapd -y  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo  rm  -rf  ~/snap /snap /var/snap /var/lib/snapd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt autoremove --purge -y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt clean
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vim delsnap 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 输入下面内容:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; ubuntu_remove_snap&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo systemctl disable snapd.service
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo systemctl disable snapd.socket
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo systemctl disable snapd.seeded.service
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; snap in &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;snap list | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;正在移除: &lt;/span&gt;$snap&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        snap remove &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$snap&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo apt autoremove --purge snapd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo rm -rf /var/cache/snapd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sudo rm -rf ~/snap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ubuntu_remove_snap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#修改权限&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/\r$//&amp;#39;&lt;/span&gt; delsnap.sh &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x delsnap.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;软件图标&#34;&gt;软件图标 &lt;a href=&#34;#%e8%bd%af%e4%bb%b6%e5%9b%be%e6%a0%87&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#创建桌面图标&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;桌面创建文件  xx.desktop ，并填入下面配置
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Desktop Entry&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Application
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;xxx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Icon&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;软件路径&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/xxx/icon.png
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Exec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;软件路径&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/xxx/xx.appimage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Terminal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Categories&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Development;IDE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#权限添加&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo chmod +x xxx.appimage
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 添加到应用程序中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo cp xxx.desktop ~/.local/share/applications
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;gnome桌面美化&#34;&gt;gnome桌面美化 &lt;a href=&#34;#gnome%e6%a1%8c%e9%9d%a2%e7%be%8e%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 安装Tweaks 和 Extensions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install -y gnome-tweaks gnome-shell-extensions git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 访问&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;extensions.gnome.org，开启&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;Click here to install browser extension&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;安装User Themes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Big Sur 主题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://gh-proxy.com/github.com/vinceliuice/WhiteSur-gtk-theme.git --depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd WhiteSur-gtk-theme  &lt;span style=&#34;color:#75715e&#34;&gt;# 进入主题目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./install.sh  &lt;span style=&#34;color:#75715e&#34;&gt;# 运行安装脚本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ./tweaks.sh -g  &lt;span style=&#34;color:#75715e&#34;&gt;# 添加主题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Big Sur 应用图标&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://gh-proxy.com/github.com/zayronxio/Mkos-Big-Sur/releases/download/0.3/Mkos-Big-Sur.tar.xz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir ~/.icons  &lt;span style=&#34;color:#75715e&#34;&gt;# 创建 ~/.icons 目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tar -xJvf Mkos-Big-Sur.tar.xz -C ~/.icons  &lt;span style=&#34;color:#75715e&#34;&gt;# 将图标文件解压到 ~/.icons 目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Big Sur 字体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 界面字体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://gh-proxy.com/https://github.com/sahibjotsaggu/San-Francisco-Pro-Fonts.git --depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# 下载字体库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir /usr/local/share/fonts/SF-Pro  &lt;span style=&#34;color:#75715e&#34;&gt;# 新建字体文件夹&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd San-Francisco-Pro-Fonts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mv SF-Pro* /usr/local/share/fonts/SF-Pro  &lt;span style=&#34;color:#75715e&#34;&gt;# 安装字体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo fc-cache -fv  &lt;span style=&#34;color:#75715e&#34;&gt;# 刷新字体列表缓存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 文档字体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://font.download/dl/font/helvetica-255.zip
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir /usr/local/share/fonts/Helvetica
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo unzip helvetica-255.zip -d /usr/local/share/fonts/Helvetica
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo fc-cache -fv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 代码字体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;wget https://gh-proxy.com/github.com/ryanoasis/nerd-fonts/releases/download/v3.2.0/Meslo.tar.xz
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir Meslo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo tar -xJvf Meslo.tar.xz -C Meslo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mkdir /usr/local/share/fonts/Meslo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd Meslo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo mv MesloLG* /usr/local/share/fonts/Meslo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo fc-cache -fv
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#  壁纸下载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://gh-proxy.com/github.com/vinceliuice/WhiteSur-wallpapers.git --depth&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#设置主题、图标和壁纸&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;打开 GNOME Tweaks。GNOME Tweaks 位于 Utilities 文件夹里面。 新版本叫&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;优化&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;选择外观
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 图标，选择：Mkos-Big-sur
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 过时应用程序：WhiteSur-Light
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Shell: WhiteSur-Light
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;选择字体
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 界面文本&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Interface Text&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;：SF Pro Regular &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 文档文本&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Dodument Text&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: Helvetica 常规体 &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 等宽文本&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Monospace Text&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: MesloLGM Nerd Font Regular &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;窗口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 标题栏按钮，放置：左
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 系统设置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;在系统设置中选择，Appearance（桌面）调整如下配置
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 桌面图标：Size选择小，Position of New Icons选择顶部右侧
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- Dock：Panel Model选择关闭，Icon Size选择40，Position on Screen选择底部
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 毛玻璃效果&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 添加毛玻璃效果，我们需要安装 Blur my Shell 插件。打开 GNOME 的官网 extensions.gnome.org，搜索并启用 Blur my Shell 插件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 最小化窗口时的神奇效果，我们需要安装 Compiz alike magic lamp effect 插件。打开 GNOME 的官网 extensions.gnome.org，搜索并启用 Compiz alike magic lamp effect 插件：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Ubuntu 的程序坞默认只能点击展开，不能点击隐藏窗口，可以使用如下命令开启点击隐藏&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gsettings set org.gnome.shell.extensions.dash-to-dock click-action &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;minimize&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#gnome快捷键冲突&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;查看快捷键
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gsettings get org.gnome.desktop.wm.keybindings switch-to-workspace-left
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;设置快捷键
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-left &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;&amp;lt;Super&amp;gt;&amp;lt;Alt&amp;gt;Left&amp;#39;]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-right &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[&amp;#39;&amp;lt;Super&amp;gt;&amp;lt;Alt&amp;gt;Right&amp;#39;]&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;wsl2&#34;&gt;wsl2 &lt;a href=&#34;#wsl2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;查看: wsl --list --verbose
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;删除: wsl --unregister Ubuntu-22.04
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;导入: wsl --import Ubuntu-22.04 D:&lt;span style=&#34;color:#ae81ff&#34;&gt;\v&lt;/span&gt;mos&lt;span style=&#34;color:#ae81ff&#34;&gt;\U&lt;/span&gt;buntu-22.04 D:&lt;span style=&#34;color:#ae81ff&#34;&gt;\v&lt;/span&gt;mos&lt;span style=&#34;color:#ae81ff&#34;&gt;\U&lt;/span&gt;buntu-22.04.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;导出: wsl --export Ubuntu-22.04 D:&lt;span style=&#34;color:#ae81ff&#34;&gt;\v&lt;/span&gt;mos&lt;span style=&#34;color:#ae81ff&#34;&gt;\U&lt;/span&gt;buntu-22.04.tar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;重启：wsl --shutdown
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;宿主机无法通过ip连接wsl2解决方案&#34;&gt;宿主机无法通过ip连接wsl2解决方案 &lt;a href=&#34;#%e5%ae%bf%e4%b8%bb%e6%9c%ba%e6%97%a0%e6%b3%95%e9%80%9a%e8%bf%87ip%e8%bf%9e%e6%8e%a5wsl2%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;wsl2的默认网络模式是NAT，建议修改为镜像模式。在C:\Users&amp;lt;UserName&amp;gt;.wslconfig中添加下列代码:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[wsl2]
#镜像网络
networkingMode=mirrored
#如果使用代理可以在后面添加
autoProxy=true
还可以使用DNS隧道提高与 VPN 和其他复杂网络设置的兼容性:
dnsTunneling=true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;win11防火墙&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取wsl GUID:&lt;code&gt;Get-NetFirewallHyperVVMCreator&lt;/code&gt;,得到id通常是40ExxE90&lt;/li&gt;
&lt;li&gt;查看Hyper-V防火墙状态&lt;code&gt;Get-NetFirewallHyperVVMSetting -PolicyStore ActiveStore -Name &#39;{40E0AC32-46A5-438A-A0B2-2B479E8F2E90}&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;关闭Hyper-V防火墙&lt;code&gt;Set-NetFirewallHyperVVMSetting -Name &#39;{40E0AC32-46A5-438A-A0B2-2B479E8F2E90}&#39; -Enabled False&lt;/code&gt;
Ubuntu关闭防火墙&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ufw disable
apt-get remove iptables
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;linux-mint22-优化&#34;&gt;linux-mint22 优化 &lt;a href=&#34;#linux-mint22-%e4%bc%98%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#1、卸载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge libreoffice*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove   &lt;span style=&#34;color:#75715e&#34;&gt;#office&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge thingy*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove  &lt;span style=&#34;color:#75715e&#34;&gt;#书库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge warpinator*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#局域网轻松文件共享新利器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge hypnotix*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#tv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge webapp-manager*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#web应用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge mintchat*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#聊天&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge thunderbird*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#邮件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge transmission*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#下载工具&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge drawing*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#绘图工具&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge sticky*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#便签&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge gucharmap*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#字符映射表&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge firefox*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#火狐&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get remove --purge onboard*  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get autoremove &lt;span style=&#34;color:#75715e&#34;&gt;#软键盘&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#sudo apt-get remove --purge celluloid*  &amp;amp;&amp;amp; sudo apt-get autoremove #视频播放器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#sudo apt-get remove --purge rhythmbox*  &amp;amp;&amp;amp; sudo apt-get autoremove #音乐播放器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#2、桌面图标&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ln -s /home/llane/program/Motrix.AppImage ~/Desktop  创建软链接的形式
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#3、中文输入法 (会导致idea卡死))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install fcitx5 fcitx5-chinese-addons fcitx5-frontend-gtk2 fcitx5-frontend-gtk3 fcitx5-frontend-qt5 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install fcitx5-rime &lt;span style=&#34;color:#75715e&#34;&gt;#中州韵&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#然后编辑 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/.profile 或 ~/.xprofile，添加以下内容：完成后重启电脑
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export GTK_IM_MODULE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fcitx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export QT_IM_MODULE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fcitx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export QT5_IM_MODULE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fcitx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export XMODIFIERS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;@im&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;fcitx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#启动&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;将输入法Fcitx5添加为开机启
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#最近打开的记录清理 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf ~/.local/share/recently-used.xbel
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#查看最后的关机日志&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;journalctl -b -1 | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to stop&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>vscode折腾</title>
      <link>https://abnerxc.github.io/tool/vscode%E6%8A%98%E8%85%BE/</link>
      <pubDate>Thu, 21 Jul 2022 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/tool/vscode%E6%8A%98%E8%85%BE/</guid>
      <description>&lt;h1 id=&#34;基本设置&#34;&gt;基本设置 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e8%ae%be%e7%bd%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;0.使用快捷键组合【Ctrl+Shift+p】，在搜索框中输入“configure display language”，选择&lt;code&gt;install&lt;/code&gt; 安装简体中文&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Auto Close Tag ，自动添加 HTML/XML 的闭合标签，像 Visual Studio IDE 或 Sublime Text 一样。&lt;/li&gt;
&lt;li&gt;Beautify，在 Visual Studio Code 中格式化 javascript 、JSON 、 CSS 、Sass，以及 HTML。&lt;/li&gt;
&lt;li&gt;GitLens 可以增强 VSCode 内置 Git 的功能。例如 commits 搜索，历史记录和显示的代码作者身份具体功能可以查看Feature list&lt;/li&gt;
&lt;li&gt;Git History  - 显示提交历史记录的美丽图表等等&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;php环境&#34;&gt;PHP环境 &lt;a href=&#34;#php%e7%8e%af%e5%a2%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;php intelephense，PHP 的代码提示、补全、跳转定义、格式化插件，功能强大，无需配置；优秀，必装。 &lt;code&gt;setting.json&lt;/code&gt; 添加如下配置&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;php.suggest.basic&amp;#34;: false, //禁用基本建议
    &amp;#34;editor.quickSuggestions&amp;#34;: {  //在评论/注释中启用自动完成功能
        &amp;#34;comments&amp;#34;: true 
    },
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;PHP DocBlocker，注释插件&lt;/li&gt;
&lt;li&gt;PHP Snippets from PHPStrom,使用和 PHPStrom 一样的快捷代码片段，pubf + tab？&lt;/li&gt;
&lt;li&gt;PHP Namespace Resolver,PHP 命名空间解析器；可以导入和扩展类；还可以排序。优秀，必装。&lt;/li&gt;
&lt;li&gt;Better Align,可以实现变量和数组的等号对齐。优秀，必装。&lt;/li&gt;
&lt;li&gt;php.validate.executablepath,配置成docker 容器中的php路径，办法
&lt;ol&gt;
&lt;li&gt;新建文件 Create a file named php in &lt;code&gt;你自己的路径&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;写入内容&lt;code&gt;#!/bin/bash docker exec -i --user=1000:1000 php7-vscode php &amp;quot;$@&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改可执行&lt;code&gt;sudo chmod +x php&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;php.validate.executablepath=&lt;code&gt;你自己的路径&lt;/code&gt;/php&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;go环境&#34;&gt;go环境 &lt;a href=&#34;#go%e7%8e%af%e5%a2%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;设置代理  set GOPROXY=&amp;ldquo;&lt;a href=&#34;https://goproxy.cn&#34;&gt;https://goproxy.cn&lt;/a&gt;&amp;rdquo;&lt;/li&gt;
&lt;li&gt;vscode添加go插件&lt;/li&gt;
&lt;li&gt;安装go-tools，command+shift+p，输入 go:install 选择 install/update tools&lt;/li&gt;
&lt;li&gt;Code Runer,运行代码&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;settingjson&#34;&gt;setting.json &lt;a href=&#34;#settingjson&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
	&amp;#34;security.workspace.trust.untrustedFiles&amp;#34;: &amp;#34;open&amp;#34;,
	//工作台
	&amp;#34;workbench.iconTheme&amp;#34;: &amp;#34;material-icon-theme&amp;#34;,
	&amp;#34;workbench.tree.indent&amp;#34;: 22,
	&amp;#34;workbench.tree.renderIndentGuides&amp;#34;: &amp;#34;always&amp;#34;,
	&amp;#34;workbench.tree.expandMode&amp;#34;: &amp;#34;doubleClick&amp;#34;,
	&amp;#34;workbench.preferredHighContrastColorTheme&amp;#34;: &amp;#34;Monokai&amp;#34;,
	&amp;#34;workbench.preferredDarkColorTheme&amp;#34;: &amp;#34;Monokai&amp;#34;,
	&amp;#34;workbench.preferredLightColorTheme&amp;#34;: &amp;#34;Monokai&amp;#34;,
	&amp;#34;workbench.startupEditor&amp;#34;: &amp;#34;none&amp;#34;,
	&amp;#34;workbench.editor.untitled.hint&amp;#34;: &amp;#34;hidden&amp;#34;,
	&amp;#34;workbench.colorTheme&amp;#34;: &amp;#34;Monokai&amp;#34;,
	&amp;#34;workbench.tree.horizontalScrolling&amp;#34;: true,
	&amp;#34;workbench.editor.enablePreview&amp;#34;: false,
	&amp;#34;workbench.editorAssociations&amp;#34;: {
		&amp;#34;*.html&amp;#34;: &amp;#34;default&amp;#34;
	},
	//git
	&amp;#34;git.autofetch&amp;#34;: true,
	&amp;#34;git.confirmSync&amp;#34;: false,
	&amp;#34;git.ignoreMissingGitWarning&amp;#34;: true,
	//终端
	&amp;#34;terminal.integrated.fontSize&amp;#34;: 16,
	&amp;#34;terminal.integrated.tabs.enabled&amp;#34;: true,
	&amp;#34;terminal.external.osxExec&amp;#34;: &amp;#34;iTerm.app&amp;#34;,
	&amp;#34;terminal.integrated.fontFamily&amp;#34;: &amp;#34;Monaco&amp;#34;,
	&amp;#34;terminal.integrated.gpuAcceleration&amp;#34;: &amp;#34;off&amp;#34;,
	&amp;#34;editor.suggest.snippetsPreventQuickSuggestions&amp;#34;: false,
	&amp;#34;editor.snippetSuggestions&amp;#34;: &amp;#34;top&amp;#34;,
	&amp;#34;editor.renderControlCharacters&amp;#34;: true,
	&amp;#34;editor.rename.enablePreview&amp;#34;: false,
	&amp;#34;editor.wordWrap&amp;#34;: &amp;#34;on&amp;#34;,
	&amp;#34;editor.quickSuggestions&amp;#34;: {
		//注释中启用自动完成功能
		&amp;#34;comments&amp;#34;: true
	},
	&amp;#34;editor.minimap.renderCharacters&amp;#34;: false,
	&amp;#34;editor.mouseWheelZoom&amp;#34;: true,
	&amp;#34;editor.minimap.size&amp;#34;: &amp;#34;fit&amp;#34;,
	&amp;#34;diffEditor.wordWrap&amp;#34;: &amp;#34;on&amp;#34;,
	&amp;#34;alignment.operatorPadding&amp;#34;: &amp;#34;right&amp;#34;,
	&amp;#34;alignment.indentBase&amp;#34;: &amp;#34;dontchange&amp;#34;,
	&amp;#34;intelephense.telemetry.enabled&amp;#34;: true,
	&amp;#34;debug.console.lineHeight&amp;#34;: 18,
	&amp;#34;debug.console.fontSize&amp;#34;: 14,
	//php
	&amp;#34;[php]&amp;#34;: {
		&amp;#34;editor.defaultFormatter&amp;#34;: &amp;#34;bmewburn.vscode-intelephense-client&amp;#34;
	},
	&amp;#34;php.suggest.basic&amp;#34;: false,
	&amp;#34;intelephense.compatibility.correctForBaseClassStaticUnionTypes&amp;#34;: false,
	&amp;#34;php-docblocker.gap&amp;#34;: false,
	&amp;#34;php-docblocker.qualifyClassNames&amp;#34;: true,
	&amp;#34;php-docblocker.author&amp;#34;: {
		&amp;#34;name&amp;#34;: &amp;#34;abner&amp;#34;,
		&amp;#34;email&amp;#34;: &amp;#34;abnerxc666@gmail.com&amp;#34;
	},
	//go
	&amp;#34;go.autocompleteUnimportedPackages&amp;#34;: true,
	&amp;#34;go.docsTool&amp;#34;: &amp;#34;gogetdoc&amp;#34;,
	&amp;#34;go.testFlags&amp;#34;: [
		&amp;#34;-v&amp;#34;,
		&amp;#34;-count=1&amp;#34;
	],
	&amp;#34;go.languageServerFlags&amp;#34;: [
		&amp;#34;-remote=auto&amp;#34;, &amp;#34;-logfile=auto&amp;#34;, &amp;#34;-debug=:0&amp;#34;, &amp;#34;-rpc.trace&amp;#34;,
	],
	&amp;#34;go.buildTags&amp;#34;: &amp;#34;&amp;#34;,
	&amp;#34;go.buildFlags&amp;#34;: [],
	&amp;#34;go.lintFlags&amp;#34;: [],
	&amp;#34;go.vetFlags&amp;#34;: [],
	&amp;#34;go.coverOnSave&amp;#34;: false,
	&amp;#34;go.useCodeSnippetsOnFunctionSuggest&amp;#34;: false,
	&amp;#34;go.useCodeSnippetsOnFunctionSuggestWithoutType&amp;#34;: true,
	&amp;#34;go.useLanguageServer&amp;#34;: true,
	&amp;#34;go.formatTool&amp;#34;: &amp;#34;goreturns&amp;#34;,
	&amp;#34;go.gocodeAutoBuild&amp;#34;: false,
	&amp;#34;go.gocodePackageLookupMode&amp;#34;: &amp;#34;go&amp;#34;,
	&amp;#34;go.gotoSymbol.includeImports&amp;#34;: true,
	&amp;#34;go.formatOnSave&amp;#34;: true,
	&amp;#34;go.trace.server&amp;#34;: &amp;#34;verbose&amp;#34;,
	&amp;#34;gopls&amp;#34;: {
		&amp;#34;analyses&amp;#34;: {
			&amp;#34;composites&amp;#34;: false
		},
		&amp;#34;usePlaceholders&amp;#34;: false,
	},
	&amp;#34;go.testTimeout&amp;#34;: &amp;#34;1800s&amp;#34;,
	&amp;#34;go.toolsManagement.autoUpdate&amp;#34;: true,
	&amp;#34;go.alternateTools&amp;#34;: { //禁用基本建议
	},
	&amp;#34;go.inferGopath&amp;#34;: true,
	&amp;#34;[go]&amp;#34;: {
		&amp;#34;editor.formatOnSave&amp;#34;: true,
		&amp;#34;editor.codeActionsOnSave&amp;#34;: {
			&amp;#34;source.organizeImports&amp;#34;: true,
		},
	},
	&amp;#34;[go.mod]&amp;#34;: {
		&amp;#34;editor.formatOnSave&amp;#34;: true,
		&amp;#34;editor.codeActionsOnSave&amp;#34;: {
			&amp;#34;source.organizeImports&amp;#34;: true,
		},
	},
	&amp;#34;explorer.confirmDelete&amp;#34;: false,
	&amp;#34;explorer.compactFolders&amp;#34;: false,
	//排除文件
	&amp;#34;files.exclude&amp;#34;: {
		&amp;#34;/.classpath&amp;#34;: true,
		&amp;#34;/.project&amp;#34;: true,
		&amp;#34;/.settings&amp;#34;: true,
		&amp;#34;/.factorypath&amp;#34;: true,
		&amp;#34;/.idea&amp;#34;: true,
		&amp;#34;/.metadata&amp;#34;: true,
		&amp;#34;/.vscode&amp;#34;: true,
		&amp;#34;/.svn&amp;#34;: true
	},
	&amp;#34;search.exclude&amp;#34;: {
		&amp;#34;/idea&amp;#34;: true,
		&amp;#34;/svn&amp;#34;: true,
		&amp;#34;/node_modules&amp;#34;: true,
		&amp;#34;/bower_components&amp;#34;: true,
		&amp;#34;/env&amp;#34;: true,
		&amp;#34;/venv&amp;#34;: true
	},
	&amp;#34;files.autoSave&amp;#34;: &amp;#34;afterDelay&amp;#34;,
	&amp;#34;files.associations&amp;#34;: {
		&amp;#34;*.vue&amp;#34;: &amp;#34;html&amp;#34;,
		&amp;#34;*.module&amp;#34;: &amp;#34;php&amp;#34;
	},
	&amp;#34;files.watcherExclude&amp;#34;: {
		&amp;#34;/.idea/&amp;#34;: true,
		&amp;#34;/.svn/&amp;#34;: true,
		&amp;#34;/.git/objects/&amp;#34;: true,
		&amp;#34;/.git/subtree-cache/&amp;#34;: true,
		&amp;#34;/node_modules/&amp;#34;: true,
		&amp;#34;/env/&amp;#34;: true,
		&amp;#34;/venv/&amp;#34;: true,
		&amp;#34;env-*&amp;#34;: true
	},
	&amp;#34;editor.inlineSuggest.enabled&amp;#34;: true,
	&amp;#34;auto-rename-tag.activationOnLanguage&amp;#34;: [
		&amp;#34;html&amp;#34;,
		&amp;#34;xml&amp;#34;,
		&amp;#34;php&amp;#34;,
		&amp;#34;javascript&amp;#34;
	],
	&amp;#34;editor.minimap.enabled&amp;#34;: false,
	&amp;#34;window.zoomLevel&amp;#34;: -1,
	&amp;#34;editor.fontSize&amp;#34;: 16,
	&amp;#34;editor.bracketPairColorization.enabled&amp;#34;: true,
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Go相对路径问题</title>
      <link>https://abnerxc.github.io/go/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 03 May 2022 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h2 id=&#34;问题&#34;&gt;问题 &lt;a href=&#34;#%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;1、 go run 我们上移目录层级，到 $GOPATH/src 下，执行 go run gin-blog/main.go&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[$]# go run gin-blog/main.go
Fail to parse &amp;#39;conf/app.yam&amp;#39;: open conf/app.ini: no such file or directory
exit status 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、 go build，执行 ./gin-blog/main&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[$]# ./gin-blog/main
 Fail to parse &amp;#39;conf/app.ini&amp;#39;: open conf/app.ini: no such file or directory
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;测试&#34;&gt;测试 &lt;a href=&#34;#%e6%b5%8b%e8%af%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;编写获取当前路径的方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import (
	&amp;#34;path/filepath&amp;#34;
	&amp;#34;os&amp;#34;
	&amp;#34;os/exec&amp;#34;
	&amp;#34;string&amp;#34;
)

func GetAppPath() string {
    file, _ := exec.LookPath(os.Args[0])
    path, _ := filepath.Abs(file)
    index := strings.LastIndex(path, string(os.PathSeparator))

    return path[:index]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;执行&lt;code&gt;go run&lt;/code&gt; 得到&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go run main.go
C:\Users\abner（~1\AppData\Local\Temp\go-build536365654\b001\exe
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;剖析&#34;&gt;剖析 &lt;a href=&#34;#%e5%89%96%e6%9e%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我们聚焦在 &lt;code&gt;go run&lt;/code&gt; 的输出结果上，发现它是一个临时文件的地址，这是为什么呢？&lt;/p&gt;
&lt;p&gt;在go help run中，我们可以看到&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A Go source file is defined to be a file ending in a literal &amp;#34;.go&amp;#34; suffix.
也就是 go run 执行时会将文件放到 /tmp/go-build... 目录下，编译并运行
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此&lt;code&gt;go run main.go&lt;/code&gt;出现/tmp/go-build536365654/b001/exe结果也不奇怪了，因为它已经跑到临时目录下去执行可执行文件了&lt;/p&gt;
&lt;p&gt;这就已经很清楚了，那么我们想想，会出现哪些问题呢&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖相对路径的文件，出现路径出错的问题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go run&lt;/code&gt; 和 &lt;code&gt;go build&lt;/code&gt; 不一样，一个到临时目录下执行，一个可手动在编译后的目录下执行，路径的处理方式会不同&lt;/li&gt;
&lt;li&gt;不断go run，不断产生新的临时文件
这其实就是根本原因了，因为 go run 和 go build 的编译文件执行路径并不同，执行的层级也有可能不一样，自然而然就出现各种读取不到的奇怪问题了&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案 &lt;a href=&#34;#%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;一、获取编译后可执行文件路径
1.	将配置文件的相对路径与GetAppPath()的结果相拼接，可解决go build main.go的可执行文件跨目录执行的问题（如：./src/gin-blog/main）
2.	通过传递参数指定绝对路径，可解决go run的问题
二、增加os.Getwd()进行多层判断
参见 &lt;a href=&#34;https://github.com/astaxie/beego/blob/develop/config/config.go&#34;&gt;beego&lt;/a&gt; 读取 app.conf 的代码&lt;/p&gt;
&lt;p&gt;该写法可兼容 go build 和在项目根目录执行 &lt;code&gt;go run&lt;/code&gt; ，但是若跨目录执行 &lt;code&gt;go run&lt;/code&gt; 就不行
三、配置全局系统变量
我们可以通过os.Getenv来获取系统全局变量，然后与相对路径进行拼接&lt;/p&gt;
&lt;p&gt;1、 设置项目工作区&lt;/p&gt;
&lt;p&gt;简单来说，就是设置项目（应用）的工作路径，然后与配置文件、日志文件等相对路径进行拼接，达到相对的绝对路径来保证路径一致&lt;/p&gt;
&lt;p&gt;参见 gogs 读取GOGS_WORK_DIR进行拼接的代码&lt;/p&gt;
&lt;p&gt;2、 利用系统自带变量&lt;/p&gt;
&lt;p&gt;简单来说就是通过系统自带的全局变量，例如$HOME等，将配置文件存放在$HOME/conf或/etc/conf下&lt;/p&gt;
&lt;p&gt;这样子就能更加固定的存放配置文件，不需要额外去设置一个环境变量&lt;/p&gt;
&lt;h2 id=&#34;拓展&#34;&gt;拓展 &lt;a href=&#34;#%e6%8b%93%e5%b1%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;go test&lt;/code&gt; 在一些场景下也会遇到路径问题，因为&lt;code&gt;go test&lt;/code&gt;只能够在当前目录执行，所以在执行测试用例的时候，你的执行目录已经是测试目录了&lt;/p&gt;
&lt;p&gt;需要注意的是，如果采用获取外部参数的办法，用 os.args 时，go test -args 和 go run、go build 会有命令行参数位置的不一致问题&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gin_validator</title>
      <link>https://abnerxc.github.io/go/gin_validator/</link>
      <pubDate>Sun, 13 Jun 2021 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/gin_validator/</guid>
      <description>&lt;h1 id=&#34;概述&#34;&gt;概述 &lt;a href=&#34;#%e6%a6%82%e8%bf%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;在接口开发经常会遇到一个问题是后端需要写大量的繁琐代码进行数据校验，所以就想着有没有像前端校验一样写规则进行匹配校验，然后就发现了validator包，一个比较强大的校验工具包下面是一些学习总结，详细内容可以查看&lt;a href=&#34;https://github.com/go-playground/validator&#34;&gt;validator&lt;/a&gt;
包下载：go get github.com/go-playground/validator/v10&lt;/p&gt;
&lt;h1 id=&#34;操作符说明&#34;&gt;操作符说明 &lt;a href=&#34;#%e6%93%8d%e4%bd%9c%e7%ac%a6%e8%af%b4%e6%98%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;标记&lt;/th&gt;
          &lt;th&gt;标记说明&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;,&lt;/td&gt;
          &lt;td&gt;多操作符分割&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;|&lt;/td&gt;
          &lt;td&gt;或操作符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;跳过验证字段&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;常用标记说明&#34;&gt;常用标记说明 &lt;a href=&#34;#%e5%b8%b8%e7%94%a8%e6%a0%87%e8%ae%b0%e8%af%b4%e6%98%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;标记&lt;/th&gt;
          &lt;th&gt;标记说明&lt;/th&gt;
          &lt;th&gt;例&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;required&lt;/td&gt;
          &lt;td&gt;必填&lt;/td&gt;
          &lt;td&gt;Field或Structvalidate:&amp;ldquo;required&amp;rdquo;,如果int,0作为特殊可通过*int判断&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;omitempty&lt;/td&gt;
          &lt;td&gt;空时忽略&lt;/td&gt;
          &lt;td&gt;Field或Structvalidate:&amp;ldquo;omitempty&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;len&lt;/td&gt;
          &lt;td&gt;长度&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;len=0&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;eq&lt;/td&gt;
          &lt;td&gt;等于&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;eq=0&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;gt&lt;/td&gt;
          &lt;td&gt;大于&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;gt=0&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;gte&lt;/td&gt;
          &lt;td&gt;大于等于&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;gte=0&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;lt&lt;/td&gt;
          &lt;td&gt;小于&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;lt=0&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;lte&lt;/td&gt;
          &lt;td&gt;小于等于&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;lte=0&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;eqfield&lt;/td&gt;
          &lt;td&gt;同一结构体字段相等&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;eqfield=Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;nefield&lt;/td&gt;
          &lt;td&gt;同一结构体字段不相等&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;nefield=Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;gtfield&lt;/td&gt;
          &lt;td&gt;大于同一结构体字段&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;gtfield=Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;gtefield&lt;/td&gt;
          &lt;td&gt;大于等于同一结构体字段&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;gtefield=Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ltfield&lt;/td&gt;
          &lt;td&gt;小于同一结构体字段&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;ltfield=Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ltefield&lt;/td&gt;
          &lt;td&gt;小于等于同一结构体字段&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;ltefield=Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;eqcsfield&lt;/td&gt;
          &lt;td&gt;跨不同结构体字段相等&lt;/td&gt;
          &lt;td&gt;Struct1.Fieldvalidate:&amp;ldquo;eqcsfield=Struct2.Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;necsfield&lt;/td&gt;
          &lt;td&gt;跨不同结构体字段不相等&lt;/td&gt;
          &lt;td&gt;Struct1.Fieldvalidate:&amp;ldquo;necsfield=Struct2.Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;gtcsfield&lt;/td&gt;
          &lt;td&gt;大于跨不同结构体字段&lt;/td&gt;
          &lt;td&gt;Struct1.Fieldvalidate:&amp;ldquo;gtcsfield=Struct2.Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;gtecsfield&lt;/td&gt;
          &lt;td&gt;大于等于跨不同结构体字段&lt;/td&gt;
          &lt;td&gt;Struct1.Fieldvalidate:&amp;ldquo;gtecsfield=Struct2.Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ltcsfield&lt;/td&gt;
          &lt;td&gt;小于跨不同结构体字段&lt;/td&gt;
          &lt;td&gt;Struct1.Fieldvalidate:&amp;ldquo;ltcsfield=Struct2.Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ltecsfield&lt;/td&gt;
          &lt;td&gt;小于等于跨不同结构体字段&lt;/td&gt;
          &lt;td&gt;Struct1.Fieldvalidate:&amp;ldquo;ltecsfield=Struct2.Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;min&lt;/td&gt;
          &lt;td&gt;最大值&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;min=1&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;max&lt;/td&gt;
          &lt;td&gt;最小值&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;max=2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;structonly&lt;/td&gt;
          &lt;td&gt;仅验证结构体，不验证任何结构体字段&lt;/td&gt;
          &lt;td&gt;Structvalidate:&amp;ldquo;structonly&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;nostructlevel&lt;/td&gt;
          &lt;td&gt;不运行任何结构级别的验证&lt;/td&gt;
          &lt;td&gt;Structvalidate:&amp;ldquo;nostructlevel&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;dive&lt;/td&gt;
          &lt;td&gt;向下延伸验证，多层向下需要多个dive标记&lt;/td&gt;
          &lt;td&gt;[][]stringvalidate:&amp;ldquo;gt=0,dive,len=1,dive,required&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;diveKeys&amp;amp;EndKeys&lt;/td&gt;
          &lt;td&gt;与dive同时使用，用于对map对象的键的和值的验证，keys为键，endkeys为值&lt;/td&gt;
          &lt;td&gt;map[string]stringvalidate:&amp;ldquo;gt=0,dive,keys,eq=1|eq=2,endkeys,required&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;required_with&lt;/td&gt;
          &lt;td&gt;其他字段其中一个不为空且当前字段不为空&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;required_with=Field1Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;required_with_all&lt;/td&gt;
          &lt;td&gt;其他所有字段不为空且当前字段不为空&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;required_with_all=Field1Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;required_without&lt;/td&gt;
          &lt;td&gt;其他字段其中一个为空且当前字段不为空&lt;/td&gt;
          &lt;td&gt;Field`validate:&amp;ldquo;required_without=Field1Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;required_without_all&lt;/td&gt;
          &lt;td&gt;其他所有字段为空且当前字段不为空&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;required_without_all=Field1Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;isdefault&lt;/td&gt;
          &lt;td&gt;是默认值&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;isdefault=0&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;oneof&lt;/td&gt;
          &lt;td&gt;其中之一&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;oneof=579&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;containsfield&lt;/td&gt;
          &lt;td&gt;字段包含另一个字段&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;containsfield=Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;excludesfield&lt;/td&gt;
          &lt;td&gt;字段不包含另一个字段&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;excludesfield=Field2&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;unique&lt;/td&gt;
          &lt;td&gt;是否唯一，通常用于切片或结构体&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;unique&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;alphanum&lt;/td&gt;
          &lt;td&gt;字符串值是否只包含ASCII字母数字字符&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;alphanum&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;alphaunicode&lt;/td&gt;
          &lt;td&gt;字符串值是否只包含unicode字符&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;alphaunicode&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;alphanumunicode&lt;/td&gt;
          &lt;td&gt;字符串值是否只包含unicode字母数字字符&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;alphanumunicode&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;numeric&lt;/td&gt;
          &lt;td&gt;字符串值是否包含基本的数值&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;numeric&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;hexadecimal&lt;/td&gt;
          &lt;td&gt;字符串值是否包含有效的十六进制&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;hexadecimal&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;hexcolor&lt;/td&gt;
          &lt;td&gt;字符串值是否包含有效的十六进制颜色&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;hexcolor&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;lowercase&lt;/td&gt;
          &lt;td&gt;符串值是否只包含小写字符&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;lowercase&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;uppercase&lt;/td&gt;
          &lt;td&gt;符串值是否只包含大写字符&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;uppercase&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;email&lt;/td&gt;
          &lt;td&gt;字符串值包含一个有效的电子邮件&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;email&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;json&lt;/td&gt;
          &lt;td&gt;字符串值是否为有效的JSON&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;json&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;file&lt;/td&gt;
          &lt;td&gt;符串值是否包含有效的文件路径，以及该文件是否存在于计算机上&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;file&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;url&lt;/td&gt;
          &lt;td&gt;符串值是否包含有效的url&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;url&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;uri&lt;/td&gt;
          &lt;td&gt;符串值是否包含有效的uri&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;uri&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;base64&lt;/td&gt;
          &lt;td&gt;字符串值是否包含有效的base64值&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;base64&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;contains&lt;/td&gt;
          &lt;td&gt;字符串值包含子字符串值&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;contains=@&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;containsany&lt;/td&gt;
          &lt;td&gt;字符串值包含子字符串值中的任何字符&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;containsany=abc&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;containsrune&lt;/td&gt;
          &lt;td&gt;字符串值包含提供的特殊符号值&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;containsrune=☢&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;excludes&lt;/td&gt;
          &lt;td&gt;字符串值不包含子字符串值&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;excludes=@&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;excludesall&lt;/td&gt;
          &lt;td&gt;字符串值不包含任何子字符串值&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;excludesall=abc&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;excludesrune&lt;/td&gt;
          &lt;td&gt;字符串值不包含提供的特殊符号值&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;containsrune=☢&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;startswith&lt;/td&gt;
          &lt;td&gt;字符串以提供的字符串值开始&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;startswith=abc&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;endswith&lt;/td&gt;
          &lt;td&gt;字符串以提供的字符串值结束&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;endswith=abc&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ip&lt;/td&gt;
          &lt;td&gt;字符串值是否包含有效的IP地址&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;ip&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ipv4&lt;/td&gt;
          &lt;td&gt;字符串值是否包含有效的ipv4地址&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;ipv4&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;datetime&lt;/td&gt;
          &lt;td&gt;字符串值是否包含有效的日期&lt;/td&gt;
          &lt;td&gt;Fieldvalidate:&amp;ldquo;datetime&amp;rdquo;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;使用示例&#34;&gt;使用示例 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e7%a4%ba%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;使用注意&#34;&gt;使用注意 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e6%b3%a8%e6%84%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;当搜索条件与特殊标记冲突时,如：逗号（,），或操作（|），中横线（-）等则需要使用 UTF-8十六进制表示形式&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Test struct {
   Field1 string  `validate:&amp;#34;excludesall=|&amp;#34;`    // 错误
   Field2 string `validate:&amp;#34;excludesall=0x7C&amp;#34;` // 正确.
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;可通过validationErrors := errs.(validator.ValidationErrors)获取错误对象自定义返回响应错误&lt;/li&gt;
&lt;li&gt;自定义校验结果翻译&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 初始化翻译器
func validateInit() {
	zh_ch := zh.New()
	uni := ut.New(zh_ch)               // 万能翻译器，保存所有的语言环境和翻译数据
	Trans, _ = uni.GetTranslator(&amp;#34;zh&amp;#34;) // 翻译器
	Validate = validator.New()
	_ = zh_translations.RegisterDefaultTranslations(Validate, Trans)
	// 添加额外翻译
	_ = Validate.RegisterTranslation(&amp;#34;required_without&amp;#34;, Trans, func(ut ut.Translator) error {
		return ut.Add(&amp;#34;required_without&amp;#34;, &amp;#34;{0} 为必填字段!&amp;#34;, true)
	}, func(ut ut.Translator, fe validator.FieldError) string {
		t, _ := ut.T(&amp;#34;required_without&amp;#34;, fe.Field())
		return t
	})
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;使用示例-1&#34;&gt;使用示例 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e7%a4%ba%e4%be%8b-1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import (
   &amp;#34;fmt&amp;#34;
   &amp;#34;github.com/go-playground/validator/v10&amp;#34;
)
// 实例化验证对象
var validate = validator.New()
func main() {
   // 结构体验证
   type Inner struct {
      String string `validate:&amp;#34;contains=111&amp;#34;`
   }
   inner := &amp;amp;Inner{String: &amp;#34;11@&amp;#34;}
   errs := validate.Struct(inner)
   if errs != nil {
      fmt.Println(errs.Error())
   }
   // 变量验证
   m := map[string]string{&amp;#34;&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;val3&amp;#34;: &amp;#34;val3&amp;#34;}
   errs = validate.Var(m, &amp;#34;required,dive,keys,required,endkeys,required&amp;#34;)
   if errs != nil {
      fmt.Println(errs.Error())
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;gin框架中使用验证器&#34;&gt;gin框架中使用验证器 &lt;a href=&#34;#gin%e6%a1%86%e6%9e%b6%e4%b8%ad%e4%bd%bf%e7%94%a8%e9%aa%8c%e8%af%81%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;定义错误翻译器&#34;&gt;定义错误翻译器 &lt;a href=&#34;#%e5%ae%9a%e4%b9%89%e9%94%99%e8%af%af%e7%bf%bb%e8%af%91%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package xcore

import (
	&amp;#34;fmt&amp;#34;
	&amp;#34;github.com/gin-gonic/gin/binding&amp;#34;
	&amp;#34;reflect&amp;#34;
	&amp;#34;strings&amp;#34;
	//gin表单验证
	&amp;#34;github.com/go-playground/locales/en&amp;#34;
	&amp;#34;github.com/go-playground/locales/zh&amp;#34;
	&amp;#34;github.com/go-playground/universal-translator&amp;#34;
	&amp;#34;github.com/go-playground/validator/v10&amp;#34;
	enTranslations &amp;#34;github.com/go-playground/validator/v10/translations/en&amp;#34;
	zhTranslations &amp;#34;github.com/go-playground/validator/v10/translations/zh&amp;#34;
)

// 定义一个全局翻译器
var trans ut.Translator

// InitTrans 初始化翻译器
func InitTrans(locale string) (err error) {
	//修改gin框架中的Validator属性，实现自定制
	if v, ok := binding.Validator.Engine().(*validator.Validate); ok {
		// 注册一个获取json tag的自定义方法
		v.RegisterTagNameFunc(func(fld reflect.StructField) string {
			name := strings.SplitN(fld.Tag.Get(&amp;#34;json&amp;#34;), &amp;#34;,&amp;#34;, 2)[0]
			if name == &amp;#34;-&amp;#34; {
				return &amp;#34;&amp;#34;
			}
			return name
		})

		zhT := zh.New() //中文翻译器
		enT := en.New() //英文翻译器

		// 第一个参数是备用（fallback）的语言环境
		// 后面的参数是应该支持的语言环境（支持多个）
		// uni := ut.New(zhT, zhT) 也是可以的
		uni := ut.New(enT, zhT, enT)

		// locale 通常取决于 http 请求头的 &amp;#39;Accept-Language&amp;#39;
		var ok bool
		// 也可以使用 uni.FindTranslator(...) 传入多个locale进行查找
		trans, ok = uni.GetTranslator(locale)
		if !ok {
			return fmt.Errorf(&amp;#34;uni.GetTranslator(%s) failed&amp;#34;, locale)
		}

		// 添加额外翻译
		_ = v.RegisterTranslation(&amp;#34;required_with&amp;#34;, trans, func(ut ut.Translator) error {
			return ut.Add(&amp;#34;required_with&amp;#34;, &amp;#34;{0} 为必填字段!&amp;#34;, true)
		}, func(ut ut.Translator, fe validator.FieldError) string {
			t, _ := ut.T(&amp;#34;required_with&amp;#34;, fe.Field())
			return t
		})
		_ = v.RegisterTranslation(&amp;#34;required_without&amp;#34;, trans, func(ut ut.Translator) error {
			return ut.Add(&amp;#34;required_without&amp;#34;, &amp;#34;{0} 为必填字段!&amp;#34;, true)
		}, func(ut ut.Translator, fe validator.FieldError) string {
			t, _ := ut.T(&amp;#34;required_without&amp;#34;, fe.Field())
			return t
		})
		_ = v.RegisterTranslation(&amp;#34;required_without_all&amp;#34;, trans, func(ut ut.Translator) error {
			return ut.Add(&amp;#34;required_without_all&amp;#34;, &amp;#34;{0} 为必填字段!&amp;#34;, true)
		}, func(ut ut.Translator, fe validator.FieldError) string {
			t, _ := ut.T(&amp;#34;required_without_all&amp;#34;, fe.Field())
			return t
		})

		// 注册翻译器
		switch locale {
		case &amp;#34;en&amp;#34;:
			err = enTranslations.RegisterDefaultTranslations(v, trans)
		case &amp;#34;zh&amp;#34;:
			err = zhTranslations.RegisterDefaultTranslations(v, trans)
		default:
			err = enTranslations.RegisterDefaultTranslations(v, trans)
		}
		return
	}
	return
}

func addValueToMap(fields map[string]string) map[string]interface{} {
	res := make(map[string]interface{})
	for field, err := range fields {
		fieldArr := strings.SplitN(field, &amp;#34;.&amp;#34;, 2)
		if len(fieldArr) &amp;gt; 1 {
			NewFields := map[string]string{fieldArr[1]: err}
			returnMap := addValueToMap(NewFields)
			if res[fieldArr[0]] != nil {
				for k, v := range returnMap {
					res[fieldArr[0]].(map[string]interface{})[k] = v
				}
			} else {
				res[fieldArr[0]] = returnMap
			}
			continue
		} else {
			res[field] = err
			continue
		}
	}
	return res
}

// 去掉结构体名称前缀
func removeTopStruct(fields map[string]string) map[string]interface{} {
	lowerMap := map[string]string{}
	for field, err := range fields {
		fieldArr := strings.SplitN(field, &amp;#34;.&amp;#34;, 2)
		lowerMap[fieldArr[1]] = err
	}
	res := addValueToMap(lowerMap)
	return res
}

//handler中调用的错误翻译方法
func ValidatorError(err error) map[string]interface{} {
	errs, ok := err.(validator.ValidationErrors)
	if ok {
		return removeTopStruct(errs.Translate(trans))
	}
	return nil
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;使用&#34;&gt;使用 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (c *IndexController) Validator(ctx *gin.Context) {
	req := requests.AdminReq{}
	if err := ctx.ShouldBindJSON(&amp;amp;req); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{&amp;#34;error&amp;#34;: xcore.ValidatorError(err)})
		return
	}
	ctx.JSON(http.StatusNotFound, &amp;#34;ok&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Go-GMP模型</title>
      <link>https://abnerxc.github.io/go/gmp%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sun, 13 Jun 2021 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/gmp%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://learnku.com/articles/41728&#34;&gt;https://learnku.com/articles/41728&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;gmp-模型&#34;&gt;GMP 模型 &lt;a href=&#34;#gmp-%e6%a8%a1%e5%9e%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-gmp-a.jpeg&#34; alt=&#34;1.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;G= Goroutine 协程，P=Processor 处理器， M=Thread 线程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局队列（Global Queue）：存放等待运行的 G。&lt;/li&gt;
&lt;li&gt;P 的本地队列：同全局队列类似，存放的也是等待运行的 G，存的数量有限，不超过 256 个。新建 G’时，G’优先加入到 P 的本地队列，如果队列满了，则会把本地队列中一半的 G 移动到全局队列。&lt;/li&gt;
&lt;li&gt;P 列表：所有的 P 都在程序启动时创建，并保存在数组中，最多有 GOMAXPROCS(可配置) 个。&lt;/li&gt;
&lt;li&gt;M：线程想运行任务就得获取 P，从 P 的本地队列获取 G，P 队列为空时，M 也会尝试从全局队列拿一批 G 放到 P 的本地队列，或从其他 P 的本地队列偷一半放到自己 P 的本地队列。M 运行 G，G 执行之后，M 会从 P 获取下一个 G，不断重复下去。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Goroutine 调度器和 OS 调度器是通过 M 结合起来的，每个 M 都代表了 1 个内核线程，OS 调度器负责把内核线程分配到 CPU 的核上执行。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;有关-p-和-m-的个数问题&#34;&gt;有关 P 和 M 的个数问题 &lt;a href=&#34;#%e6%9c%89%e5%85%b3-p-%e5%92%8c-m-%e7%9a%84%e4%b8%aa%e6%95%b0%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;P的数量： 由启动时环境变量 $GOMAXPROCS 或者是由 runtime 的方法 GOMAXPROCS() 决定。这意味着在程序执行的任意时刻都只有 $GOMAXPROCS 个 goroutine 在同时运行。&lt;/li&gt;
&lt;li&gt;M的数量：
&lt;ul&gt;
&lt;li&gt;go 语言本身的限制：go 程序启动时，会设置 M 的最大数量，默认 10000. 但是内核很难支持这么多的线程数，所以这个限制可以忽略。&lt;/li&gt;
&lt;li&gt;runtime/debug 中的 SetMaxThreads 函数，设置 M 的最大数量&lt;/li&gt;
&lt;li&gt;一个 M 阻塞了，会创建新的 M。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;M 与 P 的数量没有绝对关系，一个 M 阻塞，P 就会去创建或者切换另一个 M，所以，即使 P 的默认数量是 1，也有可能会创建很多个 M 出来。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;p-和-m-何时会被创建&#34;&gt;P 和 M 何时会被创建 &lt;a href=&#34;#p-%e5%92%8c-m-%e4%bd%95%e6%97%b6%e4%bc%9a%e8%a2%ab%e5%88%9b%e5%bb%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;P 何时创建：在确定了 P 的最大数量 n 后，运行时系统会根据这个数量创建 n 个 P。&lt;/li&gt;
&lt;li&gt;M 何时创建：没有足够的 M 来关联 P 并运行其中的可运行的 G。比如所有的 M 此时都阻塞住了，而 P 中还有很多就绪任务，就会去寻找空闲的 M，而没有空闲的，就会去创建新的 M。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;调度器的设计策略&#34;&gt;调度器的设计策略 &lt;a href=&#34;#%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e8%ae%be%e8%ae%a1%e7%ad%96%e7%95%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;复用线程：避免频繁的创建、销毁线程，而是对线程的复用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;work stealing 机制：当本线程无可运行的 G 时，尝试从其他线程绑定的 P 偷取 G，而不是销毁线程。&lt;/li&gt;
&lt;li&gt;hand off 机制：​ 当本线程因为 G 进行系统调用阻塞时，线程释放绑定的 P，把 P 转移给其他空闲的线程执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用并行：&lt;code&gt;GOMAXPROCS&lt;/code&gt; 设置 P 的数量，最多有 &lt;code&gt;GOMAXPROCS&lt;/code&gt; 个线程分布在多个 CPU 上同时运行。&lt;code&gt;GOMAXPROCS&lt;/code&gt; 也限制了并发的程度，比如 &lt;code&gt;GOMAXPROCS= 核数/2&lt;/code&gt;，则最多利用了一半的 CPU 核进行并行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抢占：在 coroutine 中要等待一个协程主动让出 CPU 才执行下一个协程，
&lt;code&gt;在 Go 中，一个 goroutine 最多占用 CPU 10ms， 防止其他 goroutine 被饿死，这就是 goroutine 不同于 coroutine 的一个地方&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全局 G 队列：在新的调度器中依然有全局 G 队列，但功能已经被弱化了，当 M 执行 work stealing 从其他 P 偷不到 G 时，它可以从全局 G 队列获取 G。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;go-func--调度流程&#34;&gt;go func () 调度流程 &lt;a href=&#34;#go-func--%e8%b0%83%e5%ba%a6%e6%b5%81%e7%a8%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-gmp-b.jpeg&#34; alt=&#34;2.jpg&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们通过 go func () 来创建一个 goroutine；&lt;/li&gt;
&lt;li&gt;有两个存储 G 的队列，一个是局部调度器 P 的本地队列、一个是全局 G 队列。新创建的 G 会先保存在 P 的本地队列中，如果 P 的本地队列已经满了就会保存在全局的队列中；
​3. G 只能运行在 M 中，一个 M 必须持有一个 P，M 与 P 是 1：1 的关系。M 会从 P 的本地队列弹出一个可执行状态的 G 来执行，如果 P 的本地队列为空，就会想其他的 MP 组合偷取一个可执行的 G 来执行；
​4. 一个 M 调度 G 执行的过程是一个循环机制；&lt;/li&gt;
&lt;li&gt;当 M 执行某一个 G 时候如果发生了 syscall 或则其余阻塞操作，M 会阻塞，如果当前有一些 G 在执行，runtime 会把这个线程 M 从 P 中摘除 (detach)，然后再创建一个新的操作系统的线程 (如果有空闲的线程可用就复用空闲线程) 来服务于这个 P；&lt;/li&gt;
&lt;li&gt;当 M 系统调用结束时候，这个 G 会尝试获取一个空闲的 P 执行，并放入到这个 P 的本地队列。如果获取不到 P，那么这个线程 M 变成休眠状态， 加入到空闲线程中，然后这个 G 会被放入全局队列中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;调度器的生命周期&#34;&gt;调度器的生命周期 &lt;a href=&#34;#%e8%b0%83%e5%ba%a6%e5%99%a8%e7%9a%84%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-gmp-c.jpeg&#34; alt=&#34;2.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;特殊的-m0-和-g0&#34;&gt;特殊的 M0 和 G0 &lt;a href=&#34;#%e7%89%b9%e6%ae%8a%e7%9a%84-m0-%e5%92%8c-g0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;M0 是启动程序后的编号为 0 的主线程，这个 M 对应的实例会在全局变量 runtime.m0 中，不需要在 heap 上分配，M0 负责执行初始化操作和启动第一个 G， 在之后 M0 就和其他的 M 一样了。&lt;/li&gt;
&lt;li&gt;GO 是每次启动一个 M 都会第一个创建的 gourtine，G0 仅用于负责调度的 G，G0 不指向任何可执行的函数，每个 M 都会有一个自己的 G0。在调度或系统调用时会使用 G0 的栈空间，全局变量的 G0 是 M0 的 G0。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;可视化-gmp-编程&#34;&gt;可视化 GMP 编程 &lt;a href=&#34;#%e5%8f%af%e8%a7%86%e5%8c%96-gmp-%e7%bc%96%e7%a8%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;方式 1：go tool trace&lt;/li&gt;
&lt;li&gt;方式 2：Debug trace&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Go-深入解析slice底层实现</title>
      <link>https://abnerxc.github.io/go/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90slice%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 15 May 2021 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90slice%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;原文地址：https://halfrost.com/go_slice/&lt;/p&gt;
&lt;p&gt;切片是 Go 中的一种基本的数据结构，使用这种结构可以用来管理数据集合。切片的设计想法是由动态数组概念而来，为了开发者可以更加方便的使一个数据结构可以自动增加和减少。但是切片本身并不是动态数据或者数组指针。切片常见的操作有 reslice、append、copy。与此同时，切片还具有可索引，可迭代的优秀特性。&lt;/p&gt;
&lt;h1 id=&#34;切片和数组&#34;&gt;切片和数组 &lt;a href=&#34;#%e5%88%87%e7%89%87%e5%92%8c%e6%95%b0%e7%bb%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;在 Go 中，与 C 数组变量隐式作为指针使用不同，Go 数组是值类型，赋值和函数传参操作都会复制整个数组数据。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	arrayA := [2]int{100, 200}
	var arrayB [2]int

	arrayB = arrayA

	fmt.Printf(&amp;#34;arrayA : %p , %v\n&amp;#34;, &amp;amp;arrayA, arrayA)
	fmt.Printf(&amp;#34;arrayB : %p , %v\n&amp;#34;, &amp;amp;arrayB, arrayB)

	testArray(arrayA)
}

func testArray(x [2]int) {
	fmt.Printf(&amp;#34;func Array : %p , %v\n&amp;#34;, &amp;amp;x, x)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打印结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;arrayA : 0xc4200bebf0 , [100 200]
arrayB : 0xc4200bec00 , [100 200]
func Array : 0xc4200bec30 , [100 200]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，三个内存地址都不同，这也就验证了 Go 中数组赋值和函数传参都是值复制的。那这会导致什么问题呢？&lt;/p&gt;
&lt;p&gt;假想每次传参都用数组，那么每次数组都要被复制一遍。如果数组大小有 100万，在64位机器上就需要花费大约 800W 字节，即 8MB 内存。这样会消耗掉大量的内存。于是乎有人想到，函数传参用数组的指针。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	arrayA := []int{100, 200}
	testArrayPoint(&amp;amp;arrayA)   // 1.传数组指针
	arrayB := arrayA[:]
	testArrayPoint(&amp;amp;arrayB)   // 2.传切片
	fmt.Printf(&amp;#34;arrayA : %p , %v\n&amp;#34;, &amp;amp;arrayA, arrayA)
}

func testArrayPoint(x *[]int) {
	fmt.Printf(&amp;#34;func Array : %p , %v\n&amp;#34;, x, *x)
	(*x)[1] += 100
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打印结果:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func Array : 0xc4200b0140 , [100 200]
func Array : 0xc4200b0180 , [100 300]
arrayA : 0xc4200b0140 , [100 400]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这也就证明了数组指针确实到达了我们想要的效果。现在就算是传入10亿的数组，也只需要再栈上分配一个8个字节的内存给指针就可以了。这样更加高效的利用内存，性能也比之前的好。&lt;/p&gt;
&lt;p&gt;不过传指针会有一个弊端，从打印结果可以看到，第一行和第三行指针地址都是同一个，万一原数组的指针指向更改了，那么函数里面的指针指向都会跟着更改。&lt;/p&gt;
&lt;p&gt;切片的优势也就表现出来了。用切片传数组参数，既可以达到节约内存的目的，也可以达到合理处理好共享内存的问题。打印结果第二行就是切片，切片的指针和原来数组的指针是不同的。&lt;/p&gt;
&lt;p&gt;由此我们可以得出结论：&lt;/p&gt;
&lt;p&gt;把第一个大数组传递给函数会消耗很多内存，采用切片的方式传参可以避免上述问题。切片是引用传递，所以它们不需要使用额外的内存并且比使用数组更有效率。&lt;/p&gt;
&lt;p&gt;但是，依旧有反例。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import &amp;#34;testing&amp;#34;

func array() [1024]int {
	var x [1024]int
	for i := 0; i &amp;lt; len(x); i++ {
		x[i] = i
	}
	return x
}

func slice() []int {
	x := make([]int, 1024)
	for i := 0; i &amp;lt; len(x); i++ {
		x[i] = i
	}
	return x
}

func BenchmarkArray(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		array()
	}
}

func BenchmarkSlice(b *testing.B) {
	for i := 0; i &amp;lt; b.N; i++ {
		slice()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们做一次性能测试，并且禁用内联和优化，来观察切片的堆上内存分配的情况。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  go test -bench . -benchmem -gcflags &amp;#34;-N -l&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果比较“令人意外”：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BenchmarkArray-4          500000              3637 ns/op               0 B/op          0 alloc s/op
BenchmarkSlice-4          300000              4055 ns/op            8192 B/op          1 alloc s/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解释一下上述结果，在测试 Array 的时候，用的是4核，循环次数是500000，平均每次执行时间是3637 ns，每次执行堆上分配内存总量是0，分配次数也是0 。&lt;/p&gt;
&lt;p&gt;而切片的结果就“差”一点，同样也是用的是4核，循环次数是300000，平均每次执行时间是4055 ns，但是每次执行一次，堆上分配内存总量是8192，分配次数也是1 。&lt;/p&gt;
&lt;p&gt;这样对比看来，并非所有时候都适合用切片代替数组，因为切片底层数组可能会在堆上分配内存，而且小数组在栈上拷贝的消耗也未必比 make 消耗大。&lt;/p&gt;
&lt;h1 id=&#34;切片上的数据结构&#34;&gt;切片上的数据结构 &lt;a href=&#34;#%e5%88%87%e7%89%87%e4%b8%8a%e7%9a%84%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;切片本身并不是动态数组或者数组指针。它内部实现的数据结构通过指针引用底层数组，设定相关属性将数据读写操作限定在指定的区域内。&lt;strong&gt;切片本身是一个只读对象，其工作机制类似数组指针的一种封装。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;切片（slice）是对数组一个连续片段的引用，所以切片是一个引用类型（因此更类似于 C/C++ 中的数组类型，或者 Python 中的 list 类型）。这个片段可以是整个数组，或者是由起始和终止索引标识的一些项的子集。需要注意的是，终止索引标识的项不包括在切片内。切片提供了一个与指向数组的动态窗口。&lt;/p&gt;
&lt;p&gt;给定项的切片索引可能比相关数组的相同元素的索引小。和数组不同的是，切片的长度可以在运行时修改，最小为 0 最大为相关数组的长度：切片是一个长度可变的数组。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type slice struct {
	array unsafe.Pointer
	len   int
	cap   int
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-s1.jpeg&#34; alt=&#34;slice_内存模型&#34;&gt;&lt;/p&gt;
&lt;p&gt;切片的结构体由3部分构成，Pointer 是指向一个数组的指针，len 代表当前切片的长度，cap 是当前切片的容量。cap 总是大于等于 len 的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-s2.jpeg&#34; alt=&#34;57_3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果想从 slice 中得到一块内存地址，可以这样做：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;s := make([]byte, 200)
ptr := unsafe.Pointer(&amp;amp;s[0])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果反过来呢？从 Go 的内存地址中构造一个 slice。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var ptr unsafe.Pointer
var s1 = struct {
    addr uintptr
    len int
    cap int
}{ptr, length, length}
s := *(*[]byte)(unsafe.Pointer(&amp;amp;s1))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;构造一个虚拟的结构体，把 slice 的数据结构拼出来。&lt;/p&gt;
&lt;p&gt;当然还有更加直接的方法，在 Go 的反射中就存在一个与之对应的数据结构 SliceHeader，我们可以用它来构造一个 slice&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var o []byte
sliceHeader := (*reflect.SliceHeader)((unsafe.Pointer(&amp;amp;o)))
sliceHeader.Cap = length
sliceHeader.Len = length
sliceHeader.Data = uintptr(ptr)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;创建切片&#34;&gt;创建切片 &lt;a href=&#34;#%e5%88%9b%e5%bb%ba%e5%88%87%e7%89%87&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;make 函数允许在运行期动态指定数组长度，绕开了数组类型必须使用编译期常量的限制。&lt;/p&gt;
&lt;p&gt;创建切片有两种形式，make 创建切片，空切片。&lt;/p&gt;
&lt;h2 id=&#34;make-和切片字面量&#34;&gt;make 和切片字面量 &lt;a href=&#34;#make-%e5%92%8c%e5%88%87%e7%89%87%e5%ad%97%e9%9d%a2%e9%87%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func makeslice(et *_type, len, cap int) slice {
	// 根据切片的数据类型，获取切片的最大容量
	maxElements := maxSliceCap(et.size)
    // 比较切片的长度，长度值域应该在[0,maxElements]之间
	if len &amp;lt; 0 || uintptr(len) &amp;gt; maxElements {
		panic(errorString(&amp;#34;makeslice: len out of range&amp;#34;))
	}
    // 比较切片的容量，容量值域应该在[len,maxElements]之间
	if cap &amp;lt; len || uintptr(cap) &amp;gt; maxElements {
		panic(errorString(&amp;#34;makeslice: cap out of range&amp;#34;))
	}
    // 根据切片的容量申请内存
	p := mallocgc(et.size*uintptr(cap), et, true)
    // 返回申请好内存的切片的首地址
	return slice{p, len, cap}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-s3.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图是用 make 函数创建的一个 len = 4， cap = 6 的切片。内存空间申请了6个 int 类型的内存大小。由于 len = 4，所以后面2个暂时访问不到，但是容量还是在的。这时候数组里面每个变量都是0 。&lt;/p&gt;
&lt;p&gt;除了 make 函数可以创建切片以外，字面量也可以创建切片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-s4.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里是用字面量创建的一个 len = 6，cap = 6 的切片，这时候数组里面每个元素的值都初始化完成了。&lt;strong&gt;需要注意的是 [ ] 里面不要写数组的容量，因为如果写了个数以后就是数组了，而不是切片了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-s5.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;还有一种简单的字面量创建切片的方法。如上图。上图就 Slice A 创建出了一个 len = 3，cap = 3 的切片。从原数组的第二位元素(0是第一位)开始切，一直切到第四位为止(不包括第五位)。同理，Slice B 创建出了一个 len = 2，cap = 4 的切片。&lt;/p&gt;
&lt;h2 id=&#34;nil-和空切片&#34;&gt;nil 和空切片 &lt;a href=&#34;#nil-%e5%92%8c%e7%a9%ba%e5%88%87%e7%89%87&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;nil 切片和空切片也是常用的。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var slice []int
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-s6.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;nil 切片被用在很多标准库和内置函数中，描述一个不存在的切片的时候，就需要用到 nil 切片。比如函数在发生异常的时候，返回的切片就是 nil 切片。nil 切片的指针指向 nil。&lt;/p&gt;
&lt;p&gt;空切片一般会用来表示一个空的集合。比如数据库查询，一条结果也没有查到，那么就可以返回一个空切片。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;silce := make( []int , 0 )
slice := []int{ }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-s7.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;空切片和 nil 切片的区别在于，空切片指向的地址不是nil，指向的是一个内存地址，但是它没有分配任何内存空间，即底层元素包含0个元素。&lt;/p&gt;
&lt;p&gt;最后需要说明的一点是。不管是使用 nil 切片还是空切片，对其调用内置函数 append，len 和 cap 的效果都是一样的。&lt;/p&gt;
&lt;h1 id=&#34;切片扩容&#34;&gt;切片扩容 &lt;a href=&#34;#%e5%88%87%e7%89%87%e6%89%a9%e5%ae%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;首先看看源码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func growslice(et *_type, old slice, cap int) slice {
	if raceenabled {
		callerpc := getcallerpc(unsafe.Pointer(&amp;amp;et))
		racereadrangepc(old.array, uintptr(old.len*int(et.size)), callerpc, funcPC(growslice))
	}
	if msanenabled {
		msanread(old.array, uintptr(old.len*int(et.size)))
	}

	if et.size == 0 {
		// 如果新要扩容的容量比原来的容量还要小，这代表要缩容了，那么可以直接报panic了。
		if cap &amp;lt; old.cap {
			panic(errorString(&amp;#34;growslice: cap out of range&amp;#34;))
		}

		// 如果当前切片的大小为0，还调用了扩容方法，那么就新生成一个新的容量的切片返回。
		return slice{unsafe.Pointer(&amp;amp;zerobase), old.len, cap}
	}

    // 这里就是扩容的策略
	newcap := old.cap
	doublecap := newcap + newcap
	if cap &amp;gt; doublecap {
		newcap = cap
	} else {
		if old.len &amp;lt; 1024 {
			newcap = doublecap
		} else {
			// Check 0 &amp;lt; newcap to detect overflow
			// and prevent an infinite loop.
			for 0 &amp;lt; newcap &amp;amp;&amp;amp; newcap &amp;lt; cap {
				newcap += newcap / 4
			}
			// Set newcap to the requested cap when
			// the newcap calculation overflowed.
			if newcap &amp;lt;= 0 {
				newcap = cap
			}
		}
	}

	// 计算新的切片的容量，长度。
	var lenmem, newlenmem, capmem uintptr
	const ptrSize = unsafe.Sizeof((*byte)(nil))
	switch et.size {
	case 1:
		lenmem = uintptr(old.len)
		newlenmem = uintptr(cap)
		capmem = roundupsize(uintptr(newcap))
		newcap = int(capmem)
	case ptrSize:
		lenmem = uintptr(old.len) * ptrSize
		newlenmem = uintptr(cap) * ptrSize
		capmem = roundupsize(uintptr(newcap) * ptrSize)
		newcap = int(capmem / ptrSize)
	default:
		lenmem = uintptr(old.len) * et.size
		newlenmem = uintptr(cap) * et.size
		capmem = roundupsize(uintptr(newcap) * et.size)
		newcap = int(capmem / et.size)
	}

	// 判断非法的值，保证容量是在增加，并且容量不超过最大容量
	if cap &amp;lt; old.cap || uintptr(newcap) &amp;gt; maxSliceCap(et.size) {
		panic(errorString(&amp;#34;growslice: cap out of range&amp;#34;))
	}

	var p unsafe.Pointer
	if et.kind&amp;amp;kindNoPointers != 0 {
		// 在老的切片后面继续扩充容量
		p = mallocgc(capmem, nil, false)
		// 将 lenmem 这个多个 bytes 从 old.array地址 拷贝到 p 的地址处
		memmove(p, old.array, lenmem)
		// 先将 P 地址加上新的容量得到新切片容量的地址，然后将新切片容量地址后面的 capmem-newlenmem 个 bytes 这块内存初始化。为之后继续 append() 操作腾出空间。
		memclrNoHeapPointers(add(p, newlenmem), capmem-newlenmem)
	} else {
		// 重新申请新的数组给新切片
		// 重新申请 capmen 这个大的内存地址，并且初始化为0值
		p = mallocgc(capmem, et, true)
		if !writeBarrier.enabled {
			// 如果还不能打开写锁，那么只能把 lenmem 大小的 bytes 字节从 old.array 拷贝到 p 的地址处
			memmove(p, old.array, lenmem)
		} else {
			// 循环拷贝老的切片的值
			for i := uintptr(0); i &amp;lt; lenmem; i += et.size {
				typedmemmove(et, add(p, i), add(old.array, i))
			}
		}
	}
	// 返回最终新切片，容量更新为最新扩容之后的容量
	return slice{p, old.len, newcap}
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;扩容策略&#34;&gt;扩容策略 &lt;a href=&#34;#%e6%89%a9%e5%ae%b9%e7%ad%96%e7%95%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	slice := []int{10, 20, 30, 40}
	newSlice := append(slice, 50)
	fmt.Printf(&amp;#34;Before slice = %v, Pointer = %p, len = %d, cap = %d\n&amp;#34;, slice, &amp;amp;slice, len(slice), cap(slice))
	fmt.Printf(&amp;#34;Before newSlice = %v, Pointer = %p, len = %d, cap = %d\n&amp;#34;, newSlice, &amp;amp;newSlice, len(newSlice), cap(newSlice))
	newSlice[1] += 10
	fmt.Printf(&amp;#34;After slice = %v, Pointer = %p, len = %d, cap = %d\n&amp;#34;, slice, &amp;amp;slice, len(slice), cap(slice))
	fmt.Printf(&amp;#34;After newSlice = %v, Pointer = %p, len = %d, cap = %d\n&amp;#34;, newSlice, &amp;amp;newSlice, len(newSlice), cap(newSlice))
}
//输出结果
Before slice = [10 20 30 40], Pointer = 0xc4200b0140, len = 4, cap = 4
Before newSlice = [10 20 30 40 50], Pointer = 0xc4200b0180, len = 5, cap = 8
After slice = [10 20 30 40], Pointer = 0xc4200b0140, len = 4, cap = 4
After newSlice = [10 30 30 40 50], Pointer = 0xc4200b0180, len = 5, cap = 8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用图表示&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-s8.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从图上我们可以很容易的看出，新的切片和之前的切片已经不同了，因为新的切片更改了一个值，并没有影响到原来的数组，新切片指向的数组是一个全新的数组。并且 cap 容量也发生了变化。这之间究竟发生了什么呢？&lt;/p&gt;
&lt;p&gt;Go 中切片扩容的策略是这样的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先判断，如果新申请容量（cap）大于2倍的旧容量（old.cap），最终容量（newcap）就是新申请的容量（cap）&lt;/li&gt;
&lt;li&gt;否则判断，如果旧切片的长度小于1024，则最终容量(newcap)就是旧容量(old.cap)的两倍，即（newcap=doublecap）&lt;/li&gt;
&lt;li&gt;否则判断，如果旧切片长度大于等于1024，则最终容量（newcap）从旧容量（old.cap）开始循环增加原来的 1/4，即（newcap=old.cap,for {newcap += newcap/4}）直到最终容量（newcap）大于等于新申请的容量(cap)，即（newcap &amp;gt;= cap）&lt;/li&gt;
&lt;li&gt;如果最终容量（cap）计算值溢出，则最终容量（cap）就是新申请容量（cap）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：扩容扩大的容量都是针对原来的容量而言的，而不是针对原来数组的长度而言的。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;新数组-or-老数组-&#34;&gt;新数组 or 老数组 ？ &lt;a href=&#34;#%e6%96%b0%e6%95%b0%e7%bb%84-or-%e8%80%81%e6%95%b0%e7%bb%84-&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;再谈谈扩容之后的数组一定是新的么？这个不一定，分两种情况。&lt;/p&gt;
&lt;p&gt;情况一：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	array := [4]int{10, 20, 30, 40}
	slice := array[0:2]
	newSlice := append(slice, 50)
	fmt.Printf(&amp;#34;Before slice = %v, Pointer = %p, len = %d, cap = %d\n&amp;#34;, slice, &amp;amp;slice, len(slice), cap(slice))
	fmt.Printf(&amp;#34;Before newSlice = %v, Pointer = %p, len = %d, cap = %d\n&amp;#34;, newSlice, &amp;amp;newSlice, len(newSlice), cap(newSlice))
	newSlice[1] += 10
	fmt.Printf(&amp;#34;After slice = %v, Pointer = %p, len = %d, cap = %d\n&amp;#34;, slice, &amp;amp;slice, len(slice), cap(slice))
	fmt.Printf(&amp;#34;After newSlice = %v, Pointer = %p, len = %d, cap = %d\n&amp;#34;, newSlice, &amp;amp;newSlice, len(newSlice), cap(newSlice))
	fmt.Printf(&amp;#34;After array = %v\n&amp;#34;, array)
}

//输出
Before slice = [10 20], Pointer = 0xc4200c0040, len = 2, cap = 4
Before newSlice = [10 20 50], Pointer = 0xc4200c0060, len = 3, cap = 4
After slice = [10 30], Pointer = 0xc4200c0040, len = 2, cap = 4
After newSlice = [10 30 50], Pointer = 0xc4200c0060, len = 3, cap = 4
After array = [10 30 50 40]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;把上述过程用图表示出来，如下图。
&lt;img src=&#34;https://abnerxc.github.io/img/go-s9.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过打印的结果，我们可以看到，在这种情况下，扩容以后并没有新建一个新的数组，扩容前后的数组都是同一个，这也就导致了新的切片修改了一个值，也影响到了老的切片了。并且 append() 操作也改变了原来数组里面的值。一个 append() 操作影响了这么多地方，如果原数组上有多个切片，那么这些切片都会被影响！无意间就产生了莫名的 bug！&lt;/p&gt;
&lt;p&gt;这种情况，由于原数组还有容量可以扩容，所以执行 append() 操作以后，会在原数组上直接操作，所以这种情况下，扩容以后的数组还是指向原来的数组。&lt;/p&gt;
&lt;p&gt;这种情况也极容易出现在字面量创建切片时候，第三个参数 cap 传值的时候，如果用字面量创建切片，cap 并不等于指向数组的总容量，那么这种情况就会发生。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;slice := array[1:2:3]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;上面这种情况非常危险，极度容易产生 bug 。&lt;/strong&gt;
建议用字面量创建切片的时候，cap 的值一定要保持清醒，避免共享原数组导致的 bug。&lt;/p&gt;
&lt;p&gt;情况二：&lt;/p&gt;
&lt;p&gt;情况二其实就是在扩容策略里面举的例子，在那个例子中之所以生成了新的切片，是因为原来数组的容量已经达到了最大值，再想扩容， Go 默认会先开一片内存区域，把原来的值拷贝过来，然后再执行 append() 操作。这种情况丝毫不影响原数组。&lt;/p&gt;
&lt;p&gt;所以建议尽量避免情况一，尽量使用情况二，避免 bug 产生。
举例：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {

    s1 := []int{1, 2, 3}
    s2 := s1[1:]
    s2[1] = 4
    fmt.Println(s1)
    s2 = append(s2, 5, 6, 7)
    fmt.Println(s1)
}
//output 
[1 2 4]
[1 2 4]
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;切片拷贝&#34;&gt;切片拷贝 &lt;a href=&#34;#%e5%88%87%e7%89%87%e6%8b%b7%e8%b4%9d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Slice 中拷贝方法有2个。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func slicecopy(to, fm slice, width uintptr) int {
	// 如果源切片或者目标切片有一个长度为0，那么就不需要拷贝，直接 return 
	if fm.len == 0 || to.len == 0 {
		return 0
	}
	// n 记录下源切片或者目标切片较短的那一个的长度
	n := fm.len
	if to.len &amp;lt; n {
		n = to.len
	}
	// 如果入参 width = 0，也不需要拷贝了，返回较短的切片的长度
	if width == 0 {
		return n
	}
	// 如果开启了竞争检测
	if raceenabled {
		callerpc := getcallerpc(unsafe.Pointer(&amp;amp;to))
		pc := funcPC(slicecopy)
		racewriterangepc(to.array, uintptr(n*int(width)), callerpc, pc)
		racereadrangepc(fm.array, uintptr(n*int(width)), callerpc, pc)
	}
	// 如果开启了 The memory sanitizer (msan)
	if msanenabled {
		msanwrite(to.array, uintptr(n*int(width)))
		msanread(fm.array, uintptr(n*int(width)))
	}

	size := uintptr(n) * width
	if size == 1 { 
		// TODO: is this still worth it with new memmove impl?
		// 如果只有一个元素，那么指针直接转换即可
		*(*byte)(to.array) = *(*byte)(fm.array) // known to be a byte pointer
	} else {
		// 如果不止一个元素，那么就把 size 个 bytes 从 fm.array 地址开始，拷贝到 to.array 地址之后
		memmove(to.array, fm.array, size)
	}
	return n
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这个方法中，slicecopy 方法会把源切片值(即 fm Slice )中的元素复制到目标切片(即 to Slice )中，并返回被复制的元素个数，copy 的两个类型必须一致。slicecopy 方法最终的复制结果取决于较短的那个切片，当较短的切片复制完成，整个复制过程就全部完成了。
&lt;img src=&#34;https://abnerxc.github.io/img/go-s10.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;说到拷贝，切片中有一个需要注意的问题。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	slice := []int{10, 20, 30, 40}
	for index, value := range slice {
		fmt.Printf(&amp;#34;value = %d , value-addr = %x , slice-addr = %x\n&amp;#34;, value, &amp;amp;value, &amp;amp;slice[index])
	}
}
//输出
value = 10 , value-addr = c4200aedf8 , slice-addr = c4200b0320
value = 20 , value-addr = c4200aedf8 , slice-addr = c4200b0328
value = 30 , value-addr = c4200aedf8 , slice-addr = c4200b0330
value = 40 , value-addr = c4200aedf8 , slice-addr = c4200b0338
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/go-s11.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于 Value 是值拷贝的，并非引用传递，所以直接改 Value 是达不到更改原切片值的目的的，需要通过 &amp;amp;slice[index] 获取真实的地址。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go-channel总结</title>
      <link>https://abnerxc.github.io/go/channel%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 15 Mar 2021 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/channel%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;channel的使用场景&#34;&gt;channel的使用场景 &lt;a href=&#34;#channel%e7%9a%84%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;把channel用在数据流动的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消息传递、消息过滤&lt;/li&gt;
&lt;li&gt;信号广播&lt;/li&gt;
&lt;li&gt;事件订阅与广播&lt;/li&gt;
&lt;li&gt;请求、响应转发&lt;/li&gt;
&lt;li&gt;任务分发&lt;/li&gt;
&lt;li&gt;结果汇总&lt;/li&gt;
&lt;li&gt;并发控制&lt;/li&gt;
&lt;li&gt;同步与异步&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;channel的基本操作和注意事项&#34;&gt;channel的基本操作和注意事项 &lt;a href=&#34;#channel%e7%9a%84%e5%9f%ba%e6%9c%ac%e6%93%8d%e4%bd%9c%e5%92%8c%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;channel 存在3种状态&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nil,未初始化，刚刚申明或者手动复制为nil&lt;/li&gt;
&lt;li&gt;active，正常运行中的可读可写&lt;/li&gt;
&lt;li&gt;closed,关闭时，&lt;strong&gt;千万不要认为关闭以后，channel的值是nil&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;channel 可进行3种操作&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读&lt;/li&gt;
&lt;li&gt;写&lt;/li&gt;
&lt;li&gt;关闭&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;3种状态存在9种情况&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;nil的channel&lt;/th&gt;
          &lt;th&gt;正常channel&lt;/th&gt;
          &lt;th&gt;已关闭channel&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;lt;- ch&lt;/td&gt;
          &lt;td&gt;阻塞&lt;/td&gt;
          &lt;td&gt;成功or阻塞&lt;/td&gt;
          &lt;td&gt;读到零值&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ch &amp;lt;-&lt;/td&gt;
          &lt;td&gt;阻塞&lt;/td&gt;
          &lt;td&gt;成功or阻塞&lt;/td&gt;
          &lt;td&gt;panic&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;close(ch)&lt;/td&gt;
          &lt;td&gt;panic&lt;/td&gt;
          &lt;td&gt;成功&lt;/td&gt;
          &lt;td&gt;panic&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;对于nil通道的情况，也并非完全遵循上表，有1个特殊场景：当nil的通道在select的某个case中时，这个case会阻塞，但不会造成死锁&lt;/p&gt;
&lt;h1 id=&#34;使用for-range读channel&#34;&gt;使用for range读channel &lt;a href=&#34;#%e4%bd%bf%e7%94%a8for-range%e8%af%bbchannel&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当需要不断从channel读取数据时。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用for-range读取channel，这样既安全又便利，当channel关闭时，for循环会自动退出，无需主动监测channel是否关闭，可以防止读取已经关闭的channel，造成读到数据为通道所存储的数据类型的零值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for x := range ch{
    fmt.Println(x)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用vok---ch--select操作判断channel是否关闭&#34;&gt;使用v,ok := &amp;lt;-ch + select操作判断channel是否关闭 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8vok---ch--select%e6%93%8d%e4%bd%9c%e5%88%a4%e6%96%adchannel%e6%98%af%e5%90%a6%e5%85%b3%e9%97%ad&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;v,ok := &amp;lt;-ch + select&lt;/code&gt;操作判断channel是否关闭&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ok的结果和含义：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- `true`：读到通道数据，不确定是否关闭，可能channel还有保存的数据，但channel已关闭。
- `false`：通道关闭，无数据读到。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从关闭的channel读值读到是channel所传递数据类型的零值，这个零值有可能是发送者发送的，也可能是channel关闭了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_, ok := &amp;lt;-ch&lt;/code&gt;与select配合使用的，当ok为false时，代表了channel已经close。&lt;/p&gt;
&lt;p&gt;下面解释原因，&lt;code&gt;_,ok := &amp;lt;-ch&lt;/code&gt;对应的函数是&lt;code&gt;func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool)&lt;/code&gt;，入参block含义是当前goroutine是否可阻塞，当block为false代表的是select操作，不可阻塞当前goroutine的在channel操作，否则是普通操作（即&lt;code&gt;_, ok&lt;/code&gt;不在select中）。返回值selected代表当前操作是否成功，主要为select服务，返回**received代表是否从channel读到有效值。**它有3种返回值情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block为false，即执行select时，如果channel为空，返回(false,false)，代表select操作失败，没接收到值。&lt;/li&gt;
&lt;li&gt;否则，如果channel已经关闭，并且没有数据，ep即接收数据的变量设置为零值，返回(true,false)，代表select操作成功，但channel已关闭，没读到有效值。&lt;/li&gt;
&lt;li&gt;否则，其他读到有效数据的情况，返回(true,ture)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们考虑_, ok := &amp;lt;-ch和select结合使用的情况。&lt;/p&gt;
&lt;p&gt;情况1：当chanrecv返回(false,false)时，本质是select操作失败了，所以相关的case会阻塞，不会执行，比如下面的代码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
func main() {
	ch := make(chan int)
	select {
	case v, ok := &amp;lt;-ch:
		fmt.Printf(&amp;#34;v: %v, ok: %v\n&amp;#34;, v, ok)
	default:
		fmt.Println(&amp;#34;nothing&amp;#34;)
	}
}

// 结果：
// nothing
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;情况2：下面的结果会是零值和false：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	ch := make(chan int)

	// 增加关闭
	close(ch)

	select {
	case v, ok := &amp;lt;-ch:
		fmt.Printf(&amp;#34;v: %v, ok: %v\n&amp;#34;, v, ok)
	}
}

// v: 0, ok: false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;情况3的received为true，即_, ok中的ok为true，不做讨论了，只讨论ok为false的情况。&lt;/p&gt;
&lt;p&gt;最后ok为false的时候，只有情况2，此时channel必然已经关闭，我们便可以在select中用ok判断channel是否已经关闭。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	ch := make(chan int, 1)

	// 发送1个数据关闭channel
	ch &amp;lt;- 1
	close(ch)
	print(&amp;#34;close channel\n&amp;#34;)

	// 不停读数据直到channel没有有效数据
	for {
		select {
		case v, ok := &amp;lt;-ch:
			print(&amp;#34;v: &amp;#34;, v, &amp;#34;, ok:&amp;#34;, ok, &amp;#34;\n&amp;#34;)
			if !ok {
				print(&amp;#34;channel is close\n&amp;#34;)
				return
			}	
		default:
			print(&amp;#34;nothing\n&amp;#34;)
		}
	}
}

// 结果
// close channel
// v: 1, ok:true
// v: 0, ok:false
// channel is close
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用select处理多个channel&#34;&gt;使用select处理多个channel &lt;a href=&#34;#%e4%bd%bf%e7%94%a8select%e5%a4%84%e7%90%86%e5%a4%9a%e4%b8%aachannel&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;场景
需要对多个通道进行同时处理，但只处理最先发生的channel时&lt;/li&gt;
&lt;li&gt;原理
&lt;code&gt;select&lt;/code&gt;可以同时监控多个通道的情况，只处理未阻塞的case。&lt;strong&gt;当通道为nil时，对应的case永远为阻塞，无论读写。特殊关注：普通情况下，对nil的通道写操作是要panic的。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 分配job时，如果收到关闭的通知则退出，不分配job
func (h *Handler) handle(job *Job) {
    select {
    case h.jobCh&amp;lt;-job:
        return 
    case &amp;lt;-h.stopCh:
        return
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用channel的声明控制读写权限&#34;&gt;使用channel的声明控制读写权限 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8channel%e7%9a%84%e5%a3%b0%e6%98%8e%e6%8e%a7%e5%88%b6%e8%af%bb%e5%86%99%e6%9d%83%e9%99%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;场景
协程对某个通道只读或只写时&lt;/p&gt;
&lt;p&gt;目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使代码更易读、更易维护，&lt;/li&gt;
&lt;li&gt;防止只读协程对通道进行写数据，但通道已关闭，造成panic。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果协程对某个channel只有写操作，则这个channel声明为只写。&lt;/li&gt;
&lt;li&gt;如果协程对某个channel只有读操作，则这个channe声明为只读。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 只有generator进行对outCh进行写操作，返回声明
// &amp;lt;-chan int，可以防止其他协程乱用此通道，造成隐藏bug
func generator(int n) &amp;lt;-chan int {
    outCh := make(chan int)
    go func(){
        for i:=0;i&amp;lt;n;i++{
            outCh&amp;lt;-i
        }
    }()
    return outCh
}

// consumer只读inCh的数据，声明为&amp;lt;-chan int
// 可以防止它向inCh写数据
func consumer(inCh &amp;lt;-chan int) {
    for x := range inCh {
        fmt.Println(x)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用缓冲channel增强并发&#34;&gt;使用缓冲channel增强并发 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e7%bc%93%e5%86%b2channel%e5%a2%9e%e5%bc%ba%e5%b9%b6%e5%8f%91&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;场景
异步&lt;/li&gt;
&lt;li&gt;原理
有缓冲通道可供多个协程同时处理，在一定程度可提高并发性。&lt;/li&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 无缓冲
ch1 := make(chan int)
ch2 := make(chan int, 0)
// 有缓冲
ch3 := make(chan int, 1)
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 使用5个`do`协程同时处理输入数据
func test() {
    inCh := generator(100)
    outCh := make(chan int, 10)

    for i := 0; i &amp;lt; 5; i++ {
        go do(inCh, outCh)
    }

    for r := range outCh {
        fmt.Println(r)
    }
}

func do(inCh &amp;lt;-chan int, outCh chan&amp;lt;- int) {
    for v := range inCh {
        outCh &amp;lt;- v * v
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;为操作加上超时&#34;&gt;为操作加上超时 &lt;a href=&#34;#%e4%b8%ba%e6%93%8d%e4%bd%9c%e5%8a%a0%e4%b8%8a%e8%b6%85%e6%97%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;场景
异步&lt;/li&gt;
&lt;li&gt;原理
使用&lt;code&gt;select&lt;/code&gt;和&lt;code&gt;time.After&lt;/code&gt;，看操作和定时器哪个先返回，处理先完成的，就达到了超时控制的效果&lt;/li&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
func doWithTimeOut(timeout time.Duration) (int, error) {
	select {
	case ret := &amp;lt;-do():
		return ret, nil
	case &amp;lt;-time.After(timeout):
		return 0, errors.New(&amp;#34;timeout&amp;#34;)
	}
}

func do() &amp;lt;-chan int {
	outCh := make(chan int)
	go func() {
		// do work
	}()
	return outCh
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用closech关闭所有下游协程&#34;&gt;使用&lt;code&gt;close(ch)&lt;/code&gt;关闭所有下游协程 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8closech%e5%85%b3%e9%97%ad%e6%89%80%e6%9c%89%e4%b8%8b%e6%b8%b8%e5%8d%8f%e7%a8%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;场景
退出时，显示通知所有协程退出&lt;/li&gt;
&lt;li&gt;原理
所有读ch的协程都会收到close(ch)的信号&lt;/li&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
func (h *Handler) Stop() {
    close(h.stopCh)

    // 可以使用WaitGroup等待所有协程退出
}

// 收到停止后，不再处理请求
func (h *Handler) loop() error {
    for {
        select {
        case req := &amp;lt;-h.reqCh:
            go handle(req)
        case &amp;lt;-h.stopCh:
            return
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用chan-struct作为信号channel&#34;&gt;使用chan struct{}作为信号channel &lt;a href=&#34;#%e4%bd%bf%e7%94%a8chan-struct%e4%bd%9c%e4%b8%ba%e4%bf%a1%e5%8f%b7channel&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;场景
使用channel传递信号，而不是传递数据时&lt;/li&gt;
&lt;li&gt;原理
没数据需要传递时，传递空struct&lt;/li&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 上例中的Handler.stopCh就是一个例子，stopCh并不需要传递任何数据
// 只是要给所有协程发送退出的信号
type Handler struct {
    stopCh chan struct{}
    reqCh chan *Request
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用channel传递结构体的指针而非结构体&#34;&gt;使用channel传递结构体的指针而非结构体 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8channel%e4%bc%a0%e9%80%92%e7%bb%93%e6%9e%84%e4%bd%93%e7%9a%84%e6%8c%87%e9%92%88%e8%80%8c%e9%9d%9e%e7%bb%93%e6%9e%84%e4%bd%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;场景
使用channel传递结构体数据时&lt;/li&gt;
&lt;li&gt;原理
channel本质上传递的是数据的拷贝，拷贝的数据越小传输效率越高，传递结构体指针，比传递结构体更高效&lt;/li&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;reqCh chan *Request

// 好过
reqCh chan Request
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;使用channel传递channel&#34;&gt;使用channel传递channel &lt;a href=&#34;#%e4%bd%bf%e7%94%a8channel%e4%bc%a0%e9%80%92channel&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;场景
使用场景有点多，通常是用来获取结果。&lt;/li&gt;
&lt;li&gt;原理
channel可以用来传递变量，channel自身也是变量，可以传递自己。&lt;/li&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
package main

import (
	&amp;#34;fmt&amp;#34;
	&amp;#34;math/rand&amp;#34;
	&amp;#34;sync&amp;#34;
	&amp;#34;time&amp;#34;
)

func main() {
	reqs := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}

	// 存放结果的channel的channel
	outs := make(chan chan int, len(reqs))
	var wg sync.WaitGroup
	wg.Add(len(reqs))
	for _, x := range reqs {
		o := handle(&amp;amp;wg, x)
		outs &amp;lt;- o
	}

	go func() {
		wg.Wait()
		close(outs)
	}()

	// 读取结果，结果有序
	for o := range outs {
		fmt.Println(&amp;lt;-o)
	}
}

// handle 处理请求，耗时随机模拟
func handle(wg *sync.WaitGroup, a int) chan int {
	out := make(chan int)
	go func() {
		time.Sleep(time.Duration(rand.Intn(3)) * time.Second)
		out &amp;lt;- a
		wg.Done()
	}()
	return out
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;本文收集来源： &lt;a href=&#34;http://lessisbetter.site/2019/01/20/golang-channel-all-usage/&#34;&gt;http://lessisbetter.site/2019/01/20/golang-channel-all-usage/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Go-context详解</title>
      <link>https://abnerxc.github.io/go/context%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Mon, 15 Mar 2021 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/context%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;背景&#34;&gt;背景 &lt;a href=&#34;#%e8%83%8c%e6%99%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;golang在1.6.2的时候还没有自己的context，在1.7的版本中就把golang.org/x/net/context包被加入到了官方的库中。golang 的 Context包，是专门用来简化对于处理单个请求的多个goroutine之间与请求域的数据、取消信号、截止时间等相关操作，这些操作可能涉及多个 API 调用。&lt;/p&gt;
&lt;p&gt;比如有一个网络请求Request，每个Request都需要开启一个goroutine做一些事情，这些goroutine又可能会开启其他的goroutine。这样的话， 我们就可以通过Context，来跟踪这些goroutine，并且通过Context来控制他们的目的，这就是Go语言为我们提供的Context，中文可以称之为“上下文”。&lt;/p&gt;
&lt;p&gt;另外一个实际例子是，在Go服务器程序中，每个请求都会有一个goroutine去处理。然而，处理程序往往还需要创建额外的goroutine去访问后端资源，比如数据库、RPC服务等。由于这些goroutine都是在处理同一个请求，所以它们往往需要访问一些共享的资源，比如用户身份信息、认证token、请求截止时间等。而且如果请求超时或者被取消后，所有的goroutine都应该马上退出并且释放相关的资源。这种情况也需要用Context来为我们取消掉所有goroutine&lt;/p&gt;
&lt;p&gt;如果要使用可以通过 go get golang.org/x/net/context 命令获取这个包。&lt;/p&gt;
&lt;h1 id=&#34;context原理&#34;&gt;Context原理 &lt;a href=&#34;#context%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Context 的调用应该是链式的，通过&lt;code&gt;WithCancel&lt;/code&gt;，&lt;code&gt;WithDeadline&lt;/code&gt;，&lt;code&gt;WithTimeout&lt;/code&gt;或&lt;code&gt;WithValue&lt;/code&gt;派生出新的 Context.当父 Context 被取消时，其派生的所有 Context 都将取消.&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;context.WithXXX&lt;/code&gt;都将返回新的 Context 和 CancelFunc.调用 CancelFunc 将取消子代，移除父代对子代的引用，并且停止所有定时器.未能调用 CancelFunc 将泄漏子代，直到父代被取消或定时器触发.go vet工具检查所有流程控制路径上使用 CancelFuncs.&lt;/p&gt;
&lt;h1 id=&#34;遵循规则&#34;&gt;遵循规则 &lt;a href=&#34;#%e9%81%b5%e5%be%aa%e8%a7%84%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;遵循以下规则，以保持包之间的接口一致，并启用静态分析工具以检查上下文传播.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不要将 Contexts 放入结构体，相反&lt;code&gt;context&lt;/code&gt;应该作为第一个参数传入，命名为&lt;code&gt;ctx. func DoSomething（ctx context.Context，arg Arg）error { // ... use ctx ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;即使函数允许，也不要传入&lt;code&gt;nil&lt;/code&gt;的 Context.如果不知道用哪种 Context，可以使用&lt;code&gt;context.TODO()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;使用context的Value相关方法只应该用于在程序和接口中传递的和请求相关的元数据，不要用它来传递一些可选的参数.&lt;/li&gt;
&lt;li&gt;相同的 Context 可以传递给在不同的goroutine；Context 是并发安全的.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;context包&#34;&gt;Context包 &lt;a href=&#34;#context%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Context结构&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Context interface {
    // 在Context超时或取消时（即结束了）返回一个关闭的channel
    // 即如果当前Context超时或取消时，Done方法会返回一个channel，然后其他地方就可以通过判断Done方法是否有返回（channel），如果有则说明Context已结束
    // 故其可以作为广播通知其他相关方本Context已结束，请做相关处理.
    Done() &amp;lt;-chan struct{}

    // 返回Context取消的原因
    Err() error

    // 返回Context的超时时间（超时返回场景）
    Deadline() (deadline time.Time, ok bool)

    // 值返回与键关联的值，如果没有则返回nil。
    Value(key interface{}) interface{}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所有方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func Background() Context
func TODO() Context

func WithCancel(parent Context) (ctx Context, cancel CancelFunc)
func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)
func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)
func WithValue(parent Context, key, val interface{}) Context
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面可以看到Context是一个接口，想要使用就得实现其方法.在context包内部已经为我们实现好了两个空的Context，可以通过调用Background()和TODO()方法获取.一般的将它们作为Context的根，往下派生.&lt;/p&gt;
&lt;h1 id=&#34;withcancel-例子&#34;&gt;WithCancel 例子 &lt;a href=&#34;#withcancel-%e4%be%8b%e5%ad%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;WithCancel 以一个新的 Done channel 返回一个父 Context 的拷贝.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; func WithCancel(parent Context) (ctx Context, cancel CancelFunc) {
         c := newCancelCtx(parent)
         propagateCancel(parent, &amp;amp;c)
         return &amp;amp;c, func() { c.cancel(true, Canceled) }
     }
     
     // newCancelCtx returns an initialized cancelCtx.
     func newCancelCtx(parent Context) cancelCtx {
         return cancelCtx{
             Context: parent,
             done:    make(chan struct{}),
         }
     }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此示例演示使用一个可取消的上下文，以防止 goroutine 泄漏.示例函数结束时，defer 调用 cancel 方法，gen goroutine 将返回而不泄漏.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
    &amp;#34;context&amp;#34;
    &amp;#34;fmt&amp;#34;
)

func main() {
    gen := func(ctx context.Context) &amp;lt;-chan int {
        dst := make(chan int)
        n := 1
        go func() {
            for {
                select {
                case &amp;lt;-ctx.Done():
                    return // returning not to leak the goroutine
                case dst &amp;lt;- n:
                    n++
                }
            }
        }()
        return dst
    }

    ctx, cancel := context.WithCancel(context.Background())
    defer cancel() // cancel when we are finished consuming integers

    for n := range gen(ctx) {
        fmt.Println(n)
        if n == 5 {
            break
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;withdeadline-例子&#34;&gt;WithDeadline 例子 &lt;a href=&#34;#withdeadline-%e4%be%8b%e5%ad%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc) {
         if cur, ok := parent.Deadline(); ok &amp;amp;&amp;amp; cur.Before(deadline) {
             // The current deadline is already sooner than the new one.
             return WithCancel(parent)
         }
         c := &amp;amp;timerCtx{
             cancelCtx: newCancelCtx(parent),
             deadline:  deadline,
         }
   ......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以清晰的看到，当派生出的子 Context 的deadline在父Context之后，直接返回了一个父Context的拷贝.故语义上等效为父.&lt;/p&gt;
&lt;p&gt;WithDeadline 的最后期限调整为不晚于 d 返回父上下文的副本.如果父母的截止日期已经早于 d，WithDeadline （父，d） 是在语义上等效为父.返回的上下文完成的通道关闭的最后期限期满后，返回的取消函数调用时，或当父上下文完成的通道关闭，以先发生者为准.&lt;/p&gt;
&lt;p&gt;看看官方的例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
    &amp;#34;context&amp;#34;
    &amp;#34;fmt&amp;#34;
    &amp;#34;time&amp;#34;
)

func main() {
    d := time.Now().Add(50 * time.Millisecond)
    ctx, cancel := context.WithDeadline(context.Background(), d)

    //即使ctx将会过期，还是最好将其调用
    //在任何情况下都具有取消功能。 否则可能会使
    //上下文及其父对象的生存时间超出了必要。
    defer cancel()

    select {
    case &amp;lt;-time.After(1 * time.Second):
        fmt.Println(&amp;#34;overslept&amp;#34;)
    case &amp;lt;-ctx.Done():
        fmt.Println(ctx.Err())
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;withtimeout-例子&#34;&gt;WithTimeout 例子 &lt;a href=&#34;#withtimeout-%e4%be%8b%e5%ad%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc) {
         return WithDeadline(parent, time.Now().Add(timeout))
     }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;官方例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
    &amp;#34;context&amp;#34;
    &amp;#34;fmt&amp;#34;
    &amp;#34;time&amp;#34;
)

func main() {
    // Pass a context with a timeout to tell a blocking function that it
    // should abandon its work after the timeout elapses.
    ctx, cancel := context.WithTimeout(context.Background(), 50*time.Millisecond)
    defer cancel()

    select {
    case &amp;lt;-time.After(1 * time.Second):
        fmt.Println(&amp;#34;overslept&amp;#34;)
    case &amp;lt;-ctx.Done():
        fmt.Println(ctx.Err()) // prints &amp;#34;context deadline exceeded&amp;#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;withvalue&#34;&gt;WithValue &lt;a href=&#34;#withvalue&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  func WithValue(parent Context, key, val interface{}) Context {
         if key == nil {
             panic(&amp;#34;nil key&amp;#34;)
         }
         if !reflect.TypeOf(key).Comparable() {
             panic(&amp;#34;key is not comparable&amp;#34;)
         }
         return &amp;amp;valueCtx{parent, key, val}
     }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;WithValue 返回的父与键关联的值在 val 的副本.&lt;/p&gt;
&lt;p&gt;使用上下文值仅为过渡进程和 Api 的请求范围的数据，而不是将可选参数传递给函数.&lt;/p&gt;
&lt;p&gt;提供的键必须是可比性和应该不是字符串类型或任何其他内置的类型以避免包使用的上下文之间的碰撞.WithValue 用户应该定义自己的键的类型.为了避免分配分配给接口 {} 时，上下文键经常有具体类型结构 {}.另外，导出的上下文关键变量静态类型应该是一个指针或接口.&lt;/p&gt;
&lt;p&gt;看看官方例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
    &amp;#34;context&amp;#34;
    &amp;#34;fmt&amp;#34;
)

func main() {
    type favContextKey string

    f := func(ctx context.Context, k favContextKey) {
        if v := ctx.Value(k); v != nil {
            fmt.Println(&amp;#34;found value:&amp;#34;, v)
            return
        }
        fmt.Println(&amp;#34;key not found:&amp;#34;, k)
    }

    k := favContextKey(&amp;#34;language&amp;#34;)
    ctx := context.WithValue(context.Background(), k, &amp;#34;Go&amp;#34;)

    f(ctx, k)
    f(ctx, favContextKey(&amp;#34;color&amp;#34;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;文章来源：https://mojotv.cn/2019/06/26/golang-context&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>frida教程</title>
      <link>https://abnerxc.github.io/android/frida%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 25 Jan 2021 22:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/android/frida%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;frida教程&#34;&gt;frida教程 &lt;a href=&#34;#frida%e6%95%99%e7%a8%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;frida&#34;&gt;frida &lt;a href=&#34;#frida&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;命令：&lt;code&gt;pip install frida&lt;/code&gt;  , 下载地址：https://github.com/frida/frida&lt;/li&gt;
&lt;li&gt;命令：&lt;code&gt;pip install frida-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载：frida-server ，查看CPU架构 &lt;code&gt;adb shell getprop ro.product.cpu.abi&lt;/code&gt;，下载地址：https:github.com/frida/frida/releases&lt;/li&gt;
&lt;li&gt;升级：&lt;code&gt;pip install -U frida frida-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;卸载  &lt;code&gt;pip uninstall frida frida-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装指定版本 &lt;code&gt;pip install frida==14.2.18  &amp;amp;&amp;amp;  pip install frida-tools==9.2.4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;连接设备&#34;&gt;连接设备 &lt;a href=&#34;#%e8%bf%9e%e6%8e%a5%e8%ae%be%e5%a4%87&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;模拟器&#34;&gt;模拟器 &lt;a href=&#34;#%e6%a8%a1%e6%8b%9f%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;命令：&lt;code&gt;adb kill-server &amp;amp;&amp;amp; adb start-server &amp;amp;&amp;amp;  adb devices&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模拟器打开&lt;code&gt;USB调试&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;adb connect 127.0.0.1:21503(逍遥模拟器端口)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;真机&#34;&gt;真机 &lt;a href=&#34;#%e7%9c%9f%e6%9c%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;命令：&lt;code&gt;adb kill-server &amp;amp;&amp;amp; adb start-server &amp;amp;&amp;amp;  adb devices&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;打开&lt;code&gt;USB调试&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;启动frida-server&#34;&gt;启动frida-server &lt;a href=&#34;#%e5%90%af%e5%8a%a8frida-server&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;上传文件：&lt;code&gt;adb push frida-server&lt;/code&gt; 到路径 &lt;code&gt;/data/local/tmp&lt;/code&gt; 并修改权限&lt;code&gt;chmod +x frida-server&lt;/code&gt;，运行即可&lt;/li&gt;
&lt;li&gt;端口转发：&lt;code&gt;adb forward tcp:27042 tcp:27042&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;验证：&lt;code&gt;frida-ps -R&lt;/code&gt;验证frida是否正常获取远程设备进程&lt;/li&gt;
&lt;li&gt;脚本注入：&lt;code&gt;frida -U -l hookssl.js -f com.yiban.app --no-pause&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改默认端口启动&lt;code&gt;frida-server -l 0.0.0.0:1234&lt;/code&gt; ,转发到本地&lt;code&gt;adb forward tcp:1234 tcp:1234&lt;/code&gt;,执行文件 &lt;code&gt;frida -H 127.0.0.1:1234 packageName（包名） -l script.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;frida应用&#34;&gt;frida应用 &lt;a href=&#34;#frida%e5%ba%94%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;frida-dexdump脱壳&#34;&gt;frida-dexdump脱壳 &lt;a href=&#34;#frida-dexdump%e8%84%b1%e5%a3%b3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装：&lt;code&gt;pip install frida-dexdump&lt;/code&gt; ,下载地址：https://github.com/hluwa/frida-dexdump&lt;/li&gt;
&lt;li&gt;脱壳命令：&lt;code&gt;frida-dexdump -U -d -f 包名 -o 存放dex路径&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;objection教程&#34;&gt;Objection教程 &lt;a href=&#34;#objection%e6%95%99%e7%a8%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;安装&#34;&gt;安装 &lt;a href=&#34;#%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装：&lt;code&gt;pip install objection==1.11.0&lt;/code&gt;， 选择安装与frida版本相近的版本，pypi官网查看Objection版本,地址：https://pypi.org/project/objection/ ，&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注入&#34;&gt;注入 &lt;a href=&#34;#%e6%b3%a8%e5%85%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;命令：&lt;code&gt;objection -g 包名 explore&lt;/code&gt;，如果指定端口了 &lt;code&gt;objection -N -h 127.0.0.1 -p 1234 -g com.ccb.longjiLife explore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>HttpClient使用技巧</title>
      <link>https://abnerxc.github.io/note/java-httpclient%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 25 Jan 2021 22:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/note/java-httpclient%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h2 id=&#34;1-规范背景&#34;&gt;1. 规范背景 &lt;a href=&#34;#1-%e8%a7%84%e8%8c%83%e8%83%8c%e6%99%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;11-http-client选择&#34;&gt;1.1. http client选择 &lt;a href=&#34;#11-http-client%e9%80%89%e6%8b%a9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如无特殊情况（比如：单机tps上千），建议选Spring Rest Template做门面，Apache HttpClient 4.x做实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-rest-template-运行环境&#34;&gt;1.2. rest template 运行环境 &lt;a href=&#34;#12-rest-template-%e8%bf%90%e8%a1%8c%e7%8e%af%e5%a2%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;jdk 1.8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring boot项目&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-配置-rest-template&#34;&gt;2. 配置 rest template &lt;a href=&#34;#2-%e9%85%8d%e7%bd%ae-rest-template&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;21-引入jar包&#34;&gt;2.1. 引入jar包 &lt;a href=&#34;#21-%e5%bc%95%e5%85%a5jar%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Rest Template在spring-web模块中内置了，spring boot会自动帮你引进来，因此无需再引入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入Apache HttpClient 4.x包:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;4.5.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- 如果不配异步（AsyncRestTemplate），则不需要这个依赖 --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-all&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;4.1.5.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;22-编写-yml-文件配置可选&#34;&gt;2.2. 编写 yml 文件配置（可选） &lt;a href=&#34;#22-%e7%bc%96%e5%86%99-yml-%e6%96%87%e4%bb%b6%e9%85%8d%e7%bd%ae%e5%8f%af%e9%80%89&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# yml配置的优先级高于java配置；如果yml配置和java配置同时存在，则yml配置会覆盖java配置
####restTemplate的yml配置开始####
spring:
  restTemplate:
    maxTotalConnect: 1000 #连接池的最大连接数，0代表不限；如果取0，需要考虑连接泄露导致系统崩溃的后果
    maxConnectPerRoute: 200
    connectTimeout: 3000
    readTimeout: 5000
    charset: UTF-8
####restTemplate的 yml配置开始####
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;23-编写java配置必备不可省略&#34;&gt;2.3. 编写java配置（必备，不可省略） &lt;a href=&#34;#23-%e7%bc%96%e5%86%99java%e9%85%8d%e7%bd%ae%e5%bf%85%e5%a4%87%e4%b8%8d%e5%8f%af%e7%9c%81%e7%95%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//xxx代表你的项目，例如：
//com.douyu.wsd.adx.gateway.config
//com.douyu.wsd.venus.config
//可以写一级，也可以写多级，具体自己随意
package com.douyu.wsd.xxx.config;



import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;

import org.apache.http.Header;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.message.BasicHeader;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.client.Netty4ClientHttpRequestFactory;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.web.client.AsyncRestTemplate;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestTemplate;

@Configuration
@ConfigurationProperties(prefix = &amp;#34;spring.restTemplate&amp;#34;)
@ConditionalOnClass(value = {RestTemplate.class, CloseableHttpClient.class})
public class RestTemplateConfiguration {

    // java配置的优先级低于yml配置；如果yml配置不存在，会采用java配置
    // ####restTemplate的 java配置开始####

    private int maxTotalConnection = 500; //连接池的最大连接数

    private int maxConnectionPerRoute = 100; //同路由的并发数

    private int connectionTimeout = 2 * 1000; //连接超时，默认2s

    private int readTimeout = 30 * 1000; //读取超时，默认30s

    private String charset = &amp;#34;UTF-8&amp;#34;;

    // ####restTemplate的 java配置结束####

    public void setMaxTotalConnection(int maxTotalConnection) {
        this.maxTotalConnection = maxTotalConnection;
    }

    public void setMaxConnectionPerRoute(int maxConnectionPerRoute) {
        this.maxConnectionPerRoute = maxConnectionPerRoute;
    }

    public void setConnectionTimeout(int connectionTimeout) {
        this.connectionTimeout = connectionTimeout;
    }

    public void setReadTimeout(int readTimeout) {
        this.readTimeout = readTimeout;
    }

    public void setCharset(String charset) {
        this.charset = charset;
    }

    //创建HTTP客户端工厂
    @Bean(name = &amp;#34;clientHttpRequestFactory&amp;#34;)
    public ClientHttpRequestFactory clientHttpRequestFactory() {
        return createClientHttpRequestFactory(this.connectionTimeout, this.readTimeout);
    }

    //初始化RestTemplate,并加入spring的Bean工厂，由spring统一管理
    @Bean(name = &amp;#34;restTemplate&amp;#34;)
    @ConditionalOnMissingBean(RestTemplate.class)
    public RestTemplate restTemplate(ClientHttpRequestFactory factory) {
        return createRestTemplate(factory);
    }

    //初始化支持异步的RestTemplate,并加入spring的Bean工厂，由spring统一管理
    //如果你用不到异步，则无须创建该对象
    @Bean(name = &amp;#34;asyncRestTemplate&amp;#34;)
    @ConditionalOnMissingBean(AsyncRestTemplate.class)
    public AsyncRestTemplate asyncRestTemplate(RestTemplate restTemplate) {
        final Netty4ClientHttpRequestFactory factory = new Netty4ClientHttpRequestFactory();
        factory.setConnectTimeout(this.connectionTimeout);
        factory.setReadTimeout(this.readTimeout);
        return new AsyncRestTemplate(factory, restTemplate);
    }

    private ClientHttpRequestFactory createClientHttpRequestFactory(int connectionTimeout, int readTimeout) {
        //maxTotalConnection 和 maxConnectionPerRoute 必须要配
        if (this.maxTotalConnection &amp;lt;= 0) {
            throw new IllegalArgumentException(&amp;#34;invalid maxTotalConnection: &amp;#34; + maxTotalConnection);
        }
        if (this.maxConnectionPerRoute &amp;lt;= 0) {
            throw new IllegalArgumentException(&amp;#34;invalid maxConnectionPerRoute: &amp;#34; + maxTotalConnection);
        }

        //全局默认的header头配置
        List&amp;lt;Header&amp;gt; headers = new LinkedList&amp;lt;&amp;gt;();
        headers.add(new BasicHeader(&amp;#34;Accept-Encoding&amp;#34;, &amp;#34;gzip,deflate&amp;#34;));
        headers.add(new BasicHeader(&amp;#34;Accept-Language&amp;#34;, &amp;#34;zh-CN,zh;q=0.8,en;q=0.6&amp;#34;));

        //禁用自动重试，需要重试时，请自行控制
        HttpRequestRetryHandler retryHandler = new DefaultHttpRequestRetryHandler(0, false);

        PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
        cm.setMaxTotal(maxTotalConnection);
        cm.setDefaultMaxPerRoute(maxConnectionPerRoute);

        //创建真正处理http请求的httpClient实例
        CloseableHttpClient httpClient = HttpClients.custom()
                .setDefaultHeaders(headers)
                .setRetryHandler(retryHandler)
                .setConnectionManager(cm)
                .build();

        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(
                httpClient);
        factory.setConnectTimeout(connectionTimeout);
        factory.setReadTimeout(readTimeout);
        return factory;
    }

    private RestTemplate createRestTemplate(ClientHttpRequestFactory factory) {
        RestTemplate restTemplate = new RestTemplate(factory);

        //我们采用RestTemplate内部的MessageConverter
        //重新设置StringHttpMessageConverter字符集，解决中文乱码问题
        modifyDefaultCharset(restTemplate);

        //设置错误处理器
        restTemplate.setErrorHandler(new DefaultResponseErrorHandler());

        return restTemplate;
    }

    private void modifyDefaultCharset(RestTemplate restTemplate) {
        List&amp;lt;HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; converterList = restTemplate.getMessageConverters();
        HttpMessageConverter&amp;lt;?&amp;gt; converterTarget = null;
        for (HttpMessageConverter&amp;lt;?&amp;gt; item : converterList) {
            if (StringHttpMessageConverter.class == item.getClass()) {
                converterTarget = item;
                break;
            }
        }
        if (null != converterTarget) {
            converterList.remove(converterTarget);
        }
        Charset defaultCharset = Charset.forName(charset);
        converterList.add(1, new StringHttpMessageConverter(defaultCharset));
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;做完上述配置，就生成了可用的RestTemplate实例&lt;/p&gt;
&lt;p&gt;采用上述配置，可以做到开箱即用；自己配，可能会踩些坑，比如：&lt;a href=&#34;http://doc.dz11.com/ddse/preview/share/9c0f4c855b09e2b1cf33?sid=187&#34;&gt;spring boot 配置技巧&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-rest-template基本用法&#34;&gt;3. rest template基本用法 &lt;a href=&#34;#3-rest-template%e5%9f%ba%e6%9c%ac%e7%94%a8%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;31-get演示&#34;&gt;3.1. get演示 &lt;a href=&#34;#31-get%e6%bc%94%e7%a4%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;演示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.lang.StringUtils;

import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.AsyncRestTemplate;
import org.springframework.web.client.RestTemplate;

@RestController
@Slf4j
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @Resource
    private AsyncRestTemplate asyncRestTemplate;

    //最简单的get操作
    @RequestMapping(&amp;#34;/get&amp;#34;)
    public String testGet(String keyword) throws Exception {
        String kw = StringUtils.defaultString(URLEncoder.encode(keyword, &amp;#34;UTF-8&amp;#34;));
        String html = restTemplate.getForObject(&amp;#34;https://www.douyu.com/search/?kw=&amp;#34; + kw, String.class);
        return html;//返回的是斗鱼主站的html
    }

    //需要自定义header头的get操作
    @RequestMapping(&amp;#34;/get2&amp;#34;)
    public String testGet2(String keyword) throws Exception {
        HttpHeaders headers = new HttpHeaders();
        headers.set(&amp;#34;MyHeaderKey&amp;#34;, &amp;#34;MyHeaderValue&amp;#34;);
        HttpEntity entity = new HttpEntity(headers);

        String kw = StringUtils.defaultString(URLEncoder.encode(keyword, &amp;#34;UTF-8&amp;#34;));
        ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.exchange(&amp;#34;https://www.douyu.com/search/?kw=&amp;#34; + kw, HttpMethod.GET, entity, String.class);
        return response.getBody();//返回的是斗鱼主站的html
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;32-post表单演示&#34;&gt;3.2. post表单演示 &lt;a href=&#34;#32-post%e8%a1%a8%e5%8d%95%e6%bc%94%e7%a4%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;演示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.lang.StringUtils;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import com.google.common.collect.ImmutableMap;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/postForm&amp;#34;)
    public String testPostForm(String posid) throws Exception {//测试用例：posid=804009
        String url = &amp;#34;http://www.douyu.com/lapi/sign/app/getinfo?aid=android1&amp;amp;client_sys=android&amp;amp;mdid=phone&amp;amp;time=1524495658&amp;amp;token=&amp;amp;auth=789c4f732d6aa4d0a5c8fb33765af8cf&amp;#34;;
        MultiValueMap&amp;lt;String, String&amp;gt; form = new LinkedMultiValueMap&amp;lt;String, String&amp;gt;();
        form.add(&amp;#34;app&amp;#34;, &amp;#34;{\&amp;#34;aname\&amp;#34;:\&amp;#34;斗鱼直播\&amp;#34;,\&amp;#34;pname\&amp;#34;:\&amp;#34;air.tv.douyu.android\&amp;#34;}&amp;#34;);
        form.add(&amp;#34;mdid&amp;#34;, &amp;#34;phone&amp;#34;);
        form.add(&amp;#34;cate1&amp;#34;, &amp;#34;0&amp;#34;);
        form.add(&amp;#34;client_sys&amp;#34;, &amp;#34;ios&amp;#34;);
        form.add(&amp;#34;cate2&amp;#34;, &amp;#34;0&amp;#34;);
        form.add(&amp;#34;auth&amp;#34;, &amp;#34;789c4f732d6aa4d0a5c8fb33765af8cf&amp;#34;);
        form.add(&amp;#34;roomid&amp;#34;, &amp;#34;0&amp;#34;);
        form.add(&amp;#34;posid&amp;#34;, posid);
        form.add(&amp;#34;imei&amp;#34;, &amp;#34;863254010282712&amp;#34;);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        //headers.add(&amp;#34;xx&amp;#34;, &amp;#34;yy&amp;#34;);//可以加入自定义的header头
        HttpEntity&amp;lt;MultiValueMap&amp;lt;String, String&amp;gt;&amp;gt; formEntity = new HttpEntity&amp;lt;&amp;gt;(form, headers);
        String json = restTemplate.postForObject(url, formEntity, String.class);
        return json;//返回的是广告api的json
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;33-post请求体演示&#34;&gt;3.3. post请求体演示 &lt;a href=&#34;#33-post%e8%af%b7%e6%b1%82%e4%bd%93%e6%bc%94%e7%a4%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;演示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.lang.StringUtils;

import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/postBody&amp;#34;)
    public String testPostBody() throws Exception {
        String url = &amp;#34;https://venus.dz11.com/venus/release/pc/checkUpdate&amp;#34;;
        String jsonBody = &amp;#34;{\n&amp;#34;
                + &amp;#34;    \&amp;#34;channelCode\&amp;#34;: \&amp;#34;official\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;appCode\&amp;#34;: \&amp;#34;Douyu_Live_PC_Client\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;versionCode\&amp;#34;: \&amp;#34;201804121\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;versionName\&amp;#34;: \&amp;#34;V5.1.9\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;deviceUid\&amp;#34;: \&amp;#34;02-15-03-59-5C-E2\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;deviceResolution\&amp;#34;: \&amp;#34;1920*1080\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;token\&amp;#34;: \&amp;#34;token\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;webView\&amp;#34;: \&amp;#34;\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;osInfo\&amp;#34;: \&amp;#34;10.0\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;osType\&amp;#34;: \&amp;#34;64\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;cpuInfo\&amp;#34;:\n&amp;#34;
                + &amp;#34;    {\n&amp;#34;
                + &amp;#34;        \&amp;#34;OemId\&amp;#34;: \&amp;#34;0\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorArchitecture\&amp;#34;: \&amp;#34;0\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;PageSize\&amp;#34;: \&amp;#34;4096\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;MinimumApplicationAddress\&amp;#34;: \&amp;#34;00010000\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;MaximumApplicationAddress\&amp;#34;: \&amp;#34;7FFEFFFF\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ActiveProcessorMask\&amp;#34;: \&amp;#34;15\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;NumberOfProcessors\&amp;#34;: \&amp;#34;4\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorType\&amp;#34;: \&amp;#34;586\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;AllocationGranularity\&amp;#34;: \&amp;#34;65536\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorLevel\&amp;#34;: \&amp;#34;6\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorRevision\&amp;#34;: \&amp;#34;40457\&amp;#34;\n&amp;#34;
                + &amp;#34;    },\n&amp;#34;
                + &amp;#34;    \&amp;#34;diskInfo\&amp;#34;: \&amp;#34;931.507GB\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;memoryInfo\&amp;#34;: \&amp;#34;15.8906GB\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;driveInfo\&amp;#34;: \&amp;#34;Intel(R) HD Graphics 630:23.20.16.4973;\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;startTime\&amp;#34;: \&amp;#34;-501420357\&amp;#34;\n&amp;#34;
                + &amp;#34;}\n&amp;#34;;

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        //headers.add(&amp;#34;xx&amp;#34;, &amp;#34;yy&amp;#34;);//可以加入自定义的header头
        HttpEntity&amp;lt;String&amp;gt; bodyEntity = new HttpEntity&amp;lt;&amp;gt;(jsonBody, headers);
        
        //1.直接拿原始json串
        String json = restTemplate.postForObject(url, bodyEntity, String.class);
        
        //2.将原始的json传转成java对象，rest template可以自动完成
        ResultVo resultVo = restTemplate.postForObject(url, bodyEntity, ResultVo.class);
        if (resultVo != null &amp;amp;&amp;amp; resultVo.success()) {
            Object res = resultVo.getData();//data节点的实际类型是java.util.LinkedHashMap
            logger.info(&amp;#34;处理成功，返回数据: {}&amp;#34;, resultVo.getData());
        } else {
            logger.info(&amp;#34;处理失败，响应结果: {}&amp;#34;, resultVo);
        }

        return json;//返回的是分包api的json
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;34-post文件上传&#34;&gt;3.4. post文件上传 &lt;a href=&#34;#34-post%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;场景说明：只适合小文件（20MB以内）上传&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;演示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.codec.CodecUtils;
import com.douyu.wsd.framework.common.lang.StringUtils;

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
@Slf4j
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/postFile&amp;#34;)
    public String testPostBody() throws Exception {
        String filePath = &amp;#34;D:/config.png&amp;#34;;
        
        //通过磁盘文件上传，如果产生了临时文件，一定要记得删除，否则，临时文件越积越多，磁盘会爆
        FileSystemResource resource = new FileSystemResource(new File(filePath));
	
        String url = &amp;#34;http://dev.resuploader.dz11.com/Resource/Dss/put&amp;#34;;
        String appId = &amp;#34;***&amp;#34;;//测试的时候换成自己的配置
        String secureKey = &amp;#34;***&amp;#34;;
        String time = String.valueOf(System.currentTimeMillis());
        String pubStr = &amp;#34;1&amp;#34;;
        String tempStr = String.format(&amp;#34;app_id=%s&amp;amp;is_public=%s&amp;amp;time=%s&amp;amp;vframe=0%s&amp;#34;, appId, pubStr, time, secureKey);
        MultiValueMap&amp;lt;String, Object&amp;gt; form = new LinkedMultiValueMap&amp;lt;&amp;gt;();
        form.add(&amp;#34;is_public&amp;#34;, pubStr);
        form.add(&amp;#34;vframe&amp;#34;, &amp;#34;0&amp;#34;);
        form.add(&amp;#34;file&amp;#34;, resource);
        form.add(&amp;#34;app_id&amp;#34;, appId);
        form.add(&amp;#34;time&amp;#34;, time);
        form.add(&amp;#34;sign&amp;#34;, CodecUtils.md5(tempStr));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        //headers.add(&amp;#34;xx&amp;#34;, &amp;#34;yy&amp;#34;);//可以加入自定义的header头
        HttpEntity&amp;lt;MultiValueMap&amp;lt;String, Object&amp;gt;&amp;gt; formEntity = new HttpEntity&amp;lt;&amp;gt;(form, headers);
        String json = restTemplate.postForObject(url, formEntity, String.class);
        return json;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;35-文件下载&#34;&gt;3.5. 文件下载 &lt;a href=&#34;#35-%e6%96%87%e4%bb%b6%e4%b8%8b%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;场景说明：只适合小文件（10MB以内）下载&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;演示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.lang.StringUtils;

import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
@Slf4j
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/downloadFile&amp;#34;)
    public ResponseEntity testDownloadFile() throws Exception {
        String url = &amp;#34;http://editor.baidu.com/editor/download/BaiduEditor(Online)_5-9-16.exe&amp;#34;;
        HttpHeaders headers = new HttpHeaders();
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_OCTET_STREAM));
        HttpEntity&amp;lt;String&amp;gt; entity = new HttpEntity&amp;lt;&amp;gt;(headers);
        ResponseEntity&amp;lt;byte[]&amp;gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, byte[].class);
        byte[] bytes = response.getBody();
        long contentLength = bytes != null ? bytes.length : 0;
        headers.setContentLength((int) contentLength);
        headers.setContentDispositionFormData(&amp;#34;baidu.exe&amp;#34;, URLEncoder.encode(&amp;#34;百度安装包.exe&amp;#34;, &amp;#34;UTF-8&amp;#34;));
        return new ResponseEntity&amp;lt;&amp;gt;(response.getBody(), headers, HttpStatus.OK);
    }   
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;36-更多api&#34;&gt;3.6. 更多API &lt;a href=&#34;#36-%e6%9b%b4%e5%a4%9aapi&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;361--resttemplate-api-与http动词的对象关系&#34;&gt;3.6.1.  RestTemplate API 与http动词的对象关系： &lt;a href=&#34;#361--resttemplate-api-%e4%b8%8ehttp%e5%8a%a8%e8%af%8d%e7%9a%84%e5%af%b9%e8%b1%a1%e5%85%b3%e7%b3%bb&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;| HTTP动词  | 对应的RestTemplate API   |
| ++++++-  |:++++++++++++-: |
|DELETE|	delete(String, String&amp;hellip;)
|GET|	getForObject(String, Class, String&amp;hellip;)
|HEAD|	headForHeaders(String, String&amp;hellip;)
|OPTIONS|	optionsForAllow(String, String&amp;hellip;)
|POST|	postForLocation(String, Object, String&amp;hellip;)
|PUT|	put(String, Object, String&amp;hellip;)&lt;/p&gt;
&lt;h4 id=&#34;362--postgetforentity-api-和-postgetforobject-的区别&#34;&gt;3.6.2.  (post|get)ForEntity API 和 (post|get)ForObject 的区别 &lt;a href=&#34;#362--postgetforentity-api-%e5%92%8c-postgetforobject-%e7%9a%84%e5%8c%ba%e5%88%ab&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;ForEntity API拿到的是ResponseEntity，通过ResponseEntity可以拿到状态码，response header等信息

ForObject API拿到的是java对象，用在不关心response状态码和header的场合中
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;363-getxxxpostxxx-和-exchange-方法的区别&#34;&gt;3.6.3. getXXX、postXXX 和 exchange 方法的区别 &lt;a href=&#34;#363-getxxxpostxxx-%e5%92%8c-exchange-%e6%96%b9%e6%b3%95%e7%9a%84%e5%8c%ba%e5%88%ab&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;getXXX、postXXX 用于比较简单的调用

exchange 用于比较复杂的调用
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-rest-template高阶用法&#34;&gt;4. rest template高阶用法 &lt;a href=&#34;#4-rest-template%e9%ab%98%e9%98%b6%e7%94%a8%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;41-带泛型的响应解码&#34;&gt;4.1. 带泛型的响应解码 &lt;a href=&#34;#41-%e5%b8%a6%e6%b3%9b%e5%9e%8b%e7%9a%84%e5%93%8d%e5%ba%94%e8%a7%a3%e7%a0%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
import com.douyu.wsd.framework.common.lang.StringUtils;

import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
@Slf4j
public class TestController {

    private static final Logger logger = LoggerFactory.getLogger(TestController.class);

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/postBody&amp;#34;)
    public String testPostBody() throws Exception {//测试用例：posid=804009
        String url = &amp;#34;https://venus.dz11.com/venus/release/pc/checkUpdate&amp;#34;;
        String jsonBody = &amp;#34;{\n&amp;#34;
                + &amp;#34;    \&amp;#34;channelCode\&amp;#34;: \&amp;#34;official\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;appCode\&amp;#34;: \&amp;#34;Douyu_Live_PC_Client\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;versionCode\&amp;#34;: \&amp;#34;201804121\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;versionName\&amp;#34;: \&amp;#34;V5.1.9\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;deviceUid\&amp;#34;: \&amp;#34;02-15-03-59-5C-E2\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;deviceResolution\&amp;#34;: \&amp;#34;1920*1080\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;token\&amp;#34;: \&amp;#34;token\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;webView\&amp;#34;: \&amp;#34;\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;osInfo\&amp;#34;: \&amp;#34;10.0\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;osType\&amp;#34;: \&amp;#34;64\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;cpuInfo\&amp;#34;:\n&amp;#34;
                + &amp;#34;    {\n&amp;#34;
                + &amp;#34;        \&amp;#34;OemId\&amp;#34;: \&amp;#34;0\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorArchitecture\&amp;#34;: \&amp;#34;0\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;PageSize\&amp;#34;: \&amp;#34;4096\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;MinimumApplicationAddress\&amp;#34;: \&amp;#34;00010000\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;MaximumApplicationAddress\&amp;#34;: \&amp;#34;7FFEFFFF\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ActiveProcessorMask\&amp;#34;: \&amp;#34;15\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;NumberOfProcessors\&amp;#34;: \&amp;#34;4\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorType\&amp;#34;: \&amp;#34;586\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;AllocationGranularity\&amp;#34;: \&amp;#34;65536\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorLevel\&amp;#34;: \&amp;#34;6\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorRevision\&amp;#34;: \&amp;#34;40457\&amp;#34;\n&amp;#34;
                + &amp;#34;    },\n&amp;#34;
                + &amp;#34;    \&amp;#34;diskInfo\&amp;#34;: \&amp;#34;931.507GB\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;memoryInfo\&amp;#34;: \&amp;#34;15.8906GB\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;driveInfo\&amp;#34;: \&amp;#34;Intel(R) HD Graphics 630:23.20.16.4973;\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;startTime\&amp;#34;: \&amp;#34;-501420357\&amp;#34;\n&amp;#34;
                + &amp;#34;}\n&amp;#34;;

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity&amp;lt;String&amp;gt; bodyEntity = new HttpEntity&amp;lt;&amp;gt;(jsonBody, headers);
        
        //1. 直接拿原始的json串
        String json = restTemplate.postForObject(url, bodyEntity, String.class);

        //2. 将原始json传转java对象，跟上文不同的是，这个java对象里面有泛型（ResultVo&amp;lt;PcUpdateRes&amp;gt;）
        //大家实际使用的时候，把ResultVo&amp;lt;PcUpdateRes&amp;gt;换成自己的类，比如：List&amp;lt;MemberInfo&amp;gt;
        ResponseEntity&amp;lt;ResultVo&amp;lt;PcUpdateRes&amp;gt;&amp;gt; response = restTemplate
                .exchange(url, HttpMethod.POST, bodyEntity, new ParameterizedTypeReference&amp;lt;ResultVo&amp;lt;PcUpdateRes&amp;gt;&amp;gt;() {});
        if (response.getStatusCode().is2xxSuccessful() &amp;amp;&amp;amp; response.getBody() != null &amp;amp;&amp;amp; response.getBody().success()) {
            ResultVo&amp;lt;PcUpdateRes data = &amp;gt; resultVo = response.getBody();
            PcUpdateRes data = resultVo.getData();
            logger.info(&amp;#34;处理成功，返回数据: {}&amp;#34;, data);
        } else {
            logger.info(&amp;#34;处理失败，响应结果: {}&amp;#34;, response);
        }

        return json;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;42-上传文件流&#34;&gt;4.2. 上传文件流 &lt;a href=&#34;#42-%e4%b8%8a%e4%bc%a0%e6%96%87%e4%bb%b6%e6%b5%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.codec.CodecUtils;
import com.douyu.wsd.framework.common.io.IOUtils;
import com.douyu.wsd.framework.common.lang.StringUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
@Slf4j
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/postFile&amp;#34;)
    public String testPostBody() throws Exception {
        String filePath = &amp;#34;D:/config.png&amp;#34;;
        MultipartFileResource resource = new MultipartFileResource(new FileInputStream(new File(filePath)), &amp;#34;config.png&amp;#34;);
        String url = &amp;#34;http://dev.resuploader.dz11.com/Resource/Dss/put&amp;#34;;
        String appId = &amp;#34;***&amp;#34;;//测试的时候换成自己的配置
        String secureKey = &amp;#34;***&amp;#34;;
        String time = String.valueOf(System.currentTimeMillis());
        String pubStr = &amp;#34;1&amp;#34;;
        String tempStr = String.format(&amp;#34;app_id=%s&amp;amp;is_public=%s&amp;amp;time=%s&amp;amp;vframe=0%s&amp;#34;, appId, pubStr, time, secureKey);
        MultiValueMap&amp;lt;String, Object&amp;gt; form = new LinkedMultiValueMap&amp;lt;&amp;gt;();
        form.add(&amp;#34;is_public&amp;#34;, pubStr);
        form.add(&amp;#34;vframe&amp;#34;, &amp;#34;0&amp;#34;);
        form.add(&amp;#34;file&amp;#34;, resource);
        form.add(&amp;#34;app_id&amp;#34;, appId);
        form.add(&amp;#34;time&amp;#34;, time);
        form.add(&amp;#34;sign&amp;#34;, CodecUtils.md5(tempStr));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        //headers.add(&amp;#34;xx&amp;#34;, &amp;#34;yy&amp;#34;);//可以加入自定义的header头
        HttpEntity&amp;lt;MultiValueMap&amp;lt;String, Object&amp;gt;&amp;gt; formEntity = new HttpEntity&amp;lt;&amp;gt;(form, headers);
        String json = restTemplate.postForObject(url, formEntity, String.class);
        return json;
    }

    private class MultipartFileResource extends InputStreamResource {

        private String filename;

        public MultipartFileResource(InputStream inputStream, String filename) {
            super(inputStream);
            this.filename = filename;
        }

        @Override
        public String getFilename() {
            return this.filename;
        }

        @Override
        public long contentLength() throws IOException {
            return -1; // we do not want to generally read the whole stream into memory ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;43-异步操作&#34;&gt;4.3 异步操作 &lt;a href=&#34;#43-%e5%bc%82%e6%ad%a5%e6%93%8d%e4%bd%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AsyncRestTemplate 可支持异步，与同步API基本一致，返回的是future:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.lang.StringUtils;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Resource;

import org.springframework.http.ResponseEntity;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.AsyncRestTemplate;

@RestController
public class TestController {

    @Resource
    private AsyncRestTemplate asyncRestTemplate;

    @RequestMapping(&amp;#34;/douyu&amp;#34;)
    public String douyu() throws Exception {
        ListenableFuture&amp;lt;ResponseEntity&amp;lt;String&amp;gt;&amp;gt; future = asyncRestTemplate
                .getForEntity(&amp;#34;http://www.douyu.com&amp;#34;, String.class);
        return future.get(2 * 1000, TimeUnit.SECONDS).getBody();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;44-不同的超时时间&#34;&gt;4.4. 不同的超时时间 &lt;a href=&#34;#44-%e4%b8%8d%e5%90%8c%e7%9a%84%e8%b6%85%e6%97%b6%e6%97%b6%e9%97%b4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;假如我碰到这种场景：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ServiceA | 10s

ServiceB | 25s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有3个套路可解决：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;套路一，创建多个实例，每个实例有自己的超时时间，比如&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    // 超时时间短的实例
    @Bean(name = &amp;#34;clientHttpRequestFactoryA&amp;#34;)
    public ClientHttpRequestFactory clientHttpRequestFactoryA() {
        return createClientHttpRequestFactory(2*1000, 10*1000);
    }

    @Bean(name = &amp;#34;restTemplateA&amp;#34;)
    @ConditionalOnMissingBean(RestTemplate.class)
    public RestTemplate restTemplateA() {
        return createRestTemplate(clientHttpRequestFactoryA());
    }
    
    // 超时时间长的实例
    @Bean(name = &amp;#34;clientHttpRequestFactoryB&amp;#34;)
    public ClientHttpRequestFactory clientHttpRequestFactoryB() {
        return createClientHttpRequestFactory(5*1000, 25*1000);
    }

    @Bean(name = &amp;#34;restTemplateB&amp;#34;)
    @ConditionalOnMissingBean(RestTemplate.class)
    public RestTemplate restTemplateB() {
        return createRestTemplate(clientHttpRequestFactoryB());
    }
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;套路二，AsyncRestTemplate&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ListenableFuture&amp;lt;ResponseEntity&amp;lt;String&amp;gt;&amp;gt; future = asyncRestTemplate
                .getForEntity(&amp;#34;http://www.douyu.com&amp;#34;, String.class);
return future.get(2 * 1000, TimeUnit.SECONDS).getBody();
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;套路三，上&lt;a href=&#34;https://spring.io/guides/gs/circuit-breaker/&#34;&gt; Circuit Breaker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@EnableCircuitBreaker
public class MyApp {
    public static void main(String[] args) {
        SpringApplication.run(MyApp .class, args);
    }
}

@Service
public class MyService {
    private final RestTemplate restTemplate;

    public BookService(RestTemplate rest) {
        this.restTemplate = rest;
    }

    @HystrixCommand(
        fallbackMethod = &amp;#34;fooMethodFallback&amp;#34;,
        commandProperties = { 
            @HystrixProperty(
                 name = &amp;#34;execution.isolation.thread.timeoutInMilliseconds&amp;#34;, 
                 value=&amp;#34;5000&amp;#34;
            )
        }
    )
    public String fooMethod() {
        // Your logic here.
        restTemplate.exchange(...); 
    }

    public String fooMethodFallback(Throwable t) {
        log.error(&amp;#34;Fallback happened&amp;#34;, t);
        return &amp;#34;Sensible Default Here!&amp;#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;45-如何设置连接池&#34;&gt;4.5. 如何设置连接池 &lt;a href=&#34;#45-%e5%a6%82%e4%bd%95%e8%ae%be%e7%bd%ae%e8%bf%9e%e6%8e%a5%e6%b1%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;连接池需要服务端支持长连接，并非所有服务端都支持，因此单独开了篇文章：&lt;a href=&#34;http://doc.dz11.com/ddse/preview/space/14816?sid=29&amp;amp;pid=12940&#34;&gt;RestTemplate如何配置长连接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;46-全局统一的异常处理&#34;&gt;4.6. 全局统一的异常处理 &lt;a href=&#34;#46-%e5%85%a8%e5%b1%80%e7%bb%9f%e4%b8%80%e7%9a%84%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//实现异常处理接口
public class CustomErrorHandler extends DefaultResponseErrorHandler {  
  
    @Override  
    public void handleError(ClientHttpResponse response) throws IOException {  
  
    }
    
}  

//将自定义的异常处理器加进去
@Configuration  
public class RestClientConfig {  
  
    @Bean  
    public RestTemplate restTemplate() {  
        RestTemplate restTemplate = new RestTemplate();  
        restTemplate.setErrorHandler(new CustomErrorHandler());  
        return restTemplate;  
    }  
  
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5-小技巧&#34;&gt;5. 小技巧 &lt;a href=&#34;#5-%e5%b0%8f%e6%8a%80%e5%b7%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;51-参数模板&#34;&gt;5.1. 参数模板 &lt;a href=&#34;#51-%e5%8f%82%e6%95%b0%e6%a8%a1%e6%9d%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数组传参&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String result = restTemplate.getForObject(&amp;#34;http://example.com/hotels/{hotel}/bookings/{booking}&amp;#34;, 
    String.class, &amp;#34;42&amp;#34;, &amp;#34;21&amp;#34;);
//实际效果等同于：GET http://example.com/hotels/42/bookings/21
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;map传参&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Map&amp;lt;String, String&amp;gt; vars = new HashMap&amp;lt;String, String&amp;gt;();
vars.put(&amp;#34;hotel&amp;#34;, &amp;#34;42&amp;#34;);
vars.put(&amp;#34;booking&amp;#34;, &amp;#34;21&amp;#34;);
String result = restTemplate.getForObject(&amp;#34;http://example.com/hotels/{hotel}/bookings/{booking}&amp;#34;, 
    String.class, vars);
//实际效果等同于：GET http://example.com/hotels/42/rooms/42
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;52-文件上传注意点&#34;&gt;5.2. 文件上传注意点 &lt;a href=&#34;#52-%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0%e6%b3%a8%e6%84%8f%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果使用了本地临时文件，一定要在finally代码块中删除，否则可能会撑爆磁盘&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-faq&#34;&gt;6. FAQ &lt;a href=&#34;#6-faq&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;61-获取状态码&#34;&gt;6.1. 获取状态码 &lt;a href=&#34;#61-%e8%8e%b7%e5%8f%96%e7%8a%b6%e6%80%81%e7%a0%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;使用xxForEntity类方法调用接口，将返回ResponseEntity对象，通过它能取到状态码。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//判断接口返回是否为200
public static Boolean ping(){
    String url = &amp;#34;xxx&amp;#34;;
    try{
        ResponseEntity&amp;lt;String&amp;gt; responseEntity = restTemplate.getForEntity(url, String.class);
        HttpStatus status = responseEntity.getStatusCode();//获取返回状态
        return status.is2xxSuccessful();//判断状态码是否为2开头的
    }catch(Exception e){
        log.error(&amp;#34;处理失败: {}&amp;#34;, url, e);
        return false; //502 ,500是不能正常返回结果的，需要catch住，返回一个false
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;62-我需要手工释放连接吗&#34;&gt;6.2. 我需要手工释放连接吗？ &lt;a href=&#34;#62-%e6%88%91%e9%9c%80%e8%a6%81%e6%89%8b%e5%b7%a5%e9%87%8a%e6%94%be%e8%bf%9e%e6%8e%a5%e5%90%97&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不需要，rest template会帮我们释放，具体请看：&lt;a href=&#34;https://stackoverflow.com/questions/40161117/spring-resttemplate-need-to-release-connection&#34;&gt;spring-resttemplate-need-to-release-connection ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;62-如何调试rest-template&#34;&gt;6.2. 如何调试rest template &lt;a href=&#34;#62-%e5%a6%82%e4%bd%95%e8%b0%83%e8%af%95rest-template&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;可以在logback里单独配一个debug级别的logger，把org.apache.http下面的日志定向到控制台：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;logger name=&amp;#34;org.apache.http&amp;#34; level=&amp;#34;DEBUG&amp;#34; additivity=&amp;#34;false&amp;#34;&amp;gt;
    &amp;lt;appender-ref ref=&amp;#34;STDOUT&amp;#34; /&amp;gt;
&amp;lt;/logger&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>JAVA代码生成</title>
      <link>https://abnerxc.github.io/note/java-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</link>
      <pubDate>Mon, 25 Jan 2021 22:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/note/java-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</guid>
      <description>&lt;h1 id=&#34;依赖包版本&#34;&gt;依赖包版本 &lt;a href=&#34;#%e4%be%9d%e8%b5%96%e5%8c%85%e7%89%88%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mybatis-plus-generator&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.5.3.1&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.freemarker&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;freemarker&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.3.32&amp;lt;/version&amp;gt; &amp;lt;!-- or latest version --&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;java代码生成&#34;&gt;Java代码生成 &lt;a href=&#34;#java%e4%bb%a3%e7%a0%81%e7%94%9f%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;import com.baomidou.mybatisplus.generator.FastAutoGenerator;
import com.baomidou.mybatisplus.generator.config.OutputFile;
import com.baomidou.mybatisplus.generator.config.rules.DbColumnType;
import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;
import com.baomidou.mybatisplus.generator.config.builder.CustomFile;
import java.sql.Types;
import java.util.*;

public class CodeGeneratorTest {
    public static void main(String[] args) {
        // 数据库配置
        String url = &amp;#34;jdbc:mysql://127.0.01:3306/test?useUnicode=true&amp;amp;characterEncoding=UTF8&amp;amp;useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;#34;;
        String username = &amp;#34;root&amp;#34;;
        String password = &amp;#34;123456&amp;#34;;

        // 表名配置
        String[] tableName = {&amp;#34;sys_subject&amp;#34;};
        String[] tablePreFix = {&amp;#34;sys_&amp;#34;, &amp;#34;tpl_&amp;#34;};

        // 项目配置
        String projectName = &amp;#34;com-server-demo-provider&amp;#34;;
        String basePkg = &amp;#34;com.server.demo.provider&amp;#34;;
        String moduleName = &amp;#34;subject&amp;#34;;
        String author = &amp;#34;abner&amp;#34;;

        String rootPath = System.getProperty(&amp;#34;user.dir&amp;#34;);
        String mainPath = rootPath + &amp;#34;/&amp;#34; + projectName + &amp;#34;/src/main&amp;#34;;

         FastAutoGenerator.create(url, username, password)
                .globalConfig(builder -&amp;gt; {
                    builder.author(author)
                            .fileOverride()
                            .outputDir(mainPath + &amp;#34;/java&amp;#34;);
                })
                .dataSourceConfig(builder -&amp;gt; builder.typeConvertHandler((globalConfig, typeRegistry, metaInfo) -&amp;gt; {
                    int typeCode = metaInfo.getJdbcType().TYPE_CODE;
                    if (typeCode == Types.SMALLINT || typeCode == Types.TINYINT) {  // 添加 TINYINT 类型处理
                        return DbColumnType.INTEGER;
                    }
                    return typeRegistry.getColumnType(metaInfo);
                }))
                .packageConfig(builder -&amp;gt; {
                    builder.parent(basePkg)
                            .moduleName(moduleName)
                            .entity(&amp;#34;model.entity&amp;#34;)  // 实体类放在model包下
                            .pathInfo(Collections.singletonMap(OutputFile.xml, mainPath + &amp;#34;/mapper/&amp;#34; + moduleName));
                })
                .strategyConfig(builder -&amp;gt; {
                    builder.addInclude(tableName)
                            .addTablePrefix(tablePreFix);

                    // 实体类配置
                    builder.entityBuilder()
                            //.superClass(BaseEntity.class)
                            .enableChainModel()
                            .enableLombok()
                            .disableSerialVersionUID()
                            .enableTableFieldAnnotation()
                            // 字段过滤配置（排除BaseEntity.class父类中已经继承的字段，防止重复生成覆盖）
                            //.addSuperEntityColumns(&amp;#34;id&amp;#34;, &amp;#34;create_by&amp;#34;, &amp;#34;create_name&amp;#34;,
                                    &amp;#34;create_time&amp;#34;, &amp;#34;modify_by&amp;#34;, &amp;#34;modify_name&amp;#34;,
                                    &amp;#34;modify_time&amp;#34;);

                    // 新增Controller配置
                    builder.controllerBuilder()
                            .enableRestStyle()  // 使用@RestController注解
                            .enableHyphenStyle() // 启用驼峰转连字符
                            .formatFileName(&amp;#34;%sController&amp;#34;);

                    // Mapper配置
                    builder.mapperBuilder()
                            .superClass(BaseMapperX.class)
                            .enableBaseColumnList()
                            .enableMapperAnnotation();

                    // Service配置
                    builder.serviceBuilder()
                            .formatServiceFileName(&amp;#34;%sService&amp;#34;);
                })
                .injectionConfig(builder -&amp;gt; {
                    Map&amp;lt;String, Object&amp;gt; customMap = new HashMap&amp;lt;&amp;gt;();
                    // 添加父包路径变量
                    customMap.put(&amp;#34;packageName&amp;#34;, basePkg + &amp;#34;.&amp;#34; + moduleName);
                    customMap.put(&amp;#34;dtoPackage&amp;#34;, &amp;#34;model.dto&amp;#34;);
                    customMap.put(&amp;#34;voPackage&amp;#34;, &amp;#34;model.vo&amp;#34;);
                    customMap.put(&amp;#34;convertPackage&amp;#34;, &amp;#34;model.convert&amp;#34;);

                    builder.customMap(customMap)
                            // DTO模板
                            .customFile(new CustomFile.Builder()
                                    .fileName(&amp;#34;Dto.java&amp;#34;)
                                    .templatePath(&amp;#34;/templates/dto.java.ftl&amp;#34;)
                                    .packageName(&amp;#34;model.dto&amp;#34;)
                                    .build())
                            // VO模板
                            .customFile(new CustomFile.Builder()
                                    .fileName(&amp;#34;Vo.java&amp;#34;)
                                    .templatePath(&amp;#34;/templates/vo.java.ftl&amp;#34;)
                                    .packageName(&amp;#34;model.vo&amp;#34;)
                                    .build())
                            // Convert模板
                            .customFile(new CustomFile.Builder()
                                    .fileName(&amp;#34;Convert.java&amp;#34;)
                                    .templatePath(&amp;#34;/templates/convert.java.ftl&amp;#34;)
                                    .packageName(&amp;#34;model.convert&amp;#34;)
                                    .build());
                })
                .templateEngine(new FreemarkerTemplateEngine())
                .execute();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;freemarker模板&#34;&gt;Freemarker模板 &lt;a href=&#34;#freemarker%e6%a8%a1%e6%9d%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;convert.java.ftl&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;package ${packageName}.${convertPackage};

import ${package.Entity}.${entity};
import ${package.Entity?replace(&amp;#34;entity&amp;#34;,&amp;#34;dto&amp;#34;)}.${entity}Dto;
import ${package.Entity?replace(&amp;#34;entity&amp;#34;,&amp;#34;vo&amp;#34;)}.${entity}Vo;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;
import java.util.List;

@Mapper(componentModel = &amp;#34;spring&amp;#34;)
public interface ${entity}Convert {

${entity}Convert INSTANCE = Mappers.getMapper(${entity}Convert.class);

${entity}Dto entityToDto(${entity} entity);

${entity} dtoToEntity(${entity}Dto dto);

${entity} voToEntity(${entity}Vo vo);

List&amp;lt;${entity}Dto&amp;gt; entityListToDto(List&amp;lt;${entity}&amp;gt; entities);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dto.java.ftl&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;package ${packageName}.${dtoPackage};

    import lombok.Data;
    import lombok.experimental.Accessors;

    @Data
    @Accessors(chain = true)
    public class ${table.entityName}Dto {

    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;vo.java.ftl&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;package ${packageName}.${voPackage};

    import lombok.Data;
    import lombok.experimental.Accessors;

    @Data
    @Accessors(chain = true)
    public class ${table.entityName}Vo {

    }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>mysql总结</title>
      <link>https://abnerxc.github.io/note/mysql-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 25 Jan 2021 22:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/note/mysql-%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;宏观了解&#34;&gt;宏观了解 &lt;a href=&#34;#%e5%ae%8f%e8%a7%82%e4%ba%86%e8%a7%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/mysql-a.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;查询缓存&#34;&gt;查询缓存 &lt;a href=&#34;#%e6%9f%a5%e8%af%a2%e7%bc%93%e5%ad%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;我们先通过&lt;code&gt;show variables like &#39;%query_cache%&#39;&lt;/code&gt;来看一下默认的数据库配置，&lt;code&gt;query_cache_type=ON&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原理：MYSQL的查询缓存实质上是缓存SQL的hash值和该SQL的查询结果，如果运行相同的SQL,服务器直接从缓存中去掉结果，而不再去解析，优化，寻找最低成本的执行计划等一系列操作，大大提升了查询速度。&lt;/li&gt;
&lt;li&gt;弊端：执行的SQL语句必须一样（大小写，间隔等），如果不一样将会产生不同的hash值&lt;/li&gt;
&lt;li&gt;场景：通过观察云厂商，大部分情况下都是关闭查询缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;引擎&#34;&gt;引擎 &lt;a href=&#34;#%e5%bc%95%e6%93%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;MyISAM存储引擎
MyISAM基于ISAM存储引擎，并对其进行扩展。使用MyISAM引擎创建数据库，将产生3个文件,文件的名字以表名字开始，&lt;code&gt;扩展名之处文件类型：frm文件存储表定义、数据文件的扩展名为.MYD（MYData）、索引文件的扩展名时.MYI（MYIndex）&lt;/code&gt;。MyISAM拥有较高的插入、查询速度，但&lt;code&gt;不支持事物&lt;/code&gt;。MyISAM主要特性有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大文件（达到63位文件长度）在支持大文件的文件系统和操作系统上被支持&lt;/li&gt;
&lt;li&gt;当把删除和更新及插入操作混合使用的时候，动态尺寸的行产生更少碎片。这要通过合并相邻被删除的块，以及若下一个块被删除，就扩展到下一块自动完成&lt;/li&gt;
&lt;li&gt;每个MyISAM表最大索引数是64，这可以通过重新编译来改变。每个索引最大的列数是16&lt;/li&gt;
&lt;li&gt;最大的键长度是1000字节，这也可以通过编译来改变，对于键长度超过250字节的情况，一个超过1024字节的键将被用上&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BLOB和TEXT列可以被索引&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;NULL被允许在索引的列中，这个值占每个键的0~1个字节&lt;/li&gt;
&lt;li&gt;所有数字键值以高字节优先被存储以允许一个更高的索引压缩&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个MyISAM类型的表都有一个AUTO_INCREMENT的内部列，当INSERT和UPDATE操作的时候该列被更新，同时AUTO_INCREMENT列将被刷新。所以说，MyISAM类型表的AUTO_INCREMENT列更新比InnoDB类型的AUTO_INCREMENT更快&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;可以把数据文件和索引文件放在不同目录&lt;/li&gt;
&lt;li&gt;每个字符列可以有不同的字符集&lt;/li&gt;
&lt;li&gt;有VARCHAR的表可以固定或动态记录长度&lt;/li&gt;
&lt;li&gt;VARCHAR和CHAR列可以多达64KB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InnoDB存储引擎
InnoDB不创建目录，使用InnoDB时，MySQL将在MySQL数据目录下创建一个名为ibdata1的10MB大小的自动扩展数据文件，以及两个名为ib_logfile0和ib_logfile1的5MB大小的日志文件
InnoDB是事务型数据库的首选引擎，支持事务安全表（ACID），支持行锁定和外键，InnoDB是默认的MySQL引擎。InnoDB主要特性有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB给MySQL提供了具有提交、回滚和崩溃恢复能力的事物安全（ACID兼容）存储引擎。InnoDB锁定在行级并且也在SELECT语句中提供一个类似Oracle的非锁定读。这些功能增加了多用户部署和性能。在SQL查询中，可以自由地将InnoDB类型的表和其他MySQL的表类型混合起来，甚至在同一个查询中也可以混合&lt;/li&gt;
&lt;li&gt;InnoDB是为处理巨大数据量的最大性能设计。它的CPU效率可能是任何其他基于磁盘的关系型数据库引擎锁不能匹敌的&lt;/li&gt;
&lt;li&gt;InnoDB存储引擎完全与MySQL服务器整合，InnoDB存储引擎为在主内存中缓存数据和索引而维持它自己的缓冲池。InnoDB将它的表和索引在一个逻辑表空间中，表空间可以包含数个文件（或原始磁盘文件）。这与MyISAM表不同，比如在MyISAM表中每个表被存放在分离的文件中。InnoDB表可以是任何尺寸，即使在文件尺寸被限制为2GB的操作系统上&lt;/li&gt;
&lt;li&gt;InnoDB支持外键完整性约束，存储表中的数据时，每张表的存储都按主键顺序存放，如果没有显示在表定义时指定主键，InnoDB会为每一行生成一个6字节的ROWID，并以此作为主键&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL中myisam与innodb的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB支持事物，而MyISAM不支持事物&lt;/li&gt;
&lt;li&gt;InnoDB支持行级锁，而MyISAM支持表级锁&lt;/li&gt;
&lt;li&gt;InnoDB支持MVCC, 而MyISAM不支持&lt;/li&gt;
&lt;li&gt;InnoDB支持外键，而MyISAM不支持&lt;/li&gt;
&lt;li&gt;InnoDB不支持全文索引，而MyISAM支持（5.6版本已经支持了）&lt;/li&gt;
&lt;li&gt;MYSQL引擎的文件包含（.frm-表结构文件、.myd-表数据文件，.myi-表索引文件）&lt;/li&gt;
&lt;li&gt;InnoDB引擎包含文件（*.frm-表结构文件，ibd-数据和索引文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;索引&#34;&gt;索引 &lt;a href=&#34;#%e7%b4%a2%e5%bc%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;聚集索引
InnoDB的主键索引与行记录是存储在一起的，故叫做聚集索引（Clustered Index）：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非聚集索引
MyISAM的索引与行记录是分开存储的，叫做非聚集索引（UnClustered Index）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;联合索引
多个字段上建立的索引，能够加速复核查询条件的检索。所以该索引也有最左匹配原则，5.6版本延伸出来的&lt;code&gt;索引下推&lt;/code&gt;见下文&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;举个说明，不妨设有表：&lt;code&gt;t(id PK, name KEY, sex, flag);&lt;/code&gt; 画外音：id是聚集索引，name是普通索引。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;mysql的索引方法btree和hash的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hash
&lt;ol&gt;
&lt;li&gt;memory引擎才显示的支持Hash索引，innoDb默认是B+树&lt;/li&gt;
&lt;li&gt;Hash 索引仅仅能满足&amp;quot;=&amp;quot;,&amp;ldquo;IN&amp;quot;和&amp;rdquo;&amp;lt;= &amp;amp; &amp;gt;=&amp;ldquo;查询，不能使用范围查询。&lt;/li&gt;
&lt;li&gt;Hash 索引无法被用来避免数据的排序操作。&lt;/li&gt;
&lt;li&gt;Hash 索引不能利用部分索引键查询。&lt;/li&gt;
&lt;li&gt;Hash 索引在任何时候都不能避免表扫描。&lt;/li&gt;
&lt;li&gt;Hash 索引遇到大量Hash值相等的情况后性能并不一定就会比B-Tree索引高。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;btree
与hash的缺点就是btree的特点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哈希(hash)比树(tree)更快，索引结构为什么要设计成树型？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;加速查找速度的数据结构，常见的有两类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哈希，例如HashMap，查询/插入/修改/删除的平均时间复杂度都是O(1)；&lt;/li&gt;
&lt;li&gt;树，例如平衡二叉搜索树，查询/插入/修改/删除的平均时间复杂度都是O(lg(n))；&lt;br&gt;
&lt;strong&gt;可以看到，不管是读请求，还是写请求，哈希类型的索引，都要比树型的索引更快一些，那为什么，索引结构要设计成树型呢？&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引设计成树形，和SQL的需求相关。
对于这样一个单行查询的SQL需求：&lt;code&gt;select * from t where name=”shenjian”;&lt;/code&gt;确实是哈希索引更快，因为每次都只查询一条记录。&lt;br&gt;
&lt;strong&gt;画外音：所以，如果业务需求都是单行访问，例如passport，确实可以使用哈希索引&lt;/strong&gt;
但是对于排序查询的SQL需求&lt;code&gt;分组：group by   排序：order by   比较：&amp;lt;、&amp;gt;  &lt;/code&gt;哈希型的索引，时间复杂度会退化为O(n)，而树型的“有序”特性，依然能够保持O(log(n)) 的高效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库索引为什么使用B+树？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#B+%E6%A0%91&#34;&gt;B+树了解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;二叉搜索树
&lt;img src=&#34;https://abnerxc.github.io/img/mysql-b.jpeg&#34; alt=&#34;&#34;&gt;
二叉搜索树，如上图，是最为大家所熟知的一种数据结构，就不展开介绍了，它为什么不适合用作数据库索引？&lt;br&gt;
(1)当数据量大的时候，树的高度会比较高，数据量大的时候，查询会比较慢；&lt;br&gt;
(2)每个节点只存储一个记录，可能导致一次查询有很多次磁盘IO；&lt;/li&gt;
&lt;li&gt;B树
&lt;img src=&#34;https://abnerxc.github.io/img/mysql-c.jpeg&#34; alt=&#34;&#34;&gt;
B树，如上图，它的特点是：&lt;br&gt;
(1)不再是二叉搜索，而是m叉搜索；&lt;br&gt;
(2)叶子节点，非叶子节点，都存储数据；&lt;br&gt;
(3)中序遍历，可以获得所有节点；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;树被作为实现索引的数据结构被创造出来，是因为它能够完美的利用“局部性原理”。&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;
&lt;p&gt;什么是回表查询？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;InnoDB聚集索引和普通索引有什么差异？
InnoDB聚集索引的叶子节点存储行记录，因此， InnoDB必须要有，且只有一个聚集索引：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果表定义了PK，则PK就是聚集索引；&lt;/li&gt;
&lt;li&gt;如果表没有定义PK，则第一个not NULL unique列是聚集索引；&lt;/li&gt;
&lt;li&gt;否则，InnoDB会创建一个隐藏的row-id作为聚集索引；
&lt;em&gt;&lt;strong&gt;所以PK查询非常快，直接定位行记录。&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;InnoDB普通索引的叶子节点存储主键值。
&lt;em&gt;&lt;strong&gt;注意，不是存储行记录头指针，MyISAM的索引叶子节点存储记录指针。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;回表查询过程
举个栗子，不妨设有表：t(id PK, name KEY, sex, flag);
表中有四条记录：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    1, shenjian, m, A
    3, zhangsan, m, A
    5, lisi, m, A
    9, wangwu, f, B
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/mysql-d.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;两个B+树索引分别如上图：
　　（1）id为PK，聚集索引，叶子节点存储行记录；
　　（2）name为KEY，普通索引，叶子节点存储PK值，即id；
既然从普通索引无法直接定位行记录，那普通索引的查询过程是怎么样的呢？
通常情况下，需要扫码两遍索引树。
例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from t where name=&amp;#39;lisi&amp;#39;;　 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/mysql-e.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;如红色路径，需要扫码两遍索引树：
（1）先通过普通索引定位到主键值id=5；
（2）在通过聚集索引定位到行记录；
这就是&lt;code&gt;回表查询&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引覆盖(Covering index)？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是索引覆盖
&lt;ul&gt;
&lt;li&gt;MySQL官网，类似的说法出现在explain查询计划优化章节，即&lt;code&gt;explain的输出结果Extra字段为Using index时，能够触发索引覆盖&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;不管是SQL-Server官网，还是MySQL官网，都表达了：&lt;code&gt;只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如何实现索引覆盖？
&lt;img src=&#34;https://abnerxc.github.io/img/mysql-f.jpeg&#34; alt=&#34;&#34;&gt;
能够命中name索引，索引叶子节点存储了主键id，通过name的索引树即可获取id和name，无需回表，符合索引覆盖，效率较高。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/mysql-h.jpeg&#34; alt=&#34;&#34;&gt;
能够命中name索引，索引叶子节点存储了主键id，但sex字段必须回表查询才能获取到，不符合索引覆盖，需要再次通过id值扫码聚集索引获取sex字段，效率会降低。
如果把(name)单列索引升级为&lt;code&gt;联合索引(name, sex)&lt;/code&gt;就不同了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/mysql-i.jpeg&#34; alt=&#34;&#34;&gt;
&lt;code&gt;都能够命中索引覆盖，无需回表&lt;/code&gt;。
3.  哪些场景可以利用索引覆盖来优化SQL？
1) 全表count查询优化 &lt;img src=&#34;https://abnerxc.github.io/img/mysql-j.jpeg&#34; alt=&#34;&#34;&gt;
2) 列查询回表优化(同上面的例子)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;非常隐蔽的全表扫描，不能命中索引&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;列类型&lt;/code&gt;与&lt;code&gt;where 值类型不符合&lt;/code&gt;不能命中索引，会导致全表扫描&lt;/li&gt;
&lt;li&gt;相&lt;code&gt;join&lt;/code&gt;的两个表的字符编码不同，不能命中索引，会导致迪卡尔积的运算&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库主键索引不宜太长？？（特指InnoDB）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MyISAM引擎，无影响。原因：进行检索时，会先从索引树定位到记录指针，再通过指针定位到具体的记录&lt;/li&gt;
&lt;li&gt;InnoDB通过主键索引查询时，能够直接定位到行记录。 原因：身份证号id_code是一个比较长的字符串，每个索引都存储这个值，在数据量大，内存珍贵的情况下，MySQL有限的缓冲区，存储的索引与数据会减少，磁盘IO的概率会增加。同时，索引占用的磁盘空间也会增加。&lt;/li&gt;
&lt;li&gt;总结
（1）MyISAM的索引与数据分开存储，索引叶子存储指针，主键索引与普通索引无太大区别；
（2）InnoDB的聚集索引和数据行统一存储，聚集索引存储数据行本身，普通索引存储主键；
（3）InnoDB不建议使用太长字段作为PK（此时可以加入一个自增键PK），MyISAM则无所谓；&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;like查询一定不命中索引吗？
mysql在使用like查询，%在最前面不会用到索引，中间或最后是会用到索引的，只是越靠前扫描的行数越多
&lt;img src=&#34;https://abnerxc.github.io/img/mysql-k.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引下推&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如对于user_table表，我们现在有（username,age）联合索引，如果现在有一个需求，查出名称中以“张”开头且年龄小于等于10的用户信息，语句如下：&amp;ldquo;select * from user_table where username like &amp;lsquo;张%&amp;rsquo; and age &amp;gt; 10&amp;rdquo;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;索引下推：like ‘zhang%’and age &amp;gt;10 检索，MySQL5.6版本之前，会对匹配的数据进行回表查询。5.6版本后，会先过滤掉age&amp;lt;10的数据，再进行回表查询，减少回表率，提升检索速度&lt;/li&gt;
&lt;li&gt;注意：
&lt;ol&gt;
&lt;li&gt;innodb引擎的表，索引下推只能用于二级索引。 原因：innodb的主键索引树叶子结点上保存的是全行数据，所以这个时候索引下推并不会起到减少查询全行数据的效果。&lt;/li&gt;
&lt;li&gt;索引下推一般可用于所求查询字段（select列）不是/不全是联合索引的字段，查询条件为多条件查询且查询条件子句（where/order by）字段全是联合索引。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;假设表t有联合索引（a,b）,下面语句可以使用索引下推提高效率&lt;code&gt;select * from t where a &amp;gt; 2 and b &amp;gt; 10&lt;/code&gt;;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;日志&#34;&gt;日志 &lt;a href=&#34;#%e6%97%a5%e5%bf%97&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;MySQL多少种日志
&lt;ul&gt;
&lt;li&gt;错误日志：记录mysql启动和运行的出错信息，也记录一些警告信息或者正确的信息，在my.cnf中log_error指定路径。&lt;/li&gt;
&lt;li&gt;查询日志：记录所有对数据库请求的信息，不论这些请求是否得到了正确的执行。&lt;/li&gt;
&lt;li&gt;慢查询日志：设置一个阈值（log_query_time），将运行时间超过该值的所有SQL语句都记录到慢查询的日志文件中。&lt;/li&gt;
&lt;li&gt;二进制日志：又叫做bin-log日志，纪录所有的写操作(增改删)，纪录一些执行时间，执行时长，数据变更等。主要用于&lt;code&gt;恢复、复制、审计&lt;/code&gt;，生成的文件格式mysql-bin.001..等一系列序号。&lt;/li&gt;
&lt;li&gt;中继日志：理解上relay log很多方面都跟binary log差不多。区别是：从服务器I/O线程将主服务器的二进制日志读取过来记录到从服务器本地文件，然后SQL线程会读取relay-log日志的内容并应用到从服务器，从而使从服务器和主服务器的数据保持一致&lt;/li&gt;
&lt;li&gt;事务日志： 事务日志文件名为&lt;code&gt;ib_logfile0&lt;/code&gt;和&lt;code&gt;ib_logfile1&lt;/code&gt;，默认存放在表空间所在目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MySQL binlog的几种日志录入格式以及区别
&lt;ul&gt;
&lt;li&gt;格式：&lt;code&gt;Statement&lt;/code&gt;,&lt;code&gt;Row&lt;/code&gt;，&lt;code&gt;Mixedlevel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;区别:
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于语句纪录（Statement ）:每一条会修改数据的sql都会记录在binlog中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：只需要记录执行语句的细节和上下文环境，避免了记录每一行的变化，在一些修改记录较多的情况下相比ROW level能大大减少binlog日志量，节约IO，提高性能；还可以用于实时的还原；&lt;/li&gt;
&lt;li&gt;缺点：为了保证sql语句能在slave上正确执行，必须记录上下文信息，以保证所有语句能在slave得到和在master端执行时候相同的结果；另外，主从复制时，存在部分函数（如sleep）及存储过程在slave上会出现与master结果不一致的情况，而相比Row level记录每一行的变化细节，绝不会发生这种不一致的情况.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于行（Row）：仅保存记录被修改细节，不记录sql语句上下文相关信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点： 能非常清晰的记录下每行数据的修改细节，不需要记录上下文相关信息，因此不会发生某些特定情况下的procedure、function、及trigger的调用触发无法被正确复制的问题，任何情况都可以被复制，且能加快从库重放日志的效率，保证从库数据的一致性&lt;/li&gt;
&lt;li&gt;缺点:由于所有的执行的语句在日志中都将以每行记录的修改细节来记录，因此，可能会产生大量的日志内容，干扰内容也较多；比如一条update语句，如修改多条记录，则binlog中每一条修改都会有记录，这样造成binlog日志量会很大，特别是当执行alter table之类的语句的时候，由于表结构修改，每条记录都发生改变，那么该表每一条记录都会记录到日志中，实际等于重建了表。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;混合模式（Mixedlevel）：是以上两种level的混合使用
一般的语句修改使用statment格式保存binlog，如一些函数，statement无法完成主从复制的操作，则 采用row格式保存binlog,MySQL会根据执行的每一条具体的sql语句来区分对待记录的日志形式，也就是在Statement和Row之间选择 一种.新版本的MySQL中队row level模式也被做了优化，并不是所有的修改都会以row level来记录，像遇到表结构变更的时候就会以statement模式来记录。至于update或者delete等修改数据的语句，还是会记录所有行的 变更。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...............................................................................
# at 552
#131128 17:50:46 server id 1  end_log_pos 665   Query   thread_id=11    exec_time=0     error_code=0 +++-&amp;gt;执行时间:17:50:46；pos点:665
SET TIMESTAMP=1385632246/*!*/;
update zyyshop.stu set name=&amp;#39;李四&amp;#39; where id=4              +++-&amp;gt;执行的SQL
/*!*/;
# at 665
#131128 17:50:46 server id 1  end_log_pos 692   Xid = 1454 +++-&amp;gt;执行时间:17:50:46；pos点:692 
...............................................................................
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;事物&#34;&gt;事物 &lt;a href=&#34;#%e4%ba%8b%e7%89%a9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据库事务特性(ACID)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原子性：即步骤要么都成功，要么都失败&lt;/li&gt;
&lt;li&gt;一致性：即操作的总数据量状态保证一致。例如A-&amp;gt;B转账总数木变化是100，不多也不少&lt;/li&gt;
&lt;li&gt;隔离性：即每个事物的操作，不影响其他的事物&lt;/li&gt;
&lt;li&gt;持久性：即一旦提交结果永久保存&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事物是如何通过日志实现的
&lt;img src=&#34;https://abnerxc.github.io/img/mysql-l.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;redo_log 实现持久化和原子性，而undo_log实现一致性，二种日志均可以视为一种恢复操作，redo_log是恢复提交事务修改的页操作，而undo_log是回滚行记录到特定版本。二者记录的内容也不同，redo_log是物理日志，记录页的物理修改操作，而undo_log是逻辑日志，根据每行记录进行记录。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;事务日志是通过redo(重做日志)和innodb的存储引擎日志缓冲（Innodb log buffer）来实现的，&lt;/li&gt;
&lt;li&gt;当开始一个事务的时候，会记录该事务的lsn(log sequence number)号;&lt;/li&gt;
&lt;li&gt;当事务执行时，会往InnoDB存储引擎的日志的日志缓存里面插入事务日志；&lt;/li&gt;
&lt;li&gt;当事务提交时，必须将存储引擎的日志缓冲写入磁盘（通过innodb_flush_log_at_trx_commit来控制），也就是写数据前，需要先写日志。这种方式称为“预写日志方式”&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事务干扰例子&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读脏&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- 事务A，先执行，处于未提交的状态：insert into t values(4, wangwu);
- 事务B，后执行，也未提交：select * from t;
如果事务B能够读取到(4, wangwu)这条记录，事务A就对事务B产生了影响，
这个影响叫做“读脏”，读到了未提交事务操作的记录。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;不可重复读&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- 事务A，先执行：select * from t where id=1;结果集为：1, zhangsan
- 事务B，后执行，并且提交：update t set name=xxoo where id=1;commit;
- 事务A，再次执行相同的查询：select * from t where id=1;结果集为：1, xxoo
这次是已提交事务B对事务A产生的影响，
这个影响叫做“不可重复读”，一个事务内相同的查询，得到了不同的结果。
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;幻读&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- 事务A，先执行：select * from t where id&amp;gt;3; 结果为null
- 事务B，后执行，并且提交：insert into t values(4, wangwu);commit;
- 事务A，首次查询了id&amp;gt;3的结果为NULL，于是想插入一条为4的记录：insert into t values(4, xxoo);结果集为：Error : duplicate key!
这次是已提交事务B对事务A产生的影响，这个影响叫做“幻读”。
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库的隔离级别&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;未提交读(Read Uncommitted)（S锁）: 此时，可能读取到不一致的数据，即“读脏”。这是并发最高，一致性最差的隔离级别。高并发量的场景下，几乎不会使用&lt;/li&gt;
&lt;li&gt;串行化(Serializable)（X锁）: 这种事务的隔离级别下，所有select语句都会被隐式的转化为select &amp;hellip; in share mode.这可能导致，如果有未提交的事务正在修改某些行，所有读取这些行的select都会被阻塞住。这是一致性最好的，但并发性最差的隔离级别。可以解决 脏读 不可重复读 和 虚读+++相当于锁表,所以高并发量的场景下，几乎不会使用&lt;/li&gt;
&lt;li&gt;可重复读(Repeated Read, RR)（X锁），这是InnoDB默认的隔离级别
(1) &lt;code&gt;普通的select&lt;/code&gt;使用快照读(snapshot read)，这是一种不加锁的一致性读(Consistent Nonlocking Read)，底层使用MVCC来实现
(2) &lt;code&gt;加锁的select&lt;/code&gt;(select &amp;hellip; in share mode / select &amp;hellip; for update), update, delete等语句，它们的锁，依赖于它们是否在唯一索引(unique index)上使用了唯一的查询条件(unique search condition)，或者范围查询条件(range-type search condition)：
&lt;ul&gt;
&lt;li&gt;在唯一索引上使用唯一的查询条件，会使用记录锁(record lock)，而不会封锁记录之间的间隔，即不会使用间隙锁(gap lock)与临键锁(next-key lock)&lt;/li&gt;
&lt;li&gt;范围查询条件，会使用间隙锁与临键锁，锁住索引记录之间的范围，避免范围间插入记录，以避免产生幻影行记录，以及避免不可重复的读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;读已提交(Read Committed, RC): 这是互联网最常用的隔离级别
&lt;ul&gt;
&lt;li&gt;普通读是快照读；&lt;/li&gt;
&lt;li&gt;加锁的select, update, delete等语句，除了在外键约束检查(foreign-key constraint checking)以及重复键检查(duplicate-key checking)时会封锁区间，其他时刻都只使用记录锁；&lt;/li&gt;
&lt;li&gt;此时，其他事务的插入依然可以执行，就可能导致，读取到幻影记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MVCC解释&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MVCC (Multiversion Concurrency Control)，即多版本并发控制技术,它使得大部分支持行锁的事务引擎，不再单纯的使用行锁来进行数据库的并发控制，取而代之的是把数据库的行锁与行的多个版本结合起来，只需要很小的开销,就可以实现非锁定读，从而大大提高数据库系统的并发性能&lt;/li&gt;
&lt;li&gt;核心原理
(1) 写任务发生时，将数据克隆一份，以版本号区分；
(2) 写任务操作新克隆的数据，直至提交；
(3) 并发读任务可以继续读取旧版本的数据，不至于阻塞；
&lt;img src=&#34;https://abnerxc.github.io/img/mysql-m.jpeg&#34; alt=&#34;&#34;&gt;
如上图：
&lt;ol&gt;
&lt;li&gt;最开始数据的版本是V0；&lt;/li&gt;
&lt;li&gt;T1时刻发起了一个写任务，这是把数据clone了一份，进行修改，版本变为V1，但任务还未完成；&lt;/li&gt;
&lt;li&gt;T2时刻并发了一个读任务，依然可以读V0版本的数据；&lt;/li&gt;
&lt;li&gt;T3时刻又并发了一个读任务，依然不会阻塞；
可以看到，数据多版本，通过“读取旧版本数据”能够极大提高任务的并发度。
提高并发的演进思路，就在如此：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;普通锁，本质是串行执行&lt;/li&gt;
&lt;li&gt;读写锁，可以实现读读并发&lt;/li&gt;
&lt;li&gt;数据多版本，可以实现读写并发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;锁&#34;&gt;锁 &lt;a href=&#34;#%e9%94%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/mysql-n.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;锁机制&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;悲观锁：利用了数据库内部提供的锁机制；在并发过程中一旦有一个事务持有了数据库记录的锁，其他线程就不能再对数据库进行更新&lt;/li&gt;
&lt;li&gt;乐观锁：乐观锁是一种不会阻塞其它线程并发的机制，它不会使用数据库的锁进行实现。所以就不会引起线程的频繁挂起和恢复，这样效率就提高了。它的实现关键在于CAS算法或者版本号机制。
&lt;ul&gt;
&lt;li&gt;版本号机制：
&lt;ol&gt;
&lt;li&gt;先读task表的数据（实际上这个表只有一条记录），得到version的值为versionValue&lt;/li&gt;
&lt;li&gt;update task set value = newValue,version =  versionValue + 1   where version = versionValue;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;CAS算法：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锁粒度&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;行锁详解
&lt;img src=&#34;https://abnerxc.github.io/img/mysql-o.jpeg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;li&gt;表锁详解&lt;/li&gt;
&lt;li&gt;页锁详解&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当前读与快照读&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前读
使用当前读的操作主要包括：显式加锁的读操作与插入/更新/删除等写操作，如下所示：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;select * from table where ? lock in share mode;
select * from table where ? for update;
insert into table values (…);
update table set ? where ?;
delete from table where ?;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;快照读
即不加锁读，读取记录的快照版本而非最新版本，通过MVCC实现；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;锁模式&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;锁模式&lt;/th&gt;
          &lt;th&gt;锁定内容&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Record Lock&lt;/td&gt;
          &lt;td&gt;记录锁,锁定一条纪录&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Gap Lock&lt;/td&gt;
          &lt;td&gt;间隙锁,锁定一个区间&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Next-key Lock&lt;/td&gt;
          &lt;td&gt;记录+间隙锁,锁定一个区间+记录行&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;网络&#34;&gt;网络 &lt;a href=&#34;#%e7%bd%91%e7%bb%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主从复制原理
&lt;img src=&#34;https://abnerxc.github.io/img/mysql-p.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mysql启动以后会存在2个进程，一个是sqlThred进程一个IOThred进程&lt;/li&gt;
&lt;li&gt;在Slave 服务器上执行sart slave命令开启主从复制开关，开始进行主从复制&lt;/li&gt;
&lt;li&gt;Slave服务器的IO线程会通过在master上已经授权的复制用户权限请求连接master服务器，并请求从执行binlog日志文件的指定位置之后开始发送binlog日志内容&lt;/li&gt;
&lt;li&gt;Master服务器接收到来自Slave服务器的IO线程的请求后，二进制转储IO线程会根据Slave服务器的IO线程请求的信息分批读取指定binlog日志文件指定位置之后的binlog日志信息，然后返回给Slave端的IO线程。返回的信息中除了binlog日志内容外，还有在master服务器端记录的新的binlog文件名称，以及在新的binlog中的下一个指定更新位置。&lt;/li&gt;
&lt;li&gt;当Slave服务器的IO线程获取到Master服务器上IO线程发送的日志内容、日志文件及位置点后，会将binlog日志内容依次写到Slave端自身的Relay Log（即中继日志）文件（MySQL-relay-bin.xxx）的最末端，并将新的binlog文件名和位置记录到master-info文件中，以便下一次读取master端新binlog日志时能告诉Master服务器从新binlog日志的指定文件及位置开始读取新的binlog日志内容&lt;/li&gt;
&lt;li&gt;Slave服务器端的SQL线程会实时检测本地Relay Log 中IO线程新增的日志内容，然后及时把Relay LOG 文件中的内容解析成sql语句，并在自身Slave服务器上按解析SQL语句的位置顺序执行应用这样sql语句，并在relay-log.info中记录当前应用中继日志的文件名和位置点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主从延迟的问题和解决办法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主从同步的延迟的原因：我们知道，一个服务器开放Ｎ个链接给客户端来连接的，　这样有会有大并发的更新操作, 但是从服务器的里面读取binlog 的线程仅有一个， 当某个SQL在从服务器上执行的时间稍长 或者由于某个SQL要进行锁表就会导致，主服务器的SQL大量积压，未被同步到从服务器里。这就导致了主从不一致， 也就是主从延迟。&lt;/li&gt;
&lt;li&gt;解决办法：
1）实际上主从同步延迟根本没有什么一招制敌的办法，因为所有的SQL必须都要在从服务器里面执行一遍，但是主服务器如果不断的有更新操作源源不断的写入，那么一旦有延迟产生，那么延迟加重的可能性就会原来越大。当然我们可以做一些缓解的措施。
2）我们知道因为主服务器要负责更新操作，他对安全性的要求比从服务器高，所有有些设置可以修改，比如sync_binlog=1，innodb_flush_log_at_trx_commit=1之类的设置，而slave则不需要这么高的数据安全，完全可以讲sync_binlog设置为0或者关闭binlog，innodb_flushlog，innodb_flush_log_at_trx_commit也可以设置为0来提高sql的执行效率这个能很大程度上提高效率。另外就是使用比主库更好的硬件设备作为slave。
3）就是把，一台从服务器当度作为备份使用，而不提供查询，那边他的负载下来了，执行relaylog里面的SQL效率自然就高了。
4）增加从服务器喽，这个目的还是分散读的压力，从而降低服务器负载。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;压力测试&#34;&gt;压力测试 &lt;a href=&#34;#%e5%8e%8b%e5%8a%9b%e6%b5%8b%e8%af%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://imysql.com/tag/%E5%8E%8B%E6%B5%8B&#34;&gt;https://imysql.com/tag/%E5%8E%8B%E6%B5%8B&lt;/a&gt;
比较常用的MySQL基准压力测试工具有 tpcc-mysql、sysbench、mysqlslap 等几个。
&lt;img src=&#34;https://abnerxc.github.io/img/mysql-q.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;延伸知识点&#34;&gt;延伸知识点 &lt;a href=&#34;#%e5%bb%b6%e4%bc%b8%e7%9f%a5%e8%af%86%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;mysql-count总结&#34;&gt;MYSQL count总结 &lt;a href=&#34;#mysql-count%e6%80%bb%e7%bb%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;COUNT有几种用法？count(*),count(常数)，count(列名)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;COUNT(字段名)和COUNT(&lt;em&gt;)的查询结果有什么不同？为什么《阿里巴巴Java开发手册》建议使用COUNT(&lt;/em&gt;)
count(&lt;em&gt;)是SQL92定义的标准语法，count(&lt;/em&gt;)会统计值为null的行，count(列明)不会统计改列为null的行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;COUNT(1)和COUNT(&lt;em&gt;)、count(列名)之间有什么不同？
COUNT(常量) 和 COUNT(&lt;/em&gt;)表示的是直接查询符合条件的数据库表的行数。而COUNT(列名)表示的是查询符合条件的列的值不为NULL的行数。
除了查询得到结果集有区别之外，COUNT(&lt;em&gt;)相比COUNT(常量) 和 COUNT(列名)来讲，COUNT(&lt;/em&gt;)是SQL92定义的标准统计行数的语法，因为他是标准语法，所以MySQL数据库对他进行过很多优化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;COUNT(1)和COUNT(*)之间的效率哪个更高？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;InnoDB handles SELECT COUNT(*) and SELECT COUNT(1) operations in the same way. There is no performance difference.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;画重点：same way , no performance difference。所以，对于COUNT(1)和COUNT(*)，MySQL的优化是完全一样的，根本不存在谁比谁快!&lt;/strong&gt;
建议使用COUNT(*)！因为这个是SQL92定义的标准统计行数的语法，而且本文只是基于MySQL做了分析，关于Oracle中的这个问题，也是众说纷纭的呢。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;
&lt;p&gt;MySQL的MyISAM引擎对COUNT(&lt;em&gt;)做了哪些优化？
因为MyISAM的锁是表级锁，所以同一张表上面的操作需要串行进行，所以，MyISAM做了一个简单的优化，那就是它可以把表的总行数单独记录下来，如果从一张表中使用COUNT(&lt;/em&gt;)进行查询的时候，可以直接返回这个记录下来的数值就可以了，当然，前提是不能有where条件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MySQL的InnoDB引擎对COUNT(&lt;em&gt;)做了哪些优化？
在InnoDB中，使用COUNT(&lt;/em&gt;)查询行数的时候，不可避免的要进行扫表了，那么，就可以在扫表过程中下功夫来优化效率了。
从MySQL 8.0.13开始，针对InnoDB的SELECT COUNT(&lt;em&gt;) FROM tbl_name语句，确实在扫表的过程中做了一些优化。前提是查询语句中不包含WHERE或GROUP BY等条件。
我们知道，COUNT(&lt;/em&gt;)的目的只是为了统计总行数，所以，他根本不关心自己查到的具体值，所以，他如果能够在扫表的过程中，选择一个成本较低的索引进行的话，那就可以大大节省时间。
我们知道，InnoDB中索引分为聚簇索引（主键索引）和非聚簇索引（非主键索引），聚簇索引的叶子节点中保存的是整行记录，而非聚簇索引的叶子节点中保存的是该行记录的主键的值。
所以，相比之下，非聚簇索引要比聚簇索引小很多，所以MySQL会优先选择最小的非聚簇索引来扫表。所以，当我们建表的时候，除了主键索引以外，创建一个非主键索引还是有必要的。
至此，我们介绍完了MySQL数据库对于COUNT(*)的优化，这些优化的前提都是查询语句中不包含WHERE以及GROUP BY条件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上面提到的MySQL对COUNT(*)做的优化，有一个关键的前提是什么？
无where条件或者group by等条件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;什么是局部性原理&#34;&gt;什么是局部性原理？ &lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e5%b1%80%e9%83%a8%e6%80%a7%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;局部性原理的逻辑是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内存读写块，磁盘读写慢，而且慢很多；&lt;/li&gt;
&lt;li&gt;磁盘预读：磁盘读写并不是按需读取，而是按页预读，一次会读一页的数据，每次加载更多的数据，如果未来要读取的数据就在这一页中，可以避免未来的磁盘IO，提高效率；（通常，一页数据是4K）&lt;/li&gt;
&lt;li&gt;局部性原理：软件设计要尽量遵循“数据读取集中”与“使用到一个数据，大概率会使用其附近的数据”，这样磁盘预读能充分提高磁盘IO；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;b树为何适合做索引&#34;&gt;B树为何适合做索引？ &lt;a href=&#34;#b%e6%a0%91%e4%b8%ba%e4%bd%95%e9%80%82%e5%90%88%e5%81%9a%e7%b4%a2%e5%bc%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;由于是m分叉的，高度能够大大降低；&lt;/li&gt;
&lt;li&gt;每个节点可以存储j个记录，如果将节点大小设置为页大小，例如4K，能够充分的利用预读的特性，极大减少磁盘IO；&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;b树&#34;&gt;&lt;a id=&#34;B+树&#34;&gt;B+树&lt;/a&gt; &lt;a href=&#34;#b%e6%a0%91&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/mysql-r.jpeg&#34; alt=&#34;&#34;&gt;
B树的插入及平衡化操作和2-3树很相似，这里就不介绍了。下面是往B树中依次插入
&lt;code&gt;6 10 4 14 5 11 15 3 2 12 1 7 8 8 6 3 6 21 5 15 15 6 32 23 45 65 7 8 6 5 4&lt;/code&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/mysql-s.gif&#34; alt=&#34;&#34;&gt;
B+树，如上图，仍是m叉搜索树，在B树的基础上，做了一些改进：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非叶子节点不再存储数据，数据只存储在同一层的叶子节点上；（画外音：B+树中根到每一个节点的路径长度一样，而B树不是这样。）&lt;/li&gt;
&lt;li&gt;叶子之间，增加了链表，获取所有节点，不再需要中序遍历；
这些改进让B+树比B树有更优的特性：&lt;/li&gt;
&lt;li&gt;范围查找，定位min与max之后，中间叶子节点，就是结果集，不用中序回溯；（画外音：范围查询在SQL中用得很多，这是B+树比B树最大的优势。）&lt;/li&gt;
&lt;li&gt;叶子节点存储实际记录行，记录行相对比较紧密的存储，适合大数据量&lt;font color=red&gt;磁盘存储&lt;/font&gt;；非叶子节点存储记录的PK，用于查询加速，适合&lt;font color=red&gt;内存存储&lt;/font&gt;；&lt;/li&gt;
&lt;li&gt;非叶子节点，不存储实际记录，而只存储记录的KEY的话，那么在相同内存的情况下，B+树能够存储更多索引；
最后，量化说下，为什么m叉的B+树比二叉搜索树的高度大大大大降低？
大概计算一下：
(1)局部性原理，将一个节点的大小设为一页，一页4K，假设一个KEY有8字节，一个节点可以存储500个KEY，即j=500
(2)m叉树，大概m/2&amp;lt;= j &amp;lt;=m，即可以差不多是1000叉树
(3)那么：
一层树：1个节点，1&lt;em&gt;500个KEY，大小4K
二层树：1000个节点，1000&lt;/em&gt;500=50W个KEY，大小1000&lt;em&gt;4K=4M
三层树：1000&lt;/em&gt;1000个节点，1000&lt;em&gt;1000&lt;/em&gt;500=5亿个KEY，大小1000&lt;em&gt;1000&lt;/em&gt;4K=4G
可以看到，存储大量的数据（5亿），并不需要太高树的深度（高度3），索引也不是太占内存（4G）。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>redis总结</title>
      <link>https://abnerxc.github.io/note/redis-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 25 Jan 2021 22:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/note/redis-%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;h1 id=&#34;redis为什么那么快&#34;&gt;Redis为什么那么快 &lt;a href=&#34;#redis%e4%b8%ba%e4%bb%80%e4%b9%88%e9%82%a3%e4%b9%88%e5%bf%ab&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;纯内存操作&lt;/li&gt;
&lt;li&gt;单线程操作，避免了频繁的上下文切换&lt;/li&gt;
&lt;li&gt;采用了非阻塞I/O多路复用机制
我们的redis-client在操作的时候，会产生具有不同事件类型的socket。在服务端，有一段I/0多路复用程序，将其置入队列之中。然后，文件事件分派器，依次去队列中取，转发到不同的事件处理器中。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;redis数据类型&#34;&gt;Redis数据类型 &lt;a href=&#34;#redis%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;String,Hash,List,Set,SortedSet&lt;/li&gt;
&lt;li&gt;Pub/Sub&lt;/li&gt;
&lt;li&gt;HyperLogLog(2.8.9版本新增):用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。使用场景最常见的就是计算网站UV等，对数据精度要求不高&lt;/li&gt;
&lt;li&gt;Geo（3.2版本新增）：GEO(地理位置)的支持，主要是对经纬度一个位置计算等特性&lt;/li&gt;
&lt;li&gt;BitMap&lt;/li&gt;
&lt;li&gt;BloomFilter
&lt;img src=&#34;https://abnerxc.github.io/img/redis-i.jpeg&#34; alt=&#34;data-struct&#34;&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/redis-j.jpeg&#34; alt=&#34;data-struct&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;redis的过期策略以及内存淘汰机制&#34;&gt;Redis的过期策略以及内存淘汰机制 &lt;a href=&#34;#redis%e7%9a%84%e8%bf%87%e6%9c%9f%e7%ad%96%e7%95%a5%e4%bb%a5%e5%8f%8a%e5%86%85%e5%ad%98%e6%b7%98%e6%b1%b0%e6%9c%ba%e5%88%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;三种过期策略&#34;&gt;三种过期策略 &lt;a href=&#34;#%e4%b8%89%e7%a7%8d%e8%bf%87%e6%9c%9f%e7%ad%96%e7%95%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;定时删除：在设置键的过期时间的同时，创建一个定时器(timer)，让定时器在键的过期时间来临时，立即执行对键的删除操作；&lt;/li&gt;
&lt;li&gt;惰性删除：放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话，就删除该键；如果没有过期，那就返回该键；&lt;/li&gt;
&lt;li&gt;定期删除：每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。至于删除多少过期键，以及要检查多少个数据库，则由算法决定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Redis采用的是定期删除+惰性删策略。&lt;br&gt;
为什么不用定时删除策略？定时删除策略需要定时器来监视key，过期则自动删除。虽然内存及时释放了，但是CPU消耗大。在大并发的情况下，这一策略得不偿失&lt;/p&gt;
&lt;p&gt;Redis采用的是定期删除+惰性删策略工作机制。&lt;br&gt;
定期删除，redis默认每100ms检查一次是否存在过期key，有则删除。需要说明的是redis并不是100ms检查所有的key一次，而是随机进行抽取检查。因此，惰性删除派上用处。
惰性删策略延伸出来的问题就是，redis缓存淘汰机制&lt;/p&gt;
&lt;h2 id=&#34;redis30版本6种缓存淘汰机制&#34;&gt;Redis(3.0版本)6种缓存淘汰机制 &lt;a href=&#34;#redis30%e7%89%88%e6%9c%ac6%e7%a7%8d%e7%bc%93%e5%ad%98%e6%b7%98%e6%b1%b0%e6%9c%ba%e5%88%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1.  no-enviction(驱逐)：禁止驱逐数据（不删除数据策略，达到最大的内存限制时，如果有更多的数据写入，返回错误给客户端）
2.  allkeys-lru：所有key通用，优先删除最少使用的key（less recently used,LRU算法）
3.  allkeys-random ：所有key通用，随机删除一部分key
4.  volatile-lru：只限于设置了expire的部分，优先删除最少使用的key（less recently used,LRU算法）
5.  volatile-random：只限于设置了 expire 的部分; 随机删除一部分key
6.  volatile-ttl：只限于设置了 expire 的部分; 优先删除剩余时间(time to live,TTL) 短的key。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：如果没有设置 expire 的key, 不满足先决条件(prerequisites); 那么 volatile-lru, volatile-random 和 volatile-ttl 策略的行为, 和 noeviction(不删除) 基本上一致。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般来说：如果分为热数据与冷数据, 推荐使用allkeys-lru策略。 也就是, 其中一部分key经常被读写. 如果不确定具体的业务特征, 那么allkeys-lru是一个很好的选择。 如果需要循环读写所有的key, 或者各个key的访问频率差不多, 可以使用allkeys-random策略, 即读写所有元素的概率差不多。&lt;/p&gt;
&lt;p&gt;假如要让 Redis 根据 TTL 来筛选需要删除的key, 请使用volatile-ttl策略。&lt;/p&gt;
&lt;h1 id=&#34;redis持久化原理&#34;&gt;Redis持久化原理 &lt;a href=&#34;#redis%e6%8c%81%e4%b9%85%e5%8c%96%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;快照特点bgsave做镜像全量持久化&#34;&gt;快照（特点：bgsave做镜像全量持久化） &lt;a href=&#34;#%e5%bf%ab%e7%85%a7%e7%89%b9%e7%82%b9bgsave%e5%81%9a%e9%95%9c%e5%83%8f%e5%85%a8%e9%87%8f%e6%8c%81%e4%b9%85%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;缺省情况下，Redis把数据快照存放在磁盘上的二进制文件中，文件名为dump.rdb。你可以配置Redis的持久化策略，例如数据集中每N秒钟有超过M次更新，就将数据写入磁盘；或者你可以手工调用命令SAVE或BGSAVE。
工作原理:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;主进程开启一个 Redis forks（子进程）.&lt;/li&gt;
&lt;li&gt;子进程开始将数据写到临时RDB文件中。&lt;/li&gt;
&lt;li&gt;当子进程完成写RDB文件，用新文件替换老文件。&lt;/li&gt;
&lt;li&gt;bgsave的原理是什么？你给出两个词汇就可以了，fork和cow。fork是指redis通过创建子进程来进行bgsave操作，cow指的是copy on write，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。
&lt;img src=&#34;https://abnerxc.github.io/img/redis-k.jpeg&#34; alt=&#34;fork&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;aof特点aof增量持久化&#34;&gt;AOF（特点：AOF增量持久化） &lt;a href=&#34;#aof%e7%89%b9%e7%82%b9aof%e5%a2%9e%e9%87%8f%e6%8c%81%e4%b9%85%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AOF持久化以日志的形式记录服务器所处理的每一个写、删除操作，查询操作不会记录，以文本的方式记录，可以打开文件看到详细的操作记录。
&lt;img src=&#34;https://abnerxc.github.io/img/redis-l.jpeg&#34; alt=&#34;aof&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;redis主从复制30开始支持原理&#34;&gt;Redis主从复制(3.0开始支持)原理 &lt;a href=&#34;#redis%e4%b8%bb%e4%bb%8e%e5%a4%8d%e5%88%b630%e5%bc%80%e5%a7%8b%e6%94%af%e6%8c%81%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;全量同步&#34;&gt;全量同步 &lt;a href=&#34;#%e5%85%a8%e9%87%8f%e5%90%8c%e6%ad%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;当启动一个slave node的时候，它会发送一个PSYNC命令给master&lt;/li&gt;
&lt;li&gt;如果这是slave node重新链接master，master会将缺少的数据发送给slave，如果是第一次链接master，则会触发一次full resynchronization,开始 full resynchronization的时候，master启动一个后台线程，先将现有数据生成一个零时的rdb文件，生成文件后，master会将这个rdb文件发送给slave，slave会先把这个rdb文件存放到本地磁盘，然后在加载到内存，然后master会将生成rdb这段时间内接收到的在内存中的数据发送给slave，slave也会接收这份数据。&lt;/li&gt;
&lt;li&gt;slave如果跟master网络故障，断开了，当重新连接上以后，master发现有多个slave都来重新连接，master会生成一个rdb文件，将这个文件同时发送个多个slave node
&lt;img src=&#34;https://abnerxc.github.io/img/redis-m.jpeg&#34; alt=&#34;full_sync&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;主从复制的断点续传&#34;&gt;主从复制的断点续传 &lt;a href=&#34;#%e4%b8%bb%e4%bb%8e%e5%a4%8d%e5%88%b6%e7%9a%84%e6%96%ad%e7%82%b9%e7%bb%ad%e4%bc%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;redis从2.8开始就支持断点续传功能，即当slave与master断开后，重新连接时，会继续从上一次断开的点继续传送数据，而不是full resynchronization。&lt;/li&gt;
&lt;li&gt;master会在内存中创建一个backlog，master和slave都会保存一个offset,slave还有一个master id,offset就是保存在backlog中的，如果slave和master网络断开，重新连接后slave会让master从replica offset开始续传。但是如果没有找到offset，则会触发full resynchronization。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;无磁盘化复制&#34;&gt;无磁盘化复制 &lt;a href=&#34;#%e6%97%a0%e7%a3%81%e7%9b%98%e5%8c%96%e5%a4%8d%e5%88%b6&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;master在内存中直接创建rdb,然后直接发送给slave,不会存入本地磁盘&lt;/li&gt;
&lt;li&gt;参数配置&lt;br&gt;
repl-diskless-sync&lt;br&gt;
repl-diskless-sync-delay, 等待一定时长在复制，因为要等更多的slave重新连接&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;过期key处理&#34;&gt;过期key处理 &lt;a href=&#34;#%e8%bf%87%e6%9c%9fkey%e5%a4%84%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;slave不会有过期Key,只有master有过期key,如果master过期了一个可以或者通过LRU算法淘汰了一个key，那么master会模拟发送一个del命令给slave&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;redis-cluster集群&#34;&gt;Redis-Cluster集群 &lt;a href=&#34;#redis-cluster%e9%9b%86%e7%be%a4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/redis-n.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有的redis节点彼此互联(PING-PONG机制),内部使用二进制协议优化传输速度和带宽。&lt;/li&gt;
&lt;li&gt;节点的fail是通过集群中超过半数的节点检测失效时才生效。&lt;/li&gt;
&lt;li&gt;客户端与redis节点直连,不需要中间proxy层.客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可。&lt;/li&gt;
&lt;li&gt;redis-cluster把所有的物理节点映射到[0-16383]slot上（不一定是平均分配）,cluster 负责维护node&amp;lt;-&amp;gt;slot&amp;lt;-&amp;gt;value。&lt;/li&gt;
&lt;li&gt;Redis集群预分好16384个桶，当需要在 Redis 集群中放置一个 key-value 时，根据 CRC16(key) mod 16384的值，决定将一个key放到哪个桶中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为什么是16384（2^14）个？
在redis节点发送心跳包时需要把所有的槽放到这个心跳包里，以便让节点知道当前集群信息，16384=16k，在发送心跳包时使用char进行bitmap压缩后是2k（2 * 8 (8 bit) * 1024(1k) = 2K），也就是说使用2k的空间创建了16k的槽数。&lt;/p&gt;
&lt;p&gt;虽然使用CRC16算法最多可以分配65535（2^16-1）个槽位，65535=65k，压缩后就是8k（8 * 8 (8 bit) * 1024(1k) = 8K），也就是说需要需要8k的心跳包，作者认为这样做不太值得；并且一般情况下一个redis集群不会有超过1000个master节点，所以16k的槽位是个比较合适的选择。&lt;/p&gt;
&lt;h1 id=&#34;redis哨兵&#34;&gt;Redis哨兵 &lt;a href=&#34;#redis%e5%93%a8%e5%85%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;在Server1 掉线后：
&lt;img src=&#34;https://abnerxc.github.io/img/redis-p1.jpeg&#34; alt=&#34;&#34;&gt;
升级Server2 为新的主服务器：
&lt;img src=&#34;https://abnerxc.github.io/img/redis-p2.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sentinel的作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Master 状态监测&lt;/li&gt;
&lt;li&gt;如果Master 异常，则会进行Master-slave 转换，将其中一个Slave作为Master，将之前的Master作为Slave&lt;/li&gt;
&lt;li&gt;Master-Slave切换后，master_redis.conf、slave_redis.conf和sentinel.conf的内容都会发生改变，即master_redis.conf中会多一行slaveof的配置，sentinel.conf的监控目标会随之调换&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sentinel的工作方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个Sentinel以每秒钟一次的频率向它所知的Master，Slave以及其他 Sentinel 实例发送一个 PING 命令&lt;/li&gt;
&lt;li&gt;如果一个实例（instance）距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 选项所指定的值， 则这个实例会被 Sentinel 标记为主观下线。&lt;/li&gt;
&lt;li&gt;如果一个Master被标记为主观下线，则正在监视这个Master的所有 Sentinel 要以每秒一次的频率确认Master的确进入了主观下线状态。&lt;/li&gt;
&lt;li&gt;当有足够数量的 Sentinel（大于等于配置文件指定的值）在指定的时间范围内确认Master的确进入了主观下线状态， 则Master会被标记为客观下线&lt;/li&gt;
&lt;li&gt;在一般情况下， 每个 Sentinel 会以每 10 秒一次的频率向它已知的所有Master，Slave发送 INFO 命令&lt;/li&gt;
&lt;li&gt;当Master被 Sentinel 标记为客观下线时，Sentinel 向下线的 Master 的所有 Slave 发送 INFO 命令的频率会从 10 秒一次改为每秒一次&lt;/li&gt;
&lt;li&gt;若没有足够数量的 Sentinel 同意 Master 已经下线， Master 的客观下线状态就会被移除。&lt;/li&gt;
&lt;li&gt;若 Master 重新向 Sentinel 的 PING 命令返回有效回复， Master 的主观下线状态就会被移除。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;redis和数据库双写一致性问题&#34;&gt;Redis和数据库双写一致性问题 &lt;a href=&#34;#redis%e5%92%8c%e6%95%b0%e6%8d%ae%e5%ba%93%e5%8f%8c%e5%86%99%e4%b8%80%e8%87%b4%e6%80%a7%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;一致性问题是分布式系统常见问题，可以分为最终一致性和强一致性。所以弄清诉求
数据库强一致性，不放缓存，我们所做的一切只是保证最终一致性，另外无法完全避免，讨论三种更新策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先更新数据库，再更新缓存&lt;/li&gt;
&lt;li&gt;先删除缓存，再更新数据库&lt;/li&gt;
&lt;li&gt;先更新数据库，再删除缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;先更新数据库再更新缓存&#34;&gt;先更新数据库，再更新缓存 &lt;a href=&#34;#%e5%85%88%e6%9b%b4%e6%96%b0%e6%95%b0%e6%8d%ae%e5%ba%93%e5%86%8d%e6%9b%b4%e6%96%b0%e7%bc%93%e5%ad%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这套方案，大家是普遍反对的，为什么呢？有如下两点原因：
原因一、线程安全问题，同时有请求A和请求B进行更新操作，那么会出现：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;线程A更新了数据库
线程B更新了数据库
线程B更新了缓存
线程A更新了缓存
这就出现请求A更新缓存应该比请求B更新缓存早才对，但是因为网络等原因，B比A更早更新了缓存。这就导致了脏数据，因此不考虑！
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原因二、业务场景考虑&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果是写数据库场景比较多，读数据库场景比较少业务需求。&amp;ldquo;先更新数据库，再更新缓存&amp;quot;这种方案会导致，数据压根还没读到，缓存就被频繁的更新浪费性能&lt;/li&gt;
&lt;li&gt;如果写入数据库是经过复杂计算以后再更新数据库，那么每次写入数据库后更新缓存，性能存在浪费&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;先删除缓存再更新数据库&#34;&gt;先删除缓存，再更新数据库 &lt;a href=&#34;#%e5%85%88%e5%88%a0%e9%99%a4%e7%bc%93%e5%ad%98%e5%86%8d%e6%9b%b4%e6%96%b0%e6%95%b0%e6%8d%ae%e5%ba%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;该方案会导致不一致的原因：同时有一个请求A进行更新操作，另一个请求B进行查询操作。那么就会出现以下情形：
情况一：多进程读写原因&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;请求A进行写操作，删除缓存
请求B查询发现缓存不存在
请求B去数据库查询得到旧值
请求B将旧值写入缓存
请求A将新值写入数据库
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上诉请求出现不一致的情况，如果没采用缓存过期策略。则缓存数据一直是脏数据。&lt;/p&gt;
&lt;p&gt;情况二：MYSQL主从分离原因&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;请求A进行写操作，删除缓存；
请求A将数据写入数据库了；
请求B查询缓存发现，缓存没有值；
请求B去从库查询，这时，还没有完成主从同步，因此查询到的是旧值；
请求B将旧值写入缓存；
数据库完成主从同步，从库变为新值；
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解决方案：采用延迟双删策略。先删除缓存，再删除数据库，进程休眠1秒再次删除缓存&lt;/p&gt;
&lt;h2 id=&#34;先更新数据库再删除缓存&#34;&gt;先更新数据库，再删除缓存 &lt;a href=&#34;#%e5%85%88%e6%9b%b4%e6%96%b0%e6%95%b0%e6%8d%ae%e5%ba%93%e5%86%8d%e5%88%a0%e9%99%a4%e7%bc%93%e5%ad%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这种情况不存在并发问题么？
不是的。假设这会有两个请求，一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;缓存刚好失效；&lt;/li&gt;
&lt;li&gt;请求A查询数据库，得一个旧值；&lt;/li&gt;
&lt;li&gt;请求B将新值写入数据库；&lt;/li&gt;
&lt;li&gt;请求B删除缓存；&lt;/li&gt;
&lt;li&gt;请求A将查到的旧值写入缓存；
ok，如果发生上述情况，确实是会发生脏数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决方案：发生上述情况有一个先天性条件，就是上述步骤（3）的写数据库操作比步骤（2）的读数据库操作耗时更短，才有可能使得步骤（4）先于步骤（5）。可是，大家想想，数据库的读操作的速度远快于写操作的（不然做读写分离干嘛，做读写分离的意义就是因为读操作比较快，耗资源少），因此步骤（3）耗时比步骤（2）更短，这一情形很难出现。  首先，给缓存设有效时间是一种方案。其次，采用策略2（先删除缓存，再更新数据库）里给出的异步延时删除策略，保证读请求完成以后，再进行删除操作。&lt;/p&gt;
&lt;h1 id=&#34;如何解决redis的并发竞争key问题&#34;&gt;如何解决redis的并发竞争key问题 &lt;a href=&#34;#%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3redis%e7%9a%84%e5%b9%b6%e5%8f%91%e7%ab%9e%e4%ba%89key%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;分析:这个问题大致就是，同时有多个子系统去set一个key。这个时候要注意什么呢？大家思考过么。需要说明一下，博主提前百度了一下，发现答案基本都是推荐用redis事务机制。博主不推荐使用redis的事务机制。因为我们的生产环境，基本都是redis集群环境，做了数据分片操作。你一个事务中有涉及到多个key操作的时候，这多个key不一定都存储在同一个redis-server上。因此，redis的事务机制，十分鸡肋。&lt;/p&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果对key操作不要求顺序&lt;br&gt;
这种情况下，准备一个分布式锁，谁抢到锁谁set即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果对key操作要求顺序&lt;br&gt;
假设有一个key1,系统A需要将key1设置为valueA,系统B需要将key1设置为valueB,系统C需要将key1设置为valueC.&lt;br&gt;
期望按照key1的value值按照 valueA–&amp;gt;valueB–&amp;gt;valueC的顺序变化。这种时候我们在数据写入数据库的时候，需要保存一个时间戳。假设时间戳如下&lt;br&gt;
系统A key 1 {valueA 3:00}&lt;br&gt;
系统B key 1 {valueB 3:05}&lt;br&gt;
系统C key 1 {valueC 3:10}&lt;br&gt;
那么，假设这会系统B先抢到锁，将key1设置为{valueB 3:05}。接下来系统A抢到锁，发现自己的valueA的时间戳早于缓存中的时间戳，那就不做set操作了。以此类推。&lt;br&gt;
或者使用队列，将set操作进行串联即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;redis常见性能问题和解决方案&#34;&gt;redis常见性能问题和解决方案 &lt;a href=&#34;#redis%e5%b8%b8%e8%a7%81%e6%80%a7%e8%83%bd%e9%97%ae%e9%a2%98%e5%92%8c%e8%a7%a3%e5%86%b3%e6%96%b9%e6%a1%88&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。&lt;/li&gt;
&lt;li&gt;Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。&lt;/li&gt;
&lt;li&gt;Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。&lt;/li&gt;
&lt;li&gt;Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;redis60-多线程&#34;&gt;Redis6.0 多线程 &lt;a href=&#34;#redis60-%e5%a4%9a%e7%ba%bf%e7%a8%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;其实本质只是在网络IO上面实现了多线程读取和写入，然后进行执行队列，执行还是单线程
&lt;img src=&#34;https://abnerxc.github.io/img/redis-q.jpeg&#34; alt=&#34;1.jpeg&#34;&gt;
加入多线程 IO 之后，整体的读流程如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主线程负责接收建连请求，读事件到来(收到请求)则放到一个全局等待读处理队列&lt;/li&gt;
&lt;li&gt;主线程处理完读事件之后，通过 RR(Round Robin) 将这些连接分配给这些 IO 线程，然后主线程忙等待(spinlock 的效果)状态&lt;/li&gt;
&lt;li&gt;IO 线程将请求数据读取并解析完成(这里只是读数据和解析并不执行)&lt;/li&gt;
&lt;li&gt;主线程执行所有命令并清空整个请求等待读处理队列(执行部分串行)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的这个过程是完全无锁的，因为在 IO 线程处理的时主线程会等待全部的 IO 线程完成，所以不会出现data race的场景。&lt;/p&gt;
&lt;h1 id=&#34;redis新特性&#34;&gt;Redis新特性 &lt;a href=&#34;#redis%e6%96%b0%e7%89%b9%e6%80%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Redis Module&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任何C/C++程序现在都可以运行在Redis上&lt;/li&gt;
&lt;li&gt;Modules是用一种本地的方式来扩展Redis的新用例和功能&lt;/li&gt;
&lt;li&gt;使用现有的或者添加新的数据结构&lt;/li&gt;
&lt;li&gt;享受简单，无限可扩展性和高可用性的同时保持着redis的本机的速度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis Search
高性能的全文搜索引擎（Faster, in-memory, highly available full text search），可作为Redis Module运行在Redis上。但是它与其他Redis搜索库不同的是，它不使用Redis内部数据结构，例如：集合、排序集（ps.后面会写一篇基于Redis的数据结构来设计搜索引擎），Redis原声的搜索还是有很大的局限性，简单的分词搜索是可以满足，但是应用到复杂的场景就不太适合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Redis ML
机器学习模型服务器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>单线程的redis为什么快</title>
      <link>https://abnerxc.github.io/note/redis-%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84redis%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%AB/</link>
      <pubDate>Mon, 25 Jan 2021 22:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/note/redis-%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84redis%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%AB/</guid>
      <description>&lt;h1 id=&#34;基本概念&#34;&gt;基本概念 &lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Redis性能如此高的原因，我总结了如下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;纯内存操作&lt;/li&gt;
&lt;li&gt;单线程&lt;/li&gt;
&lt;li&gt;高效的数据结构&lt;/li&gt;
&lt;li&gt;合理的数据编码&lt;/li&gt;
&lt;li&gt;其他方面的优化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Redis 中，常用的几种数据结构和应用场景如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;String：缓存、计数器、分布式锁等。&lt;/li&gt;
&lt;li&gt;List：链表、队列、微博关注人时间轴列表等。&lt;/li&gt;
&lt;li&gt;Hash：用户信息、Hash 表等。&lt;/li&gt;
&lt;li&gt;Set：去重、赞、踩、共同好友等。&lt;/li&gt;
&lt;li&gt;Zset：访问量排行榜、点击量排行榜等。&lt;/li&gt;
&lt;li&gt;HyperLogLog: 网站UV,独立IP计算等，主要也是一些去重计算，对数据精度要求不高，主要由于计算数据空间是固定的&lt;/li&gt;
&lt;li&gt;Geo：GEO(地理位置)的支持，主要是对经纬度一个位置计算等特性&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;内部数据结构&#34;&gt;内部数据结构 &lt;a href=&#34;#%e5%86%85%e9%83%a8%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;redis的底层数据结构有以下7种，包括&lt;code&gt;简单动态字符串(SDS)，链表、字典、跳跃表、整数集合、压缩列表、对象&lt;/code&gt;。
&lt;img src=&#34;https://abnerxc.github.io/img/redis-d.jpeg&#34; alt=&#34;1.jpeg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;简单动态字符串sds&#34;&gt;简单动态字符串(SDS) &lt;a href=&#34;#%e7%ae%80%e5%8d%95%e5%8a%a8%e6%80%81%e5%ad%97%e7%ac%a6%e4%b8%b2sds&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Redis 是用 C 语言开发完成的，但在 Redis 字符串中，并没有使用 C 语言中的字符串，而是用一种称为 SDS（Simple Dynamic String）的结构体来保存字符串。
在redis数据库里，包含字符串值的键值对在底层都是由SDS实现的。除了用来保存数据库中的字符串值之外，sds还被用来作缓冲区（buffer）：AOF（一种持久化策略）模块中的AOF缓冲区，以及客户端状态中的输入缓冲区，都是由SDS实现的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/redis-e.jpeg&#34; alt=&#34;1.jpeg&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct __attribute__ ((__packed__)) sdshdr64 {
    uint64_t len; /*  记录buff数组中已使用字节的数量 */   
    uint64_t free; /* 记录未使用字节数量*/
    char buf[]; /*存储实际内容*/
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如：执行命令 set key value，key 和 value 都是一个 SDS 类型的结构存储在内存中。&lt;/p&gt;
&lt;h2 id=&#34;sds-与-c-字符串的区别&#34;&gt;SDS 与 C 字符串的区别 &lt;a href=&#34;#sds-%e4%b8%8e-c-%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%9a%84%e5%8c%ba%e5%88%ab&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;常数时间内获得字符串长度:
C 字符串本身不记录长度信息，每次获取长度信息都需要遍历整个字符串，复杂度为 O(n)；C 字符串遍历时遇到&amp;rsquo;\0‘ 时结束。
SDS 中 len 字段保存着字符串的长度，所以总能在常数时间内获取字符串长度，复杂度是 O(1)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免缓冲区溢出
假设在内存中有两个紧挨着的两个字符串，s1=&amp;ldquo;xxxxx&amp;quot;和 s2=&amp;ldquo;yyyyy&amp;rdquo;&lt;br&gt;
由于在内存上紧紧相连，当我们对 s1 进行扩充的时候，将 s1=“xxxxxzzzzz”后，由于没有进行相应的内存重新分配，导致 s1 把 s2 覆盖掉，导致 s2 被莫名其妙的修改。&lt;br&gt;
但 SDS 的 API 对 zfc 修改时首先会检查空间是否足够，若不充足则会分配新空间，避免了缓冲区溢出问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;减少字符串修改时带来的内存重新分配的次数&#34;&gt;减少字符串修改时带来的内存重新分配的次数 &lt;a href=&#34;#%e5%87%8f%e5%b0%91%e5%ad%97%e7%ac%a6%e4%b8%b2%e4%bf%ae%e6%94%b9%e6%97%b6%e5%b8%a6%e6%9d%a5%e7%9a%84%e5%86%85%e5%ad%98%e9%87%8d%e6%96%b0%e5%88%86%e9%85%8d%e7%9a%84%e6%ac%a1%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;由于C语言修改字符需要重新分配空间&lt;br&gt;
而SDS实现了预分配和惰性释放&lt;br&gt;
预分配规则：SDS空间进行扩充时，会分配足够的内存空间还会分配额外未使用的空间。如果对 SDS 修改后，len 的长度小于 1M，那么程序将分配和 len 相同长度的未使用空间。举个例子，如果 len=10，重新分配后，buf 的实际长度会变为 10(已使用空间)+10(额外空间)+1(空字符)=21。如果对 SDS 修改后 len 长度大于 1M，那么程序将分配 1M 的未使用空间。&lt;/p&gt;
&lt;p&gt;惰性空间释放：当对 SDS 进行缩短操作时，程序并不会回收多余的内存空间，而是使用 free 字段将这些字节数量记录下来不释放，后面如果需要 append 操作，则直接使用 free 中未使用的空间，减少了内存的分配。&lt;/p&gt;
&lt;h1 id=&#34;3字典hash&#34;&gt;3.字典(Hash) &lt;a href=&#34;#3%e5%ad%97%e5%85%b8hash&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Redis底层hash结构如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;typedef struct dict{
      dictType *type;
    void *privdata;
    dictht ht[2];
    int trehashidx;
}


typedef struct dictht{
    //哈希表数组
    dectEntrt **table;
    //哈希表大小
    unsigned long size;
    //
    unsigned long sizemask;
    //哈希表已有节点数量
    unsigned long used;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;重要的两个字段是 dictht 和 trehashidx&lt;/p&gt;
&lt;h2 id=&#34;rehash&#34;&gt;Rehash &lt;a href=&#34;#rehash&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Rehash解释：随着操作的不断执行， 哈希表保存的键值对会逐渐地增多或者减少， 为了让哈希表的负载因子（load factor）维持在一个合理的范围之内， 当哈希表保存的键值对数量太多或者太少时， 程序需要对哈希表的大小进行相应的扩展或者收缩。扩展和收缩哈希表的工作可以通过执行 rehash （重新散列）操作来完成&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;由上段代码，我们可知 dict 中存储了一个 dictht 的数组，长度为 2，表明这个数据结构中实际存储着两个哈希表 ht[0] 和 ht[1]，为什么要存储两张 hash 表呢？&lt;br&gt;
当然是为了Rehash,Rehash的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为 ht[1] 分配空间。如果是扩容操作，ht[1] 的大小为第一个大于等于 ht[0].used*2 的 2^n；如果是缩容操作，ht[1] 的大小为第一个大于等于 ht[0].used 的 2^n。&lt;/li&gt;
&lt;li&gt;将 ht[0] 中的键值 Rehash 到 ht[1] 中。&lt;/li&gt;
&lt;li&gt;当 ht[0] 全部迁移到 ht[1] 中后，释放 ht[0]，将 ht[1] 置为 ht[0]，并为 ht[1] 创建一张新表，为下次 Rehash 做准备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;渐进式-rehash&#34;&gt;渐进式 Rehash &lt;a href=&#34;#%e6%b8%90%e8%bf%9b%e5%bc%8f-rehash&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;上面提到的如果ht[0]全部移动到ht[1]中，如果数据量小很快，如果数据量很大则会有影响使用
所以redis采用了分多次、渐进式的迁移策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为 ht[1] 分配空间，让字典同时拥有 ht[0] 和 ht[1] 两个哈希表。&lt;/li&gt;
&lt;li&gt;字典中维护一个 rehashidx，并将它置为 0，表示 Rehash 开始。&lt;/li&gt;
&lt;li&gt;在 Rehash 期间，每次对字典操作时，程序还顺便将 ht[0] 在 rehashidx 索引上的所有键值对 rehash 到 ht[1] 中，当 Rehash 完成后，将 rehashidx 属性+1。当全部 rehash 完成后，将 rehashidx 置为 -1，表示 rehash 完成。
注意，由于维护了两张 Hash 表，所以在 Rehash 的过程中内存会增长。另外，在 Rehash 过程中，字典会同时使用 ht[0] 和 ht[1]。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以在删除、查找、更新时会在两张表中操作，在查询时会先在第一张表中查询，如果第一张表中没有，则会在第二张表中查询。但新增时一律会在 ht[1] 中进行，确保 ht[0] 中的数据只会减少不会增加。&lt;/p&gt;
&lt;h1 id=&#34;4-zset底层&#34;&gt;4. Zset底层 &lt;a href=&#34;#4-zset%e5%ba%95%e5%b1%82&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;zset底层的存储结构包括ziplist或skiplist，在同时满足以下两个条件的时候使用ziplist，其他时候使用skiplist，两个条件如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有序集合保存的元素数量小于128个&lt;/li&gt;
&lt;li&gt;有序集合保存的所有元素的长度小于64字节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当ziplist作为zset的底层存储结构时候，每个集合元素使用两个紧挨在一起的压缩列表节点来保存，第一个节点保存元素的成员，第二个元素保存元素的分值。&lt;/p&gt;
&lt;p&gt;当skiplist作为zset的底层存储结构的时候，使用skiplist按序保存元素及分值，使用dict来保存元素和分值的映射关系。&lt;/p&gt;
&lt;p&gt;ziplist数据结构
&lt;img src=&#34;https://abnerxc.github.io/img/redis-f.jpeg&#34; alt=&#34;1.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;skiplist数据结构
 skiplist作为zset的存储结构，整体存储结构如下图，核心点主要是包括一个dict对象和一个skiplist对象。dict保存key/value，key为元素，value为分值；skiplist保存的有序的元素列表，每个元素包括元素和分值。两种数据结构下的元素指向相同的位置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/redis-g.jpeg&#34; alt=&#34;1.jpeg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;5-set底层&#34;&gt;5. Set底层 &lt;a href=&#34;#5-set%e5%ba%95%e5%b1%82&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;set的底层存储intset和hashtable是存在编码转换的，使用intset存储必须满足下面两个条件，否则使用hashtable，条件如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结合对象保存的所有元素都是整数值&lt;/li&gt;
&lt;li&gt;集合对象保存的元素数量不超过512个&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;typedef struct intset {
    // 编码方式
    uint32_t encoding;
    // 集合包含的元素数量
    uint32_t length;
    // 保存元素的数组
    int8_t contents[];
} intset;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;set的单个元素的添加过程，首先如果已经是hashtable的编码，那么我们就走正常的hashtable的元素添加，如果原来是intset的情况，那么我们就需要进行如下判断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果能够转成int的对象（isObjectRepresentableAsLongLong），那么就用intset保存。&lt;/li&gt;
&lt;li&gt;如果用intset保存的时候，如果长度超过512（REDIS_SET_MAX_INTSET_ENTRIES）就转为hashtable编码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;list底层&#34;&gt;List底层 &lt;a href=&#34;#list%e5%ba%95%e5%b1%82&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;redis list数据结构底层采用压缩列表ziplist或linkedlist两种数据结构进行存储，首先以ziplist进行存储，在不满足ziplist的存储要求后转换为linkedlist列表。
 当列表对象同时满足以下两个条件时，列表对象使用ziplist进行存储，否则用linkedlist存储。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表对象保存的所有字符串元素的长度小于64字节&lt;/li&gt;
&lt;li&gt;列表对象保存的元素数量小于512个。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;编码转化&#34;&gt;编码转化 &lt;a href=&#34;#%e7%bc%96%e7%a0%81%e8%bd%ac%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Redis 使用对象（redisObject）来表示数据库中的键值，当我们在 Redis 中创建一个键值对时，至少创建两个对象，一个对象是用做键值对的键对象，另一个是键值对的值对象。&lt;/p&gt;
&lt;p&gt;例如我们执行 SET MSG XXX 时，键值对的键是一个包含了字符串“MSG“的对象，键值对的值对象是包含字符串”XXX”的对象。&lt;/p&gt;
&lt;p&gt;redisObject 的结构如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;typedef struct redisObject{
    //类型
   unsigned type:4;
   //编码
   unsigned encoding:4;
   //指向底层数据结构的指针
   void *ptr;
    //...
 }robj;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 type 字段记录了对象的类型，包含字符串对象、列表对象、哈希对象、集合对象、有序集合对象。&lt;br&gt;
ptr 指针字段指向对象底层实现的数据结构，而这些数据结构是由 encoding 字段决定的，每种对象至少有两种数据编码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://abnerxc.github.io/img/redis-h.jpeg&#34; alt=&#34;1.jpeg&#34;&gt;
可以通过 object encoding key 来查看对象所使用&lt;/p&gt;
&lt;h2 id=&#34;string-对象的编码转化&#34;&gt;String 对象的编码转化 &lt;a href=&#34;#string-%e5%af%b9%e8%b1%a1%e7%9a%84%e7%bc%96%e7%a0%81%e8%bd%ac%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;String 对象的编码可以是 int 或 raw，对于 String 类型的键值，如果我们存储的是纯数字，Redis 底层采用的是 int 类型的编码，如果其中包括非数字，则会立即转为 raw 编码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; set str 1
OK
127.0.0.1:6379&amp;gt; object encoding str
&amp;#34;int&amp;#34;
127.0.0.1:6379&amp;gt; set str 1a
OK
127.0.0.1:6379&amp;gt; object encoding str
&amp;#34;raw&amp;#34;
127.0.0.1:6379&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;list-对象的编码转化&#34;&gt;List 对象的编码转化 &lt;a href=&#34;#list-%e5%af%b9%e8%b1%a1%e7%9a%84%e7%bc%96%e7%a0%81%e8%bd%ac%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;List 对象的编码可以是ziplist 或 linkedlist，对于 List 类型的键值，当列表对象同时满足以下两个条件时，采用 ziplist 编码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表对象保存的所有字符串元素的长度都小于 64 字节。&lt;/li&gt;
&lt;li&gt;列表对象保存的元素个数小于 512 个。
如果不满足这两个条件的任意一个，就会转化为 linkedlist 编码。注意：这两个条件是可以修改的，在 redis.conf 中：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;list-max-ziplist-entries 512
list-max-ziplist-value 64
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;set-类型的编码转化&#34;&gt;Set 类型的编码转化 &lt;a href=&#34;#set-%e7%b1%bb%e5%9e%8b%e7%9a%84%e7%bc%96%e7%a0%81%e8%bd%ac%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Set 对象的编码可以是 intset 或 hashtable，intset 编码的结构对象使用整数集合作为底层实现，把所有元素都保存在一个整数集合里面。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd set 1 2 3
(integer) 3
127.0.0.1:6379&amp;gt; object encoding set
&amp;#34;intset&amp;#34;
127.0.0.1:6379&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果 set 集合中保存了非整数类型的数据时，Redis 会将 intset 转化为 hashtable：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;127.0.0.1:6379&amp;gt; sadd set 1 2 3
(integer) 3
127.0.0.1:6379&amp;gt; object encoding set
&amp;#34;intset&amp;#34;
127.0.0.1:6379&amp;gt; sadd set a
(integer) 1
127.0.0.1:6379&amp;gt; object encoding set
&amp;#34;hashtable&amp;#34;
 127.0.0.1:6379&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当 Set 对象同时满足以下两个条件时，对象采用 intset 编码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保存的所有元素都是整数值（小数不行）。&lt;/li&gt;
&lt;li&gt;Set 对象保存的所有元素个数小于 512 个。
不能满足这两个条件的任意一个，Set 都会采用 hashtable 存储。注意：第两个条件是可以修改的，在 redis.conf 中：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;set-max-intset-entries 512
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;hash-对象的编码转化&#34;&gt;Hash 对象的编码转化 &lt;a href=&#34;#hash-%e5%af%b9%e8%b1%a1%e7%9a%84%e7%bc%96%e7%a0%81%e8%bd%ac%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Hash 对象的编码可以是 ziplist 或 hashtable，当 Hash 以 ziplist 编码存储的时候，保存同一键值对的两个节点总是紧挨在一起，键节点在前，值节点在后：
当 Hash 对象同时满足以下两个条件时，Hash 对象采用 ziplist 编码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash 对象保存的所有键值对的键和值的字符串长度均小于 64 字节。&lt;/li&gt;
&lt;li&gt;Hash 对象保存的键值对数量小于 512 个。
如果不满足以上条件的任意一个，ziplist 就会转化为 hashtable 编码。注意：这两个条件是可以修改的，在 redis.conf 中：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hash-max-ziplist-entries 512
hash-max-ziplist-value 64
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;zset-对象的编码转化&#34;&gt;Zset 对象的编码转化 &lt;a href=&#34;#zset-%e5%af%b9%e8%b1%a1%e7%9a%84%e7%bc%96%e7%a0%81%e8%bd%ac%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Zset 对象的编码可以是 ziplist 或 zkiplist，当采用 ziplist 编码存储时，每个集合元素使用两个紧挨在一起的压缩列表来存储。&lt;/p&gt;
&lt;p&gt;第一个节点存储元素的成员，第二个节点存储元素的分值，并且按分值大小从小到大有序排列。&lt;/p&gt;
&lt;p&gt;当 Zset 对象同时满足一下两个条件时，采用 ziplist 编码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zset 保存的元素个数小于 128。&lt;/li&gt;
&lt;li&gt;Zset 元素的成员长度都小于 64 字节。
如果不满足以上条件的任意一个，ziplist 就会转化为 zkiplist 编码。注意：这两个条件是可以修改的，在 redis.conf 中：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;zset-max-ziplist-entries 128
zset-max-ziplist-value 64
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>缓存穿透、雪崩、击穿的解决方法</title>
      <link>https://abnerxc.github.io/note/rdis-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 25 Jan 2021 22:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/note/rdis-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;1缓存穿透&#34;&gt;1.缓存穿透 &lt;a href=&#34;#1%e7%bc%93%e5%ad%98%e7%a9%bf%e9%80%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。&lt;br&gt;
例如下图:&lt;br&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/redis-a.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;11解决办法&#34;&gt;1.1解决办法 &lt;a href=&#34;#11%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将不存在的key设置默认的值&lt;/p&gt;
&lt;p&gt;如果有人利用ID攻击应用，可以将这个key预先设置一个null或者程序可判断的值，决定应用是否进行下面的执行。当缓存失效或者缓存key经过轮训以后不再为空，则进行程序的后续执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;布隆过滤器&lt;/p&gt;
&lt;p&gt;简单的说，bloom算法类似一个hash set,用来判断某个元素的key是否存在集合中。和一般的hash set不同的是，这个算法无需存储key的值，值需要k个比特位，每个存在一个标志，用来判断key是否存在集合中。&lt;br&gt;
算法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先需要k个hasn函数，每个函数可以把key散列成为1个整数&lt;/li&gt;
&lt;li&gt;初始化时，需要一个长度为n比特的数组，每个比特位初始化为0&lt;/li&gt;
&lt;li&gt;某个key加入集合时，用k个hash函数计算出k个散列值，并把数组中对应的比特位设置为1&lt;/li&gt;
&lt;li&gt;判断某个key是否在集合时，用k个hash函数计算出k个散列值，并查询数组中对应的比特位，如果所有的比特位都是1，则认为在集合中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优点:不需要存储key，节省空间&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;算法判断key在集合时，有一定的概率key其实不在集合中&lt;/li&gt;
&lt;li&gt;无法删除&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2缓存雪崩&#34;&gt;2.缓存雪崩 &lt;a href=&#34;#2%e7%bc%93%e5%ad%98%e9%9b%aa%e5%b4%a9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;大量的key设置了相同的过期时间，导致在缓存在同一时刻失效，造成DB的请求大、压力大，引起雪崩&lt;/p&gt;
&lt;h2 id=&#34;21解决办法&#34;&gt;2.1解决办法 &lt;a href=&#34;#21%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;从业务层面。可以给缓存设置过期时间上加上一个随机值，使得每个key的过期时间分布开来，不会集中在同一时刻&lt;/p&gt;
&lt;h1 id=&#34;3-缓存击穿并发&#34;&gt;3. 缓存击穿（并发） &lt;a href=&#34;#3-%e7%bc%93%e5%ad%98%e5%87%bb%e7%a9%bf%e5%b9%b6%e5%8f%91&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。&lt;/p&gt;
&lt;h2 id=&#34;31解决办法&#34;&gt;3.1解决办法 &lt;a href=&#34;#31%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用互斥锁：让一个线程构建缓存，其他线程等待等待构建缓存的线程执行完，从新从缓存中获取数据就行（如下图）
&lt;img src=&#34;https://abnerxc.github.io/img/redis-b.jpeg&#34; alt=&#34;&#34;&gt;
如果是单机，可以用synchronize或者lock来处理，如果是分布式环境可以使用分布式锁（memcached的add、redis的setnx,zookeeper的添加节点）,当缓存构建完成以后释放分布式锁&lt;/li&gt;
&lt;li&gt;后台刷新：定义个Job专门主动刷新缓存，比如缓存30分钟，那么Job可以设置每隔29分钟定时将DB数据刷新缓存中。&lt;code&gt;这种方案适合key相对固定，cache粒度较大&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;检查更新：将缓存的过期时间（绝对时间）一起保存到缓存中（可以是key拼接，或者value中存放字段），在每次只需get操作以后都将get出来的缓存与当前系统时间进行比较，缓存时间-当前时间&amp;lt;=1分钟（自定义时间阈值），则主动更新缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;4-如何解决缓存单机热点问题&#34;&gt;4. 如何解决缓存单机热点问题 &lt;a href=&#34;#4-%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3%e7%bc%93%e5%ad%98%e5%8d%95%e6%9c%ba%e7%83%ad%e7%82%b9%e9%97%ae%e9%a2%98&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;分布式缓存一致性hash算法解决&lt;br&gt;
&lt;img src=&#34;https://abnerxc.github.io/img/redis-c.jpeg&#34; alt=&#34;&#34;&gt;&lt;br&gt;
简单概述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一致性hash算法通过构造一个长度为2^32的整数环&lt;/li&gt;
&lt;li&gt;根据节点名（或者服务器IP等信息）的hash值将缓存服务器节点放置在这个环上&lt;/li&gt;
&lt;li&gt;计算需要缓存的key的hash值，顺时针找到最近的的服务器节点，将数据存放在该节点上&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>逆向环境-杂</title>
      <link>https://abnerxc.github.io/android/%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 25 Jan 2021 22:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/android/%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;h1 id=&#34;usb找不到设备&#34;&gt;USB找不到设备 &lt;a href=&#34;#usb%e6%89%be%e4%b8%8d%e5%88%b0%e8%ae%be%e5%a4%87&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;windows-环境&#34;&gt;windows 环境 &lt;a href=&#34;#windows-%e7%8e%af%e5%a2%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;找不到设备:右键电脑属性-&amp;gt;设备管理器-&amp;gt;便携设备-&amp;gt;属性-&amp;gt;详细信息-&amp;gt;属性（硬件id）,把硬件id复制到C:\Users\xxxx.android\adb_usb.ini文件中,填入&lt;code&gt;0x12345&lt;/code&gt;,12345替换成设备ID,然后重启adb服务&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;macos环境&#34;&gt;macOS环境 &lt;a href=&#34;#macos%e7%8e%af%e5%a2%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;执行&lt;code&gt;system_profiler SPUSBDataType&lt;/code&gt;里面找到Android的Vendor ID&lt;/li&gt;
&lt;li&gt;将vendor id的值写入 /User/你对应的用户文件夹/.android/adb_usb.ini文件。若该文件不存在，则新建一个。&lt;/li&gt;
&lt;li&gt;adb kill-server &amp;amp;&amp;amp; adb start-server &amp;amp;&amp;amp;  adb devices&lt;/li&gt;
&lt;li&gt;华为手机无法识别：https://www.jianshu.com/p/8c19fb78a680&lt;/li&gt;
&lt;li&gt;首先关闭mac&lt;code&gt;sip&lt;/code&gt;黑苹果在recovery模式下去关闭也可以,mac夜神abd找不到,找到app包下面的adb命令：&lt;code&gt;/app包路径/adb connect 127.0.0.1:62001&lt;/code&gt; 连接以后，可以发现设备了&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;面具root隐藏&#34;&gt;面具root隐藏 &lt;a href=&#34;#%e9%9d%a2%e5%85%b7root%e9%9a%90%e8%97%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;首先：移除系统的支付APP检查，例如miui的&lt;code&gt;手机管家-&amp;gt;支付保护中心&lt;/code&gt;关闭APP保护，&lt;/li&gt;
&lt;li&gt;方案一：面具设置，新版的magisk已增加了zygisk排除列表，我们可以通过这个排除列表去排除需要隐藏的应用，打开magisk，点右上角的设置图标，在设置里找到zygisk打开，然后打开遵循排除列表，在配置排除列表里把需要隐藏的应用打上钩。&lt;/li&gt;
&lt;li&gt;方案二：(建议使用适用APP更广)如果有些APP还是无法隐藏，面具里面安装&lt;code&gt;Shamiko&lt;/code&gt;插件，&lt;code&gt;https://github.com/LSPosed/LSPosed.github.io/releases&lt;/code&gt; ，在使用Magisk官方版24+开启Zygisk和遵守排除列表隐藏root之后，排除列表内被隐藏root了的app就没法在LSP模块内勾选了，会显示在排除列表内，然后呈灰色状态无法勾选。&lt;code&gt;使用Shamiko的时候必须关闭遵守排除列表这个开关。&lt;/code&gt;,后续在配置排除列表里把需要隐藏的应用打上钩。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;面具root后过环境检测&#34;&gt;面具root后过环境检测 &lt;a href=&#34;#%e9%9d%a2%e5%85%b7root%e5%90%8e%e8%bf%87%e7%8e%af%e5%a2%83%e6%a3%80%e6%b5%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;关闭magisk的Zygisk开关，刷入&lt;code&gt;Zygisk-Next&lt;/code&gt;模块，代替面具的Zygisk模块，重启手机&lt;/li&gt;
&lt;li&gt;刷入&lt;code&gt;Shamiko&lt;/code&gt;模块，重启手机&lt;/li&gt;
&lt;li&gt;刷入&lt;code&gt;LSPosed&lt;/code&gt;框架模块，重启手机&lt;/li&gt;
&lt;li&gt;刷入&lt;code&gt;PlayIntegrityFix&lt;/code&gt;模块,注意这个模块需要开启翻墙，隐藏bootloader环境检测，重启手机&lt;/li&gt;
&lt;li&gt;然后在&lt;code&gt;magisk&lt;/code&gt;排除列表去排除需要隐藏的应用,如&lt;code&gt;momo检测&lt;/code&gt;就可以过了&lt;/li&gt;
&lt;li&gt;【注意：如果TEE受损】：刷入&lt;code&gt;Tricky-Store&lt;/code&gt;和&lt;code&gt;TrickyAddonModule&lt;/code&gt;增强模块，这个模块可以解决某些设备上密钥证明不完整或损坏的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;抓包&#34;&gt;抓包 &lt;a href=&#34;#%e6%8a%93%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;简单app网页调试&#34;&gt;简单APP网页调试 &lt;a href=&#34;#%e7%ae%80%e5%8d%95app%e7%bd%91%e9%a1%b5%e8%b0%83%e8%af%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;chrome浏览器输入：&lt;code&gt;chrome://inspect/#devices&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安卓开启USB调试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;证书安装&#34;&gt;证书安装 &lt;a href=&#34;#%e8%af%81%e4%b9%a6%e5%ae%89%e8%a3%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;说明：安卓7.0以上，需要解锁BL和root权限&lt;/li&gt;
&lt;li&gt;Charles配置 &lt;code&gt;help-&amp;gt;SSL Proxying-&amp;gt;install charels root cer&lt;/code&gt;  安装电脑证书，mac证书查看详情 信任证书&lt;/li&gt;
&lt;li&gt;保存证书配置 &lt;code&gt;help-&amp;gt;SSL Proxying-&amp;gt;save charels root cer&lt;/code&gt;  安装电脑证书，mac证书查看详情 信任证书&lt;/li&gt;
&lt;li&gt;转换证书：&lt;code&gt;openssl x509 -inform DER -in charles-ssl-proxying-certificate.cer -out imac.crt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多格式转换命令:&lt;code&gt;openssl x509 -inform PEM -outform DER -in {yourcert.pem} -out {yourcert.crt}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;charles无法下载证书:证书保存到本地,adb push 文件路径  &lt;code&gt;/sdcard/Download&lt;/code&gt;; 设置—更多设置—系统安全—加密与凭据—从存储设备安装证书，先清除所有凭据，后选择SD卡安装&lt;/li&gt;
&lt;li&gt;安装证书：
&lt;ul&gt;
&lt;li&gt;进入以下目录：&lt;code&gt;/data/misc/user/0/cacerts-added&lt;/code&gt; 可以看到刚才安装的证书&lt;code&gt;.0&lt;/code&gt;结尾的&lt;/li&gt;
&lt;li&gt;将system分区挂在为可读写 &lt;code&gt;mount -o rw,remount /system&lt;/code&gt; , 如果有的版本报错可以替换 &lt;code&gt;mount -o rw,remount /&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp /data/misc/user/0/cacerts-added/xx.0  /system/etc/security/cacerts/&lt;/code&gt; ,并将权限改成644,（&lt;code&gt;chmod -R 644 /system/etc/security/cacerts/xx.0&lt;/code&gt;）,重启设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完成以上配置，大部分APP可以抓包了，如果出现反抓包，看下面解决办法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;反抓包解决iptables--redsocks2--charles-透明代理抓包&#34;&gt;(反抓包解决)iptables + redsocks2 + Charles 透明代理抓包 &lt;a href=&#34;#%e5%8f%8d%e6%8a%93%e5%8c%85%e8%a7%a3%e5%86%b3iptables--redsocks2--charles-%e9%80%8f%e6%98%8e%e4%bb%a3%e7%90%86%e6%8a%93%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;先打开你的APP，然后&lt;code&gt;ps -ef | grep com.xxx.xxxxx&lt;/code&gt;命令找到有你的应用包名那一行，第一列就是uid
通常你看到的是u0_a428这样的，那么后面的命令，uid相关的可以写成&lt;code&gt;u0_a428&lt;/code&gt;，也可以写成&lt;code&gt;10428&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透明代理下载，&lt;code&gt;https://fh0.github.io/assets/android-redsocks2.tgz&lt;/code&gt; , 把redsocks.conf和redsocks2_arm64推送到手机&lt;code&gt;/data/local/tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;redsocks.conf配置如下 ,其中&lt;code&gt;bind&lt;/code&gt;就是透明代理地址，&lt;code&gt;relay&lt;/code&gt;就是Charles的代理地址 ,注意配置文件的每一对&lt;code&gt;{}&lt;/code&gt;后面都应该有一个空行，否则会提示&lt;code&gt;unclosed section&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;base {
    log_debug = off;
    log_info = on;
    log = stderr;
    daemon = off;
    redirector = iptables;
} 

redsocks {
    bind = &amp;#34;127.0.0.1:16677&amp;#34;; #本地透明代理地址
    relay = &amp;#34;192.168.3.141:7777&amp;#34;;  # Charles Socks-Proxy代理地址
    type = socks5;
    autoproxy = 0;
    timeout = 13;
} 
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;推送&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;adb push redsocks2_arm64 /data/local/tmp/
adb push redsocks.conf /data/local/tmp/
adb shell 
su
chmod +x /data/local/tmp/redsocks2_arm64
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;iptables配置：
&lt;ul&gt;
&lt;li&gt;保存开机后的iptables方法:&lt;code&gt;iptables-save &amp;gt; /data/local/tmp/iptables.rules&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;恢复方法： &lt;code&gt;重启手机&lt;/code&gt;，&lt;/li&gt;
&lt;li&gt;配置转发
&lt;ul&gt;
&lt;li&gt;(全转发)配置全转发&lt;code&gt;iptables -t nat -A OUTPUT -p tcp ! -d 127.0.0.1 -m owner --uid-owner 10172 --dport 0:65535 -j DNAT --to-destination 127.0.0.1:16677&lt;/code&gt;, 作用是：将uid为10428所请求的在0-65535端口上的tcp流量，转发到127.0.0.1:16677，但是排除了来自127.0.0.1的请求&lt;/li&gt;
&lt;li&gt;(按端口转发)配置端口抓包,如80，443&lt;code&gt;iptables -t nat -A OUTPUT -p tcp ! -d 127.0.0.1 -m owner --uid-owner 10172 -m multiport --dports 80,443 -j DNAT --to-destination 127.0.0.1:16677&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除规则&lt;code&gt;iptables -t nat -D OUTPUT -p tcp ! -d 127.0.0.1 -m owner --uid-owner 10172 --dport 0:65535 -j DNAT --to-destination 127.0.0.1:16677&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;启动 &lt;code&gt;cd /data/local/tmp/ &amp;amp;&amp;amp; ./redsocks2_arm64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看代理工具的socks代理流量&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常用工具下载地址&#34;&gt;常用工具下载地址 &lt;a href=&#34;#%e5%b8%b8%e7%94%a8%e5%b7%a5%e5%85%b7%e4%b8%8b%e8%bd%bd%e5%9c%b0%e5%9d%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;无需root沙箱抓包工具:https://github.com/android-hacker/VirtualXposed&lt;/li&gt;
&lt;li&gt;JustTrustMe:https://github.com/Fuzion24/JustTrustMe&lt;/li&gt;
&lt;li&gt;安装搞基助手apk:https://github.com/liuran001/GJZS&lt;/li&gt;
&lt;li&gt;SSLUnpinning:https://github.com/ac-pm/SSLUnpinning_Xposed\&lt;/li&gt;
&lt;li&gt;frida: &lt;a href=&#34;https://github.com/frida/frida/releases&#34;&gt;https://github.com/frida/frida/releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;反编译工具：https://github.com/iBotPeaches/Apktool/releases&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mac安装集合工具&#34;&gt;mac安装集合工具 &lt;a href=&#34;#mac%e5%ae%89%e8%a3%85%e9%9b%86%e5%90%88%e5%b7%a5%e5%85%b7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;adb &lt;code&gt;brew cask install android-platform-tools&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;java-sdk安装&lt;/li&gt;
&lt;li&gt;安卓sdk-tools: &lt;a href=&#34;https://www.androiddevtools.cn/&#34;&gt;https://www.androiddevtools.cn/&lt;/a&gt; 下载build-tools&lt;/li&gt;
&lt;li&gt;jadx-gui: &lt;code&gt;brew install jadx 启动方法：jadx-gui&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;scrcpy: 远程投屏安卓手机 &lt;a href=&#34;https://github.com/Genymobile/scrcpy&#34;&gt;https://github.com/Genymobile/scrcpy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;特别mac在pd虚拟机安装win10中的模拟器&#34;&gt;特别：mac在PD虚拟机安装win10中的模拟器 &lt;a href=&#34;#%e7%89%b9%e5%88%abmac%e5%9c%a8pd%e8%99%9a%e6%8b%9f%e6%9c%ba%e5%ae%89%e8%a3%85win10%e4%b8%ad%e7%9a%84%e6%a8%a1%e6%8b%9f%e5%99%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;win管理员运行 win10 转发端口&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;netsh interface portproxy add v4tov4 5555 127.0.0.1 5555 #模拟器端口转发到外网
netsh interface portproxy del v4tov4 listenport=5555 #删除端口转发

#firda抓包
adb.exe forward tcp:27042 tcp:27042
adb.exe forward tcp:27043 tcp:27043
netsh interface portproxy add v4tov4 27042 127.0.0.1 27042 #firda抓包转发外网
netsh interface portproxy add v4tov4 27043 127.0.0.1 27043 #firda抓包转发外网

雷电模拟器
emulator-5554   device  实际端口：5555
emulator-5556   device  实际端口：5557  ，雷电是+2的端口递增
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;win查看端口转发
&lt;code&gt;netsh interface portproxy show all&lt;/code&gt;
mac 远程连接pd中win10的模拟器
&lt;code&gt;adb connect 192.168.0.3:62001&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;adb导出命令&#34;&gt;adb导出命令 &lt;a href=&#34;#adb%e5%af%bc%e5%87%ba%e5%91%bd%e4%bb%a4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;打印出来所有安装到手机上的APP包名 : &lt;code&gt;adb  pm list package&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找出安装后的包名应用的apk所在位置 : &lt;code&gt;adb  pm path com.ccb.longjiLife&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载：&lt;code&gt;adb pull /data/app/com.ccb.longjiLife-MXDTkEBGW2u_cAwg20D4JQ==/base.apk  /Users/abner/Downloads/apk&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;刷入twrp操作&#34;&gt;刷入twrp操作 &lt;a href=&#34;#%e5%88%b7%e5%85%a5twrp%e6%93%8d%e4%bd%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;红米note9-5g版本操作&#34;&gt;红米note9 5G版本操作 &lt;a href=&#34;#%e7%ba%a2%e7%b1%b3note9-5g%e7%89%88%e6%9c%ac%e6%93%8d%e4%bd%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;手机进入fastboot&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;adb reboot bootloader
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;刷入 TWRP&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;fastboot flash recovery /Users/abner/Downloads/RedmiNote95g-twrp.img
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;为防止重启手机 MIUI 自动替换回官方 Recovery，按住手机&lt;code&gt;音量上键&lt;/code&gt;，命令行同时执行&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;fastboot reboot recovery
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;在进入 TWRP 后，挂载“系统分区为只读”。这里滑动按钮以允许修改 ，不然不能禁止 MIUI 替换回官方 Recovery。&lt;/li&gt;
&lt;li&gt;下载&lt;a href=&#34;https://github.com/topjohnwu/Magisk&#34;&gt;Magisk zip包&lt;/a&gt;，下载apk文件修改为zip后缀，并推送到手机，必须在&lt;code&gt;external_sd&lt;/code&gt;路径下不可以修改，因为sdcard目录加密是乱码&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;adb push Magisk-v28.1.zip /external_sd/
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;乱码解决，双清data的cache，然后安装Magisk-v28.1.zip。由于 MIUI 在启动时会检查 System 分区完整性，上一步 TWRP 修改了 System 分区，需要通过刷入 Magisk 移除启动验证。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Go modules 详解</title>
      <link>https://abnerxc.github.io/go/mod%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Tue, 15 Jan 2019 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/mod%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;h1 id=&#34;go-mod的介绍&#34;&gt;go mod的介绍 &lt;a href=&#34;#go-mod%e7%9a%84%e4%bb%8b%e7%bb%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;我们以前用 go get 获取依赖其实是有潜在危险的，因为我们不确定最新版依赖是否会破坏掉我们项目对依赖包的使用方式，即当前项目可能会出现不兼容最新依赖包的问题。随着 go1.11 的发布，go 给我们带来了 module 新特性，这是 Go 语言新的一套依赖管理系统。&lt;/p&gt;
&lt;p&gt;在默认情况下，$GOPATH 默认情况下是不支持 go mudules 的，我们需要在项目目录下手动执行以下命令：&lt;code&gt;$ export GO111MODULE=on&lt;/code&gt;,这也表明了 go 要利用 modules 机制消灭 $GOPATH 的决心啊！&lt;/p&gt;
&lt;p&gt;GO111MODULE可以设置为三个字符串值之一：off，on或auto（默认值）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;off : go命令从不使用新模块支持。它查找vendor 目录和GOPATH以查找依赖关系;也就是继续使用“GOPATH模式”。&lt;/li&gt;
&lt;li&gt;on : go命令需要使用模块，go 会忽略 $GOPATH 和 vendor 文件夹，只根据go.mod下载依赖。&lt;/li&gt;
&lt;li&gt;auto 或未设置: go命令根据当前目录启用或禁用模块支持。仅当当前目录位于$GOPATH/src之外并且其本身包含go.mod文件或位于包含go.mod文件的目录下时，才启用模块支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;演示使用教程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建项目,为了配合 go modules 机制，我们 $GOPATH 以外的目录创建一个 testmod 的包：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ mkdir testmod
$ cd testmod

$ echo &amp;#39;package testmod
		import &amp;#34;fmt&amp;#34;
	func Hi(name string) string {
        return fmt.Sprintf(&amp;#34;Hi, %s&amp;#34;, name)
}&amp;#39; &amp;gt;&amp;gt; testmod.go
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;初始化module&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go mod init github.com/objcoding/testmod
#这里如果是从git下来的，可以直接进入项目里面执行go init
go: creating new go.mod: module github.com/objcoding/testmod
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;推送到 github 仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git init
$ git add *
$ git commit -am &amp;#34;First commit&amp;#34;
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;go-mudules-版本规则&#34;&gt;go mudules 版本规则 &lt;a href=&#34;#go-mudules-%e7%89%88%e6%9c%ac%e8%a7%84%e5%88%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;go modules 是一个版本化依赖管理系统，版本需要遵循一些规则，比如版本号需要遵循以下格式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;vX.Y.Z-pre.0.yyyymmddhhmmss-abcdefabcdef
vX.0.0-yyyymmddhhmmss-abcdefabcdef
vX.Y.(Z+1)-0.yyyymmddhhmmss-abcdefabcdef
vX.Y.Z
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;vX.Y.Z 是我们仓库打的标签版本，也就是 go modules 是根据仓库标签来确定版本号的，因此我们发布版本时，需要给我们的仓库打上一个标签版本号。&lt;/p&gt;
&lt;p&gt;也就是版本号 + 时间戳 +hash，我们自己指定版本时只需要指定版本号即可，没有版本 tag 的则需要找到对应 commit 的时间和 hash 值。&lt;/p&gt;
&lt;p&gt;还有一个重要的规则是，版本 0 和 1，最好需要有不同的依赖路径，如：v1.0.0 和 v2.0.0 是有不同的依赖路径，下面会详细介绍一下这个版本规则。&lt;/p&gt;
&lt;h1 id=&#34;发布版本&#34;&gt;发布版本 &lt;a href=&#34;#%e5%8f%91%e5%b8%83%e7%89%88%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;了解了 go modules 的版本规则后，现在我们发布一下该项目的版本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git tag v1.0.0
$ git push --tags
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时我们最好还需要创建一条 v1 分支，以便我们在其它分支写代码不会影响到 v1.0.0 版本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git checkout -b v1
$ git push -u origin v1
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;升级版本&#34;&gt;升级版本 &lt;a href=&#34;#%e5%8d%87%e7%ba%a7%e7%89%88%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git commit -m &amp;#34;update testmod&amp;#34; testmod.go
$ git tag v1.0.1
$ git push --tags origin v1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在我们的 项目已经升级到 v1.0.1 版本了，我们可以有多种方式获取这个版本依赖，go1.11 中，go get 拥有了很多新特性，我们可以直接通过以下命令获取 v1.01 版本依赖：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go get github.com/objcoding/testmod@v1.0.1
或者
$ go mod edit -require=&amp;#34;github.com/objcoding/testmod@v1.0.1&amp;#34;
$ go mod tidy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;go mod edit -require 可以主动修改 go.md 文件中依赖的版本号，然后通过 go mod tidy 对版本进行更新，它会自动清理掉不需要的依赖项，同时可以将依赖项更新到当前版本。&lt;/p&gt;
&lt;h1 id=&#34;主要版本升级&#34;&gt;主要版本升级 &lt;a href=&#34;#%e4%b8%bb%e8%a6%81%e7%89%88%e6%9c%ac%e5%8d%87%e7%ba%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;上面版本规则说了，版本 0 和 1，即大版本更新，最好需要有不同的依赖路径，如：v1.0.0 和 v2.0.0 是有不同的依赖路径，那么用 go modules 怎么实现呢，我们可以通过修改 go.mod 文件第一行添加新路径：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd testmod
$ echo &amp;#39;module github.com/objcoding/testmod/v2&amp;#39; &amp;gt;&amp;gt; go.mod
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们修改 testmod 函数 Hi()：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd testmod

$ echo &amp;#39;package testmod
import (
	&amp;#34;fmt&amp;#34;
	&amp;#34;errors&amp;#34;
)
func Hi(name, lang string) (string, error) {
	switch lang {
	case &amp;#34;en&amp;#34;:
		return fmt.Sprintf(&amp;#34;Hi, %s!&amp;#34;, name), nil
	default:
		return &amp;#34;&amp;#34;, errors.New(&amp;#34;unknown language&amp;#34;)
	}
}&amp;#39; &amp;gt;&amp;gt; testmod.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时，Hi() 方法将不兼容 v1 版本，我们需要新建一个 v2.0.0 版本，还是老样子，我们最好在 v2.0.0 版本新建一条 v2 分分支，将 v2.0.0 版本的代码写到这条分支中（这只是一个规范，实际上你将代码也写到任何分支中都行，go并没有这个规范）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git add *
$ git checkout -b v2
$ git commit testmod.go -m &amp;#34;v2.0.0&amp;#34;
$ git tag v2.0.0
$ git push --tags origin v2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们修改代码中的版本import,为v2&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main
import (
    &amp;#34;fmt&amp;#34;
  	&amp;#34;github.com/objcoding/testmod/v2&amp;#34;
)
func main() {
    fmt.Println(testmod.Hi(&amp;#34;zch&amp;#34;, &amp;#34;en&amp;#34;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后执行&lt;code&gt;go mod tidy&lt;/code&gt;，go mod 会自动更新到v2.0.0版本&lt;/p&gt;
&lt;h1 id=&#34;go-modules-命令大全&#34;&gt;go modules 命令大全 &lt;a href=&#34;#go-modules-%e5%91%bd%e4%bb%a4%e5%a4%a7%e5%85%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go help modules

go mod命令

download    download modules to local cache (下载依赖的module到本地cache))
edit        edit go.mod from tools or scripts (编辑go.mod文件)
graph       print module requirement graph (打印模块依赖图))
init        initialize new module in current directory (再当前文件夹下初始化一个新的module, 创建go.mod文件))
tidy        add missing and remove unused modules (增加丢失的module，去掉未用的module)
vendor      make vendored copy of dependencies (将依赖复制到vendor下)
verify      verify dependencies have expected content (校验依赖)
why         explain why packages or modules are needed (解释为什么需要依赖)

初始化mod

go mod init [module]可以创建一个go.mod，只有一行信息module。
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;go-翻墙&#34;&gt;go 翻墙 &lt;a href=&#34;#go-%e7%bf%bb%e5%a2%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;swag安装为例&lt;/p&gt;
&lt;p&gt;mac/linux swag 安装&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-code&#34; data-lang=&#34;code&#34;&gt;## 127.0.0.1:1087 是 ssr的hhtp代理
$ git config --global http.proxy &amp;#34;127.0.0.1:1087&amp;#34;
$ http_proxy=127.0.0.1:1087 go get -u -v github.com/swaggo/swag/cmd/swag
$ git config --global --unset-all http.proxy
$ git config --global --unset-all https.proxy
$ cd $GOPATH/src/github.com/swaggo/swag/cmd/swag
$ go install
$ swag -v #验证是否安装成功
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;window goget.bat文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@echo off

set http_proxy=socks5://127.0.0.1:1080
set https_proxy=socks5://127.0.0.1:1080

go get -u -v %*

echo ...

pause
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;git bash上用goget.bat url就行了~&lt;/p&gt;
&lt;h1 id=&#34;自建goproxy-server&#34;&gt;自建GOPROXY server &lt;a href=&#34;#%e8%87%aa%e5%bb%bagoproxy-server&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;项目地址 &lt;a href=&#34;https://github.com/gomods/athens&#34;&gt;https://github.com/gomods/athens&lt;/a&gt;
Athens可以用来在公司内部建立自己的私有go mod服务器，或者在公网建立一个对外公开的GOPROXY server。&lt;/p&gt;
&lt;h1 id=&#34;可用镜像&#34;&gt;可用镜像 &lt;a href=&#34;#%e5%8f%af%e7%94%a8%e9%95%9c%e5%83%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;阿里云:https://mirrors.aliyun.com/goproxy/&lt;/li&gt;
&lt;li&gt;go代理:https://goproxy.io&lt;/li&gt;
&lt;li&gt;go代理:https://goproxy.cn&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Go-log日志</title>
      <link>https://abnerxc.github.io/go/log%E6%97%A5%E5%BF%97/</link>
      <pubDate>Tue, 15 Jan 2019 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/log%E6%97%A5%E5%BF%97/</guid>
      <description>&lt;h1 id=&#34;日志使用&#34;&gt;日志使用 &lt;a href=&#34;#%e6%97%a5%e5%bf%97%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;o语言为我们提供了标准的log包，来跟踪日志的记录。下面我们看看日志包log的使用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	log.Println(&amp;#34;这是百度地址:&amp;#34;,&amp;#34;http://www.baidu.com&amp;#34;)
	log.Printf(&amp;#34;这是百度地址域名：%s\n&amp;#34;,&amp;#34;baidu.com&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2019/08/28 13:18:44 这是百度地址: http://www.baidu.com
2019/08/28 13:18:44 这是百度地址域名：baidu.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有了时间了，我们还想要更多的信息，必然发生的源代码行号等，对此日志包log 为我们提供了可定制化的配制，让我们可以自己定制日志的抬头信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func init(){
	log.SetFlags(log.Ldate|log.Lshortfile)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们使用&lt;code&gt;init&lt;/code&gt;函数，这个函数在&lt;code&gt;main&lt;/code&gt;函数执行之前就可以初始化，可以帮我们做一些配置，这里我们自定义日志的抬头信息为时间+文件名+源代码所在行号。也就是&lt;code&gt;log.Ldate|log.Lshortfile,&lt;/code&gt;中间是一个位运算符&lt;code&gt;|&lt;/code&gt;，然后通过函数&lt;code&gt;log.SetFlags&lt;/code&gt;进行设置。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2017/04/29 main.go:10: 飞雪无情的博客: http://www.flysnow.org
2017/04/29 main.go:11: 飞雪无情的微信公众号：flysnow_org
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看看&lt;code&gt;log&lt;/code&gt;包为我们提供了那些可以定义的选项常量。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const (
	Ldate         = 1 &amp;lt;&amp;lt; iota     //日期示例： 2009/01/23
	Ltime                         //时间示例: 01:23:23
	Lmicroseconds                 //毫秒示例: 01:23:23.123123.
	Llongfile                     //绝对路径和行号: /a/b/c/d.go:23
	Lshortfile                    //文件和行号: d.go:23.
	LUTC                          //日期时间转为0时区的
	LstdFlags     = Ldate | Ltime //Go提供的标准抬头信息
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是log包定义的一些抬头信息，有日期、时间、毫秒时间、绝对路径和行号、文件名和行号等，在上面都有注释说明，这里需要注意的是：如果设置了&lt;code&gt;Lmicroseconds&lt;/code&gt;，那么&lt;code&gt;Ltime&lt;/code&gt;就不生效了；设置了&lt;code&gt;Lshortfile&lt;/code&gt;， &lt;code&gt;Llongfile&lt;/code&gt;也不会生效，大家自己可以测试一下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LUTC&lt;/code&gt;比较特殊，如果我们配置了时间标签，那么如果设置了LUTC的话，就会把输出的日期时间转为0时区的日期时间显示。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;log.SetFlags(log.Ldate|log.Ltime |log.LUTC)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么对我们东八区的时间来说，就会减去8个小时，我们看输出：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2017/04/29 05:46:29 飞雪无情的博客: http://www.flysnow.org
2017/04/29 05:46:29 飞雪无情的微信公众号：flysnow_org
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后一个&lt;code&gt;LstdFlags&lt;/code&gt;表示标准的日志抬头信息，也就是默认的，包含日期和具体时间。&lt;/p&gt;
&lt;p&gt;我们大部分情况下，都有很多业务，每个业务都需要记录日志，那么有没有办法，能区分这些业务呢？这样我们在查找日志的时候，就方便多了。&lt;/p&gt;
&lt;p&gt;对于这种情况，Go语言也帮我们考虑到了，这就是设置日志的前缀，比如一个用户中心系统的日志，我们可以这么设置。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func init(){
	log.SetPrefix(&amp;#34;【UserCenter】&amp;#34;)
	log.SetFlags(log.LstdFlags | log.Lshortfile |log.LUTC)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过&lt;code&gt;log.SetPrefix&lt;/code&gt;可以指定输出日志的前缀，这里我们指定为&lt;code&gt;【UserCenter】&lt;/code&gt;，然后就可以看到日志的打印输出已经清晰的标记出我们的这些日志是属于哪些业务的啦。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;【UserCenter】2017/04/29 05:53:26 main.go:11: 飞雪无情的博客: http://www.flysnow.org
【UserCenter】2017/04/29 05:53:26 main.go:12: 飞雪无情的微信公众号：flysnow_org
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;log&lt;/code&gt;包除了有&lt;code&gt;Print&lt;/code&gt;系列的函数，还有&lt;code&gt;Fatal&lt;/code&gt;以及&lt;code&gt;Panic&lt;/code&gt;系列的函数，其中&lt;code&gt;Fatal&lt;/code&gt;表示程序遇到了致命的错误，需要退出，这时候使用&lt;code&gt;Fatal&lt;/code&gt;记录日志后，然后程序退出，也就是说Fatal相当于先调用&lt;code&gt;Print&lt;/code&gt;打印日志，然后再调用&lt;code&gt;os.Exit(1)&lt;/code&gt;退出程序。&lt;/p&gt;
&lt;p&gt;同理&lt;code&gt;Panic&lt;/code&gt;系列的函数也一样，表示先使用&lt;code&gt;Print&lt;/code&gt;记录日志，然后调用&lt;code&gt;panic()&lt;/code&gt;函数抛出一个恐慌，这时候除非使用&lt;code&gt;recover()&lt;/code&gt;函数，否则程序就会打印错误堆栈信息，然后程序终止。&lt;/p&gt;
&lt;p&gt;这里贴下这几个系列函数的源代码，更好理解。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func Println(v ...interface{}) {
	std.Output(2, fmt.Sprintln(v...))
}

func Fatalln(v ...interface{}) {
	std.Output(2, fmt.Sprintln(v...))
	os.Exit(1)
}

func Panicln(v ...interface{}) {
	s := fmt.Sprintln(v...)
	std.Output(2, s)
	panic(s)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;实现原理&#34;&gt;实现原理 &lt;a href=&#34;#%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;通过上面的源代码，我们发现，日志包&lt;code&gt;log&lt;/code&gt;的这些函数都是类似的，关键的输出日志就在于&lt;code&gt;std.Output&lt;/code&gt;方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func New(out io.Writer, prefix string, flag int) *Logger {
	return &amp;amp;Logger{out: out, prefix: prefix, flag: flag}
}

var std = New(os.Stderr, &amp;#34;&amp;#34;, LstdFlags)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从以上源代码可以看出，变量&lt;code&gt;std&lt;/code&gt;其实是一个&lt;code&gt;*Logger&lt;/code&gt;，通过&lt;code&gt;log.New&lt;/code&gt;函数创建，默认输出到&lt;code&gt;os.Stderr&lt;/code&gt;设备，前缀为空，日志抬头信息为标准抬头&lt;code&gt;LstdFlags&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.Stderr&lt;/code&gt;对应的是UNIX里的标准错误警告信息的输出设备，同时被作为默认的日志输出目的地。初次之外，还有标准输出设备&lt;code&gt;os.Stdout&lt;/code&gt;以及标准输入设备&lt;code&gt;os.Stdin&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var (
	Stdin  = NewFile(uintptr(syscall.Stdin), &amp;#34;/dev/stdin&amp;#34;)
	Stdout = NewFile(uintptr(syscall.Stdout), &amp;#34;/dev/stdout&amp;#34;)
	Stderr = NewFile(uintptr(syscall.Stderr), &amp;#34;/dev/stderr&amp;#34;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上就是定义的UNIX的标准的三种设备，分别用于输入、输出和警告错误信息。理解了&lt;code&gt;os.Stderr&lt;/code&gt;，现在我们看下&lt;code&gt;Logger&lt;/code&gt;这个结构体，日志的信息和操作，都是通过这个&lt;code&gt;Logger&lt;/code&gt;操作的。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Logger struct {
	mu     sync.Mutex // 字段mu是一个互斥锁，主要是是保证这个日志记录器Logger在多goroutine下也是安全的
	prefix string     // 字段prefix是每一行日志的前缀
	flag   int        // 字段flag是日志抬头信息
	out    io.Writer  // 字段out是日志输出的目的地，默认情况下是os.Stderr。
	buf    []byte     // 字段buf是一次日志输出文本缓冲，最终会被写到out里。
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;了解了结构体&lt;code&gt;Logger&lt;/code&gt;的字段，现在就可以看下它最重要的方法&lt;code&gt;Output&lt;/code&gt;了，这个方法会输出格式化好的日志信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (l *Logger) Output(calldepth int, s string) error {
	now := time.Now() // get this early.
	var file string
	var line int
	//加锁，保证多goroutine下的安全
	l.mu.Lock()
	defer l.mu.Unlock()
	//如果配置了获取文件和行号的话
	if l.flag&amp;amp;(Lshortfile|Llongfile) != 0 {
		//因为runtime.Caller代价比较大，先不加锁
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = &amp;#34;???&amp;#34;
			line = 0
		}
		//获取到行号等信息后，再加锁，保证安全
		l.mu.Lock()
	}
	//把我们的日志信息和设置的日志抬头进行拼接
	l.buf = l.buf[:0]
	l.formatHeader(&amp;amp;l.buf, now, file, line)
	l.buf = append(l.buf, s...)
	if len(s) == 0 || s[len(s)-1] != &amp;#39;\n&amp;#39; {
		l.buf = append(l.buf, &amp;#39;\n&amp;#39;)
	}
	//输出拼接好的缓冲buf里的日志信息到目的地
	_, err := l.out.Write(l.buf)
	return err
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;整个代码比较简洁，为了多goroutine安全互斥锁也用上了，但是在获取调用堆栈信息的时候，又要先解锁，因为这个过程比较重。获取到文件、行号等信息后，继续加互斥锁保证安全。&lt;/p&gt;
&lt;p&gt;后面的就比较简单了，&lt;code&gt;formatHeader&lt;/code&gt;方法主要是格式化日志抬头信息，然后存储在buf这个缓冲中，最后再把我们自己的日志信息拼接到缓冲buf的后面，然后为一次log日志输出追加一个换行符，这样每次日志输出都是一行一行的。&lt;/p&gt;
&lt;p&gt;有了最终的日志信息&lt;code&gt;buf&lt;/code&gt;，然后把它写到输出的目的地out里就可以了，这是一个实现了&lt;code&gt;io.Writer&lt;/code&gt;接口的类型，只要实现了这个接口，都可以当作输出目的地。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (l *Logger) SetOutput(w io.Writer) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.out = w
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;log&lt;/code&gt;包的&lt;code&gt;SetOutput&lt;/code&gt;函数，可以设置输出目的地。这里稍微简单介绍下&lt;code&gt;runtime.Caller&lt;/code&gt;，它可以获取运行时方法的调用信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func Caller(skip int) (pc uintptr, file string, line int, ok bool)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数&lt;code&gt;skip&lt;/code&gt;表示跳过栈帧数，&lt;code&gt;0&lt;/code&gt;表示不跳过，也就是&lt;code&gt;runtime.Caller&lt;/code&gt;的调用者。&lt;code&gt;1&lt;/code&gt;的话就是再向上一层，表示调用者的调用者。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;log&lt;/code&gt;日志包里使用的是&lt;code&gt;2&lt;/code&gt;，也就是表示我们在源代码中调用&lt;code&gt;log.Print&lt;/code&gt;、&lt;code&gt;log.Fatal&lt;/code&gt;和&lt;code&gt;log.Panic&lt;/code&gt;这些函数的调用者。&lt;/p&gt;
&lt;p&gt;以&lt;code&gt;main&lt;/code&gt;函数调用&lt;code&gt;log.Println&lt;/code&gt;为例，是&lt;code&gt;main-&amp;gt;log.Println-&amp;gt;*Logger.Output-&amp;gt;runtime.Caller&lt;/code&gt;这么一个方法调用栈，所以这时候，skip的值分别代表：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;0表示*Logger.Output中调用runtime.Caller的源代码文件和行号&lt;/li&gt;
&lt;li&gt;1表示log.Println中调用*Logger.Output的源代码文件和行号&lt;/li&gt;
&lt;li&gt;2表示main中调用log.Println的源代码文件和行号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以这也是&lt;code&gt;log&lt;/code&gt;包里的这个&lt;code&gt;skip&lt;/code&gt;的值为什么一直是2的原因。&lt;/p&gt;
&lt;h1 id=&#34;定制自己的日志&#34;&gt;定制自己的日志 &lt;a href=&#34;#%e5%ae%9a%e5%88%b6%e8%87%aa%e5%b7%b1%e7%9a%84%e6%97%a5%e5%bf%97&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;通过上面的源码分析，我们知道日志记录的根本就在于一个日志记录器&lt;code&gt;Logger&lt;/code&gt;，所以我们定制自己的日志，其实就是创建不同的&lt;code&gt;Logger&lt;/code&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var (
	Info *log.Logger
	Warning *log.Logger
	Error * log.Logger
)

func init(){
	errFile,err:=os.OpenFile(&amp;#34;errors.log&amp;#34;,os.O_CREATE|os.O_WRONLY|os.O_APPEND,0666)
	if err!=nil{
		log.Fatalln(&amp;#34;打开日志文件失败：&amp;#34;,err)
	}

	Info = log.New(os.Stdout,&amp;#34;Info:&amp;#34;,log.Ldate | log.Ltime | log.Lshortfile)
	Warning = log.New(os.Stdout,&amp;#34;Warning:&amp;#34;,log.Ldate | log.Ltime | log.Lshortfile)
	Error = log.New(io.MultiWriter(os.Stderr,errFile),&amp;#34;Error:&amp;#34;,log.Ldate | log.Ltime | log.Lshortfile)

}

func main() {
	Info.Println(&amp;#34;飞雪无情的博客:&amp;#34;,&amp;#34;http://www.flysnow.org&amp;#34;)
	Warning.Printf(&amp;#34;飞雪无情的微信公众号：%s\n&amp;#34;,&amp;#34;flysnow_org&amp;#34;)
	Error.Println(&amp;#34;欢迎关注留言&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们根据日志级别定义了三种不同的&lt;code&gt;Logger&lt;/code&gt;，分别为&lt;code&gt;Info&lt;/code&gt;,&lt;code&gt;Warning&lt;/code&gt;,&lt;code&gt;Error&lt;/code&gt;，用于不同级别日志的输出。这三种日志记录器都是使用&lt;code&gt;log.New&lt;/code&gt;函数进行创建。&lt;/p&gt;
&lt;p&gt;这里创建&lt;code&gt;Logger&lt;/code&gt;的时候，&lt;code&gt;Info&lt;/code&gt;和&lt;code&gt;Warning&lt;/code&gt;都比较正常，&lt;code&gt;Error&lt;/code&gt;这里采用了多个目的地输出，这里可以同时把错误日志输出到&lt;code&gt;os.Stderr&lt;/code&gt;以及我们创建的&lt;code&gt;errors.log&lt;/code&gt;文件中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;io.MultiWriter&lt;/code&gt;函数可以包装多个&lt;code&gt;io.Writer&lt;/code&gt;为一个&lt;code&gt;io.Writer&lt;/code&gt;，这样我们就可以达到同时对多个&lt;code&gt;io.Writer&lt;/code&gt;输出日志的目的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;io.MultiWriter&lt;/code&gt;的实现也很简单，定义一个类型实现&lt;code&gt;io.Writer&lt;/code&gt;，然后在实现的&lt;code&gt;Write&lt;/code&gt;方法里循环调用要包装的多个&lt;code&gt;Writer&lt;/code&gt;接口的&lt;code&gt;Write&lt;/code&gt;方法即可。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (t *multiWriter) Write(p []byte) (n int, err error) {
	for _, w := range t.writers {
		n, err = w.Write(p)
		if err != nil {
			return
		}
		if n != len(p) {
			err = ErrShortWrite
			return
		}
	}
	return len(p), nil
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里我们通过定义了多个Logger来区分不同的日志级别，使用比较麻烦，针对这种情况，可以使用第三方的log框架，也可以自定包装定义，直接通过不同级别的方法来记录不同级别的日志，还可以设置记录日志的级别等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文收集来源：https://www.flysnow.org&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Golang sync 包的相关使用方法</title>
      <link>https://abnerxc.github.io/go/sync/</link>
      <pubDate>Tue, 15 Jan 2019 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/sync/</guid>
      <description>&lt;h1 id=&#34;为什么需要锁&#34;&gt;为什么需要锁 &lt;a href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81%e9%94%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;在并发的情况下，多个线程或协程同时去修改一个变量，可能会出现如下情况：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
    &amp;#34;fmt&amp;#34;
    &amp;#34;sync&amp;#34;
    &amp;#34;time&amp;#34;
)

func main() {
    var a = 0

    // 启动 100 个协程，需要足够大
    // var lock sync.Mutex
    for i := 0; i &amp;lt; 100; i++ {
        go func(idx int) {
            // lock.Lock()
            // defer lock.Unlock()
            a += 1
            fmt.Printf(&amp;#34;goroutine %d, a=%d\n&amp;#34;, idx, a)
        }(i)
    }

    // 等待 1s 结束主程序
    // 确保所有协程执行完
    time.Sleep(time.Second)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;观察打印结果，是否出现 a 的值是相同的情况（未出现则重试或调大协程数），答案：是的。&lt;/p&gt;
&lt;p&gt;显然这不是我们想要的结果。出现这种情况的原因是，协程依次执行：从寄存器读取 a 的值 -&amp;gt; 然后做加法运算 -&amp;gt; 最后写会寄存器。试想，此时一个协程取出 a 的值 3，正在做加法运算（还未写回寄存器）。同时另一个协程此时去取，取出了同样的 a 的值 3。最终导致的结果是，两个协程产出的结果相同，a 相当于只增加了 1。&lt;/p&gt;
&lt;p&gt;所以，锁的概念就是，我正在处理 a（锁定），你们谁都别和我抢，等我处理完了（解锁），你们再处理。这样就实现了，同时处理 a 的协程只有一个，就实现了同步。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;什么是互斥锁-mutex&#34;&gt;什么是互斥锁 Mutex？ &lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e4%ba%92%e6%96%a5%e9%94%81-mutex&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;什么是互斥锁？它是锁的一种具体实现，有两个方法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (m *Mutex) Lock()
func (m *Mutex) Unlock()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在首次使用后不要复制该互斥锁。对一个未锁定的互斥锁解锁将会产生运行时错误。&lt;/p&gt;
&lt;p&gt;一个互斥锁只能同时被一个 goroutine 锁定，其它 goroutine 将阻塞直到互斥锁被解锁（重新争抢对互斥锁的锁定）。如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
    &amp;#34;fmt&amp;#34;
    &amp;#34;sync&amp;#34;
    &amp;#34;time&amp;#34;
)

func main() {
    ch := make(chan struct{}, 2)

    var l sync.Mutex
    go func() {
        l.Lock()
        defer l.Unlock()
        fmt.Println(&amp;#34;goroutine1: 我会锁定大概 2s&amp;#34;)
        time.Sleep(time.Second * 2)
        fmt.Println(&amp;#34;goroutine1: 我解锁了，你们去抢吧&amp;#34;)
        ch &amp;lt;- struct{}{}
    }()

    go func() {
        fmt.Println(&amp;#34;groutine2: 等待解锁&amp;#34;)
        l.Lock()
        defer l.Unlock()
        fmt.Println(&amp;#34;goroutine2: 哈哈，我锁定了&amp;#34;)
        ch &amp;lt;- struct{}{}
    }()

    // 等待 goroutine 执行结束
    for i := 0; i &amp;lt; 2; i++ {
        &amp;lt;-ch
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;注意，平时所说的锁定，其实就是去锁定互斥锁，而不是说去锁定一段代码。也就是说，当代码执行到有锁的地方时，它获取不到互斥锁的锁定，会阻塞在那里，从而达到控制同步的目的。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;什么是读写锁-rwmutex&#34;&gt;什么是读写锁 RWMutex? &lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e8%af%bb%e5%86%99%e9%94%81-rwmutex&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;那么什么是读写锁呢？它是针对读写操作的互斥锁，读写锁与互斥锁最大的不同就是可以分别对 读、写 进行锁定。一般用在大量读操作、少量写操作的情况：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (rw *RWMutex) Lock()
func (rw *RWMutex) Unlock()

func (rw *RWMutex) RLock()
func (rw *RWMutex) RUnlock()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于这里需要区分读写锁定，我们这样定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读锁定（RLock），对读操作进行锁定&lt;/li&gt;
&lt;li&gt;读解锁（RUnlock），对读锁定进行解锁&lt;/li&gt;
&lt;li&gt;写锁定（Lock），对写操作进行锁定&lt;/li&gt;
&lt;li&gt;写解锁（Unlock），对写锁定进行解锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在首次使用之后，不要复制该读写锁。不要混用锁定和解锁，如：Lock 和 RUnlock、RLock 和 Unlock。因为对未读锁定的读写锁进行读解锁或对未写锁定的读写锁进行写解锁将会引起运行时错误。&lt;/p&gt;
&lt;p&gt;如何理解读写锁呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;同时只能有一个 goroutine 能够获得写锁定。&lt;/li&gt;
&lt;li&gt;同时可以有任意多个 gorouinte 获得读锁定。&lt;/li&gt;
&lt;li&gt;同时只能存在写锁定或读锁定（读和写互斥）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也就是说，当有一个 goroutine 获得写锁定，其它无论是读锁定还是写锁定都将阻塞直到写解锁；当有一个 goroutine 获得读锁定，其它读锁定任然可以继续；当有一个或任意多个读锁定，写锁定将等待所有读锁定解锁之后才能够进行写锁定。所以说这里的读锁定（RLock）目的其实是告诉写锁定：有很多人正在读取数据，你给我站一边去，等它们读（读解锁）完你再来写（写锁定）。&lt;/p&gt;
&lt;p&gt;使用例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
    &amp;#34;fmt&amp;#34;
    &amp;#34;math/rand&amp;#34;
    &amp;#34;sync&amp;#34;
)

var count int
var rw sync.RWMutex

func main() {
    ch := make(chan struct{}, 10)
    for i := 0; i &amp;lt; 5; i++ {
        go read(i, ch)
    }
    for i := 0; i &amp;lt; 5; i++ {
        go write(i, ch)
    }

    for i := 0; i &amp;lt; 10; i++ {
        &amp;lt;-ch
    }
}

func read(n int, ch chan struct{}) {
    rw.RLock()
    fmt.Printf(&amp;#34;goroutine %d 进入读操作...\n&amp;#34;, n)
    v := count
    fmt.Printf(&amp;#34;goroutine %d 读取结束，值为：%d\n&amp;#34;, n, v)
    rw.RUnlock()
    ch &amp;lt;- struct{}{}
}

func write(n int, ch chan struct{}) {
    rw.Lock()
    fmt.Printf(&amp;#34;goroutine %d 进入写操作...\n&amp;#34;, n)
    v := rand.Intn(1000)
    count = v
    fmt.Printf(&amp;#34;goroutine %d 写入结束，新值为：%d\n&amp;#34;, n, v)
    rw.Unlock()
    ch &amp;lt;- struct{}{}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;waitgroup-例子&#34;&gt;WaitGroup 例子 &lt;a href=&#34;#waitgroup-%e4%be%8b%e5%ad%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;WaitGroup 用于等待一组 goroutine 结束，用法很简单。它有三个方法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (wg *WaitGroup) Add(delta int)
func (wg *WaitGroup) Done()
func (wg *WaitGroup) Wait()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add 用来添加 goroutine 的个数。Done 执行一次数量减 1。Wait 用来等待结束：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
    &amp;#34;fmt&amp;#34;
    &amp;#34;sync&amp;#34;
    &amp;#34;time&amp;#34;
)

func main() {
    var wg sync.WaitGroup

    for i := 0; i &amp;lt; 5; i++ {
        // 计数加 1
        wg.Add(1)
        go func(i int) {
            // 计数减 1
            defer wg.Done()
            time.Sleep(time.Second * time.Duration(i))
            fmt.Printf(&amp;#34;goroutine%d 结束\n&amp;#34;, i)
        }(i)
    }

    // 等待执行结束
    wg.Wait()
    fmt.Println(&amp;#34;所有 goroutine 执行结束&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;注意，wg.Add() 方法一定要在 goroutine 开始前执行哦。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;cond-条件变量&#34;&gt;Cond 条件变量 &lt;a href=&#34;#cond-%e6%9d%a1%e4%bb%b6%e5%8f%98%e9%87%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Cond 实现一个条件变量，即等待或宣布事件发生的 goroutines 的会合点，它会保存一个通知列表。基本思想是当某中状态达成，goroutine 将会等待（Wait）在那里，当某个时刻状态改变时通过通知的方式（Broadcast，Signal）的方式通知等待的 goroutine。这样，不满足条件的 goroutine 唤醒继续向下执行，满足条件的重新进入等待序列。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Cond struct {
    noCopy noCopy
  
    // L is held while observing or changing the condition
    L Locker
  
    notify  notifyList // 通知列表
    checker copyChecker
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func NewCond(l Locker) *Cond
func (c *Cond) Broadcast()
func (c *Cond) Signal()
func (c *Cond) Wait()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wait 方法、Signal 方法和 Broadcast 方法。它们分别代表了等待通知、单发通知和广播通知的操作。&lt;/p&gt;
&lt;p&gt;我们来看一下 Wait 方法：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (c *Cond) Wait() {
    c.checker.check()
    t := runtime_notifyListAdd(&amp;amp;c.notify)
    c.L.Unlock()
    runtime_notifyListWait(&amp;amp;c.notify, t)
    c.L.Lock()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它的操作为：加入到通知列表 -&amp;gt; 解锁 L -&amp;gt; 等待通知 -&amp;gt; 锁定 L。其使用方法是：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;c.L.Lock()
for !condition() {
    c.Wait()
}
... make use of condition ...
c.L.Unlock()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举个例子:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Package main provides ...
package main

import (
    &amp;#34;fmt&amp;#34;
    &amp;#34;sync&amp;#34;
    &amp;#34;time&amp;#34;
)

var count int = 4

func main() {
    ch := make(chan struct{}, 5)

    // 新建 cond
    var l sync.Mutex
    cond := sync.NewCond(&amp;amp;l)

    for i := 0; i &amp;lt; 5; i++ {
        go func(i int) {
            // 争抢互斥锁的锁定
            cond.L.Lock()
            defer func() {
                cond.L.Unlock()
                ch &amp;lt;- struct{}{}
            }()

            // 条件是否达成
            for count &amp;gt; i {
                cond.Wait()
                fmt.Printf(&amp;#34;收到一个通知 goroutine%d\n&amp;#34;, i)
            }
            
            fmt.Printf(&amp;#34;goroutine%d 执行结束\n&amp;#34;, i)
        }(i)
    }

    // 确保所有 goroutine 启动完成
    time.Sleep(time.Millisecond * 20)
    
    // 锁定一下
    fmt.Println(&amp;#34;broadcast...&amp;#34;)
    cond.L.Lock()
    count -= 1
    cond.Broadcast()
    cond.L.Unlock()

    time.Sleep(time.Second)
    fmt.Println(&amp;#34;signal...&amp;#34;)
    cond.L.Lock()
    count -= 2
    cond.Signal()
    cond.L.Unlock()

    time.Sleep(time.Second)
    fmt.Println(&amp;#34;broadcast...&amp;#34;)
    cond.L.Lock()
    count -= 1
    cond.Broadcast()
    cond.L.Unlock()

    for i := 0; i &amp;lt; 5; i++ {
        &amp;lt;-ch
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;pool-临时对象池&#34;&gt;Pool 临时对象池 &lt;a href=&#34;#pool-%e4%b8%b4%e6%97%b6%e5%af%b9%e8%b1%a1%e6%b1%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;sync.Pool 可以作为临时对象的保存和复用的集合。其结构为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Pool struct {
    noCopy noCopy

    local     unsafe.Pointer // local fixed-size per-P pool, actual type is [P]poolLocal
    localSize uintptr        // size of the local array

    // New optionally specifies a function to generate
    // a value when Get would otherwise return nil.
    // It may not be changed concurrently with calls to Get.
    New func() interface{}
}

func (p *Pool) Get() interface{}
func (p *Pool) Put(x interface{})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;新键 Pool 需要提供一个 New 方法，目的是当获取不到临时对象时自动创建一个（不会主动加入到 Pool 中），Get 和 Put 方法都很好理解。&lt;/p&gt;
&lt;p&gt;深入了解过 Go 的同学应该知道，Go 的重要组成结构为 M、P、G。Pool 实际上会为每一个操作它的 goroutine 相关联的 P 都生成一个本地池。如果从本地池 Get 对象的时候，本地池没有，则会从其它的 P 本地池获取。因此，Pool 的一个特点就是：可以把由其中的对象值产生的存储压力进行分摊。&lt;/p&gt;
&lt;p&gt;它有着以下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pool 中的对象在仅有 Pool 有着唯一索引的情况下可能会被自动删除（取决于下一次 GC 执行的时间）。&lt;/li&gt;
&lt;li&gt;goroutines 协程安全，可以同时被多个协程使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GC 的执行一般会使 Pool 中的对象全部移除。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;那么 Pool 都适用于什么场景呢？从它的特点来说，适用与无状态的对象的复用，而不适用与如连接池之类的。在 fmt 包中有一个很好的使用池的例子，它维护一个动态大小的临时输出缓冲区。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
    &amp;#34;bytes&amp;#34;
    &amp;#34;io&amp;#34;
    &amp;#34;os&amp;#34;
    &amp;#34;sync&amp;#34;
    &amp;#34;time&amp;#34;
)

var bufPool = sync.Pool{
    New: func() interface{} {
        return new(bytes.Buffer)
    },
}

func timeNow() time.Time {
    return time.Unix(1136214245, 0)
}

func Log(w io.Writer, key, val string) {
    // 获取临时对象，没有的话会自动创建
    b := bufPool.Get().(*bytes.Buffer)
    b.Reset()
    b.WriteString(timeNow().UTC().Format(time.RFC3339))
    b.WriteByte(&amp;#39; &amp;#39;)
    b.WriteString(key)
    b.WriteByte(&amp;#39;=&amp;#39;)
    b.WriteString(val)
    w.Write(b.Bytes())
    // 将临时对象放回到 Pool 中
    bufPool.Put(b)
}

func main() {
    Log(os.Stdout, &amp;#34;path&amp;#34;, &amp;#34;/search?q=flowers&amp;#34;)
}

打印结果：
2006-01-02T15:04:05Z path=/search?q=flowers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;once-执行一次&#34;&gt;Once 执行一次 &lt;a href=&#34;#once-%e6%89%a7%e8%a1%8c%e4%b8%80%e6%ac%a1&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;使用 sync.Once 对象可以使得函数多次调用只执行一次。其结构为：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Once struct {
    m    Mutex
    done uint32
}

func (o *Once) Do(f func())
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用 done 来记录执行次数，用 m 来保证保证仅被执行一次。只有一个 Do 方法，调用执行。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go基础-iota</title>
      <link>https://abnerxc.github.io/go/base1.iota/</link>
      <pubDate>Tue, 15 Jan 2019 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/base1.iota/</guid>
      <description>&lt;p&gt;&lt;code&gt;iota-go语言中的常量计数器，只能在常量表达式中使用&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;iota只能在常量的表达式中使用&#34;&gt;iota只能在常量的表达式中使用。 &lt;a href=&#34;#iota%e5%8f%aa%e8%83%bd%e5%9c%a8%e5%b8%b8%e9%87%8f%e7%9a%84%e8%a1%a8%e8%be%be%e5%bc%8f%e4%b8%ad%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fmt.Println(iota) 
编译错误： undefined: iota
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;每次-const-出现时都会让-iota-初始化为0自增长&#34;&gt;每次 const 出现时，都会让 iota 初始化为0.【自增长】 &lt;a href=&#34;#%e6%af%8f%e6%ac%a1-const-%e5%87%ba%e7%8e%b0%e6%97%b6%e9%83%bd%e4%bc%9a%e8%ae%a9-iota-%e5%88%9d%e5%a7%8b%e5%8c%96%e4%b8%ba0%e8%87%aa%e5%a2%9e%e9%95%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const a = iota // a=0
const (
  b = iota          //b=0
  c                      //c=1
)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;枚举类型定义&#34;&gt;枚举类型定义 &lt;a href=&#34;#%e6%9e%9a%e4%b8%be%e7%b1%bb%e5%9e%8b%e5%ae%9a%e4%b9%89&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Weekday int
const (
    Sunday Weekday = iota
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
)

//可以类似调用枚举类一样调用
println(Weekday(Saturday))   


func (d Weekday) String() string {
    return [...]string{&amp;#34;Sunday&amp;#34;, &amp;#34;Monday&amp;#34;, &amp;#34;Tuesday&amp;#34;, &amp;#34;Wednesday&amp;#34;}[d]
}


var d Weekday = Monday
fmt.Print(d)
switch d {
case Sunday:
    fmt.Println(&amp;#34; goes up.&amp;#34;)
case Monday:
    fmt.Println(&amp;#34; goes down.&amp;#34;)
default:
    fmt.Println(&amp;#34; stays put.&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;可跳过的值&#34;&gt;可跳过的值 &lt;a href=&#34;#%e5%8f%af%e8%b7%b3%e8%bf%87%e7%9a%84%e5%80%bc&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type AudioOutput int
const (
    OutMute AudioOutput = iota // 0
    OutMono                       // 1
    OutStereo                     // 2
    _
    _
    OutSurround                // 5
)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;位掩码表达式&#34;&gt;位掩码表达式 &lt;a href=&#34;#%e4%bd%8d%e6%8e%a9%e7%a0%81%e8%a1%a8%e8%be%be%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;iota 可以做更多事情，而不仅仅是 increment。更精确地说，iota 总是用于 increment，但是它可以用于表达式，在常量中的存储结果值。&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const (
    IgEggs Allergen = 1 &amp;lt;&amp;lt; iota // 1 &amp;lt;&amp;lt; 0 which is 00000001
    IgChocolate                             // 1 &amp;lt;&amp;lt; 1 which is 00000010
    IgNuts                                       // 1 &amp;lt;&amp;lt; 2 which is 00000100
    IgStrawberries                        // 1 &amp;lt;&amp;lt; 3 which is 00001000
    IgShellfish                                // 1 &amp;lt;&amp;lt; 4 which is 00010000
)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;定义bit单位&#34;&gt;定义bit单位 &lt;a href=&#34;#%e5%ae%9a%e4%b9%89bit%e5%8d%95%e4%bd%8d&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type ByteSize float64
const (
    _           = iota                   // ignore first value by assigning to blank identifier
    KB ByteSize = 1 &amp;lt;&amp;lt; (10 * iota)       // 1 &amp;lt;&amp;lt; (10*1)
    MB                                   // 1 &amp;lt;&amp;lt; (10*2)
    GB                                   // 1 &amp;lt;&amp;lt; (10*3)
    TB                                   // 1 &amp;lt;&amp;lt; (10*4)
    PB                                   // 1 &amp;lt;&amp;lt; (10*5)
    EB                                   // 1 &amp;lt;&amp;lt; (10*6)
    ZB                                   // 1 &amp;lt;&amp;lt; (10*7)
    YB                                   // 1 &amp;lt;&amp;lt; (10*8)
)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;定义在一行的情况iota-在下一行增长而不是立即取得它的引用&#34;&gt;定义在一行的情况(iota 在下一行增长，而不是立即取得它的引用) &lt;a href=&#34;#%e5%ae%9a%e4%b9%89%e5%9c%a8%e4%b8%80%e8%a1%8c%e7%9a%84%e6%83%85%e5%86%b5iota-%e5%9c%a8%e4%b8%8b%e4%b8%80%e8%a1%8c%e5%a2%9e%e9%95%bf%e8%80%8c%e4%b8%8d%e6%98%af%e7%ab%8b%e5%8d%b3%e5%8f%96%e5%be%97%e5%ae%83%e7%9a%84%e5%bc%95%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;注意他们是逗号分隔常量，并不是换行&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;场景一&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const (
    Apple, Banana = iota , iota 
    Cherimoya, Durian
    Elderberry, Fig
)
// Apple: 0, Banana: 0,
// Cherimoya: 1, Durian: 1, 
// Elderberry: 2, Fig: 2
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;场景二,每一换行都按照前一行的表达式进行增加&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const (
    Apple, Banana = iota+1 , iota+1 
    Cherimoya, Durian
    Elderberry, Fig
)
// Apple: 1, Banana: 1,
// Cherimoya: 2, Durian: 2, 
// Elderberry: 3, Fig: 3
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;中间插队&#34;&gt;中间插队 &lt;a href=&#34;#%e4%b8%ad%e9%97%b4%e6%8f%92%e9%98%9f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const (
    i = iota
    j = 3.14
    k = iota
    l
)
那么打印出来的结果是 i=0,j=3.14,k=2,l=3
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Go基础-信道</title>
      <link>https://abnerxc.github.io/go/base5.channel/</link>
      <pubDate>Tue, 15 Jan 2019 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/base5.channel/</guid>
      <description>&lt;p&gt;信道是协程之间通信的管道，从一端发送数据，另一端接收数据。&lt;/p&gt;
&lt;h1 id=&#34;信道声明&#34;&gt;信道声明 &lt;a href=&#34;#%e4%bf%a1%e9%81%93%e5%a3%b0%e6%98%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var c chan int&lt;/code&gt;,声明了 nil 信道。nil 信道没什么作用，既不能发送数据也不能接受数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c:=make(chan int)&lt;/code&gt;,使用 make 函数创建了可用的信道 c。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;读写数据&#34;&gt;读写数据 &lt;a href=&#34;#%e8%af%bb%e5%86%99%e6%95%b0%e6%8d%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;c := make(chan int)
// 写数据
c &amp;lt;- data   

// 读数据
variable &amp;lt;- c  // 方式一
&amp;lt;- c              // 方式二
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;解决生产环境使用timesleep&#34;&gt;解决生产环境使用timeSleep &lt;a href=&#34;#%e8%a7%a3%e5%86%b3%e7%94%9f%e4%ba%a7%e7%8e%af%e5%a2%83%e4%bd%bf%e7%94%a8timesleep&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func printHello(c chan bool) {
    fmt.Println(&amp;#34;hello world goroutine&amp;#34;)
    &amp;lt;- c    // 读取信道的数据
}
 
func main() {
    c := make(chan bool)
    go printHello(c)
    c &amp;lt;- true    // main 协程阻塞
    fmt.Println(&amp;#34;main goroutine&amp;#34;)
}
//output
hello world goroutine
main goroutine
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;死锁只读不写或者只读不写&#34;&gt;死锁（只读不写或者只读不写） &lt;a href=&#34;#%e6%ad%bb%e9%94%81%e5%8f%aa%e8%af%bb%e4%b8%8d%e5%86%99%e6%88%96%e8%80%85%e5%8f%aa%e8%af%bb%e4%b8%8d%e5%86%99&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
    c := make(chan bool)
    c &amp;lt;- true    // 只写不读
    fmt.Println(&amp;#34;main goroutine&amp;#34;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;关闭信道与-for-loop&#34;&gt;关闭信道与 for loop &lt;a href=&#34;#%e5%85%b3%e9%97%ad%e4%bf%a1%e9%81%93%e4%b8%8e-for-loop&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func printNums(ch chan int) {
    for i := 0; i &amp;lt; 10; i++ {
        ch &amp;lt;- i
    }
    close(ch)
}

func main() {
    ch := make(chan int)
    go printNums(ch)
    for {
        v, ok := &amp;lt;-ch
        if ok == false {     // 通过 ok 判断信道是否关闭
            fmt.Println(v, ok)
            break
        }
        fmt.Println(v, ok)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;缓冲信道和普通信道&#34;&gt;缓冲信道和普通信道 &lt;a href=&#34;#%e7%bc%93%e5%86%b2%e4%bf%a1%e9%81%93%e5%92%8c%e6%99%ae%e9%80%9a%e4%bf%a1%e9%81%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;普通信道是&lt;code&gt;无缓冲的，读写信道会立马阻塞当前协程&lt;/code&gt;。对于缓冲信道，写不会阻塞当前信道直到信道满了，同理，读操作也不会阻塞当前信道除非信道没数据&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结 &lt;a href=&#34;#%e6%80%bb%e7%bb%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;{% post_link Go/channel总结 [channel总结]%}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go基础-切片</title>
      <link>https://abnerxc.github.io/go/base3.%E5%88%87%E7%89%87/</link>
      <pubDate>Tue, 15 Jan 2019 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/base3.%E5%88%87%E7%89%87/</guid>
      <description>&lt;h1 id=&#34;内部实现&#34;&gt;内部实现 &lt;a href=&#34;#%e5%86%85%e9%83%a8%e5%ae%9e%e7%8e%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;切片是基于数组实现的，它的底层是数组，它自己本身非常小，可以理解为对底层数组的抽象
切片对象非常小，是因为它是只有3个字段的数据结构：一个是指向底层数组的指针，一个是切片的长度，一个是切片的容量&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;声明和初始化&#34;&gt;声明和初始化 &lt;a href=&#34;#%e5%a3%b0%e6%98%8e%e5%92%8c%e5%88%9d%e5%a7%8b%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;slice:=make([]int,5)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用内置的make函数时，需要传入一个参数，指定切片的长度，例子中我们使用的时5，这时候切片的容量也是5。当然我们也可以单独指定切片的容量。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;slice:=make([]int,5,10)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建的切片长度是5，容量是10,需要注意的这个容量10其实对应的是切片底层数组的。&lt;/p&gt;
&lt;p&gt;因为切片的底层是数组，所以创建切片时，如果不指定字面值的话，默认值就是数组的元素的零值。这里我们所以指定了容量是10，但是我们只能访问5个元素，因为切片的长度是5，剩下的5个元素，需要切片扩充后才可以访问。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;容量必须&amp;gt;=长度，我们是不能创建长度大于容量的切片的。&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;slice:=[]int{1,2,3,4,5}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与创建数组非常像，只不过不用指定&lt;code&gt;[]&lt;/code&gt;中的值，这时候切片的长度和容量是相等的，并且会根据我们指定的字面量推导出来&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;slice:=[]int{4:1}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是指定了第5个元素为1，其他元素都是默认值0。这时候切片的长度和容量也是一样的&lt;/p&gt;
&lt;h1 id=&#34;数组和切片的微小差别&#34;&gt;数组和切片的微小差别 &lt;a href=&#34;#%e6%95%b0%e7%bb%84%e5%92%8c%e5%88%87%e7%89%87%e7%9a%84%e5%be%ae%e5%b0%8f%e5%b7%ae%e5%88%ab&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//数组
var arr [5]int
//切片
var slice []int


//数组
array:=[5]int{4:1}
//切片
slice:=[]int{4:1}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;nil切片和空切片&#34;&gt;nil切片和空切片 &lt;a href=&#34;#nil%e5%88%87%e7%89%87%e5%92%8c%e7%a9%ba%e5%88%87%e7%89%87&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//nil切片
var nilSlice []int
//空切片
slice:=[]int{}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;基于现有切片或者数组创建&#34;&gt;基于现有切片或者数组创建 &lt;a href=&#34;#%e5%9f%ba%e4%ba%8e%e7%8e%b0%e6%9c%89%e5%88%87%e7%89%87%e6%88%96%e8%80%85%e6%95%b0%e7%bb%84%e5%88%9b%e5%bb%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;slice := []int{1, 2, 3, 4, 5}
slice1 := slice[:]
slice2 := slice[0:]
slice3 := slice[:5]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用[i:j]这样的操作符即可，她表示以i索引开始，到j索引结束,截取原数组或者切片，创建而成的新切片，新切片的值包含原切片的i索引，但是不包含j索引。&lt;code&gt;slice[i:j)&lt;/code&gt;包含i,不包含j
第3个用来限定新切片的容量，其用法为&lt;code&gt;slice[i:j:k]&lt;/code&gt;,k用来限定切片的容量。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;slice := []int{1, 2, 3, 4, 5}
newSlice := slice[1:2:3]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个长度为2-1=1，容量为3-1=2的新切片,不过第三个索引，不能超过原切片的最大索引值5&lt;/p&gt;
&lt;h1 id=&#34;在函数间传递切片&#34;&gt;在函数间传递切片 &lt;a href=&#34;#%e5%9c%a8%e5%87%bd%e6%95%b0%e9%97%b4%e4%bc%a0%e9%80%92%e5%88%87%e7%89%87&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
	slice := []int{1, 2, 3, 4, 5}
	fmt.Printf(&amp;#34;%p\n&amp;#34;, &amp;amp;slice)
	modify(slice)
	fmt.Println(slice)
}

func modify(slice []int) {
	fmt.Printf(&amp;#34;%p\n&amp;#34;, &amp;amp;slice)
	slice[1] = 10
}

0xc420082060
0xc420082080
[1 10 3 4 5]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;观察发现，这两个切片的地址不一样，所以可以确认切片在函数间传递是复制的。而我们修改一个索引的值后，发现原切片的值也被修改了，说明它们共用一个底层数组。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go基础-基本类型</title>
      <link>https://abnerxc.github.io/go/base0.%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Tue, 15 Jan 2019 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/base0.%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;h1 id=&#34;内建类型种类&#34;&gt;内建类型种类 &lt;a href=&#34;#%e5%86%85%e5%bb%ba%e7%b1%bb%e5%9e%8b%e7%a7%8d%e7%b1%bb&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bool：布尔类型,可选 true|false,默认初始化零值 false&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整型
8bit=1字节，int(8)表示8个bit位&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;字节&lt;/th&gt;
          &lt;th&gt;取值&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;(u)int(8)&lt;/td&gt;
          &lt;td&gt;2^0=1&lt;/td&gt;
          &lt;td&gt;2^8=-127~128&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;(u)int(16)&lt;/td&gt;
          &lt;td&gt;2^1=2&lt;/td&gt;
          &lt;td&gt;2^16&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;(u)int(32)&lt;/td&gt;
          &lt;td&gt;2^2=4&lt;/td&gt;
          &lt;td&gt;2^32&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;(u)int(64)&lt;/td&gt;
          &lt;td&gt;2^3=8&lt;/td&gt;
          &lt;td&gt;2^64&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;(u)int&lt;/td&gt;
          &lt;td&gt;跟随操作系统位数(32or64位)&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;uintptr:一个足够大的无符号整型， 用来表示任意地址;一个uintptr是一个整数，不是一个引用。把一个Pointer转换为uintptr后，实际是剥离了原有的指针的语义，只取了地址的整数值。&lt;code&gt;p = unsafe.Pointer( uintptr ( p ) + offset )&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;byte(uint8) , rune(int32)，string&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;byte :最基础字节类型,是 uint8 类型的别名&lt;/li&gt;
&lt;li&gt;rune : Go 中的字符类型,是 int32 的别名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;string
值用 &amp;quot;&amp;quot; 或者 `` 包括, `` 可包含多行字符串,字符串的内容在初始化后，不能被修改，但可重新完全赋值，字符串的操作与数组相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;float32 , float64 , complex64 , complex128
8bit=1字节，float32表示32个bit位，刚好4个字节&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;字节&lt;/th&gt;
          &lt;th&gt;取值&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;float32&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;float64&lt;/td&gt;
          &lt;td&gt;8&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;complex64&lt;/td&gt;
          &lt;td&gt;8&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;complex128&lt;/td&gt;
          &lt;td&gt;16&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;h1 id=&#34;内建类型特点&#34;&gt;内建类型特点 &lt;a href=&#34;#%e5%86%85%e5%bb%ba%e7%b1%bb%e5%9e%8b%e7%89%b9%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;类型转换只有显示转换,不存在任何形式的隐式类型转换&lt;/li&gt;
&lt;li&gt;虽然提供指针类型,但指针本身不能进行任何形式的计算&lt;/li&gt;
&lt;li&gt;变量声明后有默认初始化零值,变量零值视具体类型而定&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;init函数特点&#34;&gt;init函数特点 &lt;a href=&#34;#init%e5%87%bd%e6%95%b0%e7%89%b9%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;主要作用
&lt;ul&gt;
&lt;li&gt;初始化不能采用初始化表达式初始化的变量。&lt;/li&gt;
&lt;li&gt;程序运行前的注册。&lt;/li&gt;
&lt;li&gt;实现sync.Once功能。&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特点&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;init() 函数是用于程序执行前做包的初始化的函数，比如初始化包里的变量等;&lt;/li&gt;
&lt;li&gt;一个包可以出线多个 init() 函数,一个源文件也可以包含多个 init() 函数；&lt;/li&gt;
&lt;li&gt;同一个包中多个 init() 函数的执行顺序没有明确定义，但是不同包的init函数是根据包导入的依赖关系决定的（看下图）;&lt;/li&gt;
&lt;li&gt;init() 函数在代码中不能被显示调用、不能被引用（赋值给函数变量），否则出现编译错误;&lt;/li&gt;
&lt;li&gt;一个包被引用多次，如 A import B,C import B,A import C，B 被引用多次，但 B 包只会初始化一次；&lt;/li&gt;
&lt;li&gt;引入包，不可出现死循坏。即 A import B,B import A，这种情况编译失败；
&lt;img src=&#34;https://abnerxc.github.io/img/go-inipack.jpeg&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;type的使用&#34;&gt;.(type)的使用 &lt;a href=&#34;#type%e7%9a%84%e4%bd%bf%e7%94%a8&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;类型选择，类型选择的语法形如：i.(type)，其中 i 是接口，type 是固定关键字，需要注意的是，&lt;code&gt;只有接口类型才可以使用类型选择&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go基础-字符串高效拼</title>
      <link>https://abnerxc.github.io/go/base2.%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%AB%98%E6%95%88%E6%8B%BC%E6%8E%A5/</link>
      <pubDate>Tue, 15 Jan 2019 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/base2.%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%AB%98%E6%95%88%E6%8B%BC%E6%8E%A5/</guid>
      <description>&lt;h1 id=&#34;号拼接&#34;&gt;+号拼接 &lt;a href=&#34;#%e5%8f%b7%e6%8b%bc%e6%8e%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;这种拼接最简单，也最容易被我们使用，因为它是不限编程语言的，比如Go语言有，Java也有，它们是+号运算符，在运行时计算的。现在演示下这种拼接的代码，虽然比较简单。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func StringPlus() string{
	var s string
	s+=&amp;#34;昵称&amp;#34;+&amp;#34;:&amp;#34;+&amp;#34;飞雪无情&amp;#34;+&amp;#34;\n&amp;#34;
	s+=&amp;#34;博客&amp;#34;+&amp;#34;:&amp;#34;+&amp;#34;http://www.flysnow.org/&amp;#34;+&amp;#34;\n&amp;#34;
	s+=&amp;#34;微信公众号&amp;#34;+&amp;#34;:&amp;#34;+&amp;#34;flysnow_org&amp;#34;
	return s
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以自己写个用例测试下，可以打印出和我们例子中一样的内容。那么这种最常见的字符串拼接的方式性能怎么样的呢，我们测试下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func BenchmarkStringPlus(b *testing.B) {
	for i:=0;i&amp;lt;b.N;i++{
		StringPlus()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行&lt;code&gt;go test -bench=. -benchmem&lt;/code&gt; 查看性能输出如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BenchmarkStringPlus-8   20000000    108 ns/op   144 B/op    2 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;每次操作需要108ns,进行2次内存分配，分配114字节的内存。&lt;/p&gt;
&lt;h1 id=&#34;fmt-拼接&#34;&gt;fmt 拼接 &lt;a href=&#34;#fmt-%e6%8b%bc%e6%8e%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;这种拼接，借助于&lt;code&gt;fmt.Sprint&lt;/code&gt;系列函数进行拼接，然后返回拼接的字符串。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func StringFmt() string{
	return fmt.Sprint(&amp;#34;昵称&amp;#34;,&amp;#34;:&amp;#34;,&amp;#34;飞雪无情&amp;#34;,&amp;#34;\n&amp;#34;,&amp;#34;博客&amp;#34;,&amp;#34;:&amp;#34;,&amp;#34;http://www.flysnow.org/&amp;#34;,&amp;#34;\n&amp;#34;,&amp;#34;微信公众号&amp;#34;,&amp;#34;:&amp;#34;,&amp;#34;flysnow_org&amp;#34;)
}

func BenchmarkStringFmt(b *testing.B) {
	for i:=0;i&amp;lt;b.N;i++{
		StringFmt()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行查看测试结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BenchmarkStringFmt-8    5000000     385 ns/op   80 B/op     1 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;font color=red&gt;虽然每次操作内存分配只有1次，分配80字节也不多，但是每次操作耗时太长，性能远没有&lt;code&gt;+&lt;/code&gt;号操作快。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&#34;join-拼接&#34;&gt;Join 拼接 &lt;a href=&#34;#join-%e6%8b%bc%e6%8e%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;这个是利用&lt;code&gt;strings.Join&lt;/code&gt;函数进行拼接，接受一个字符串数组，转换为一个拼接好的字符串。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func StringJoin() string{
	s:=[]string{&amp;#34;昵称&amp;#34;,&amp;#34;:&amp;#34;,&amp;#34;飞雪无情&amp;#34;,&amp;#34;\n&amp;#34;,&amp;#34;博客&amp;#34;,&amp;#34;:&amp;#34;,&amp;#34;http://www.flysnow.org/&amp;#34;,&amp;#34;\n&amp;#34;,&amp;#34;微信公众号&amp;#34;,&amp;#34;:&amp;#34;,&amp;#34;flysnow_org&amp;#34;}
	return strings.Join(s,&amp;#34;&amp;#34;)
}

func BenchmarkStringJoin(b *testing.B) {
	for i:=0;i&amp;lt;b.N;i++{
		StringJoin()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了方便，把性能测试的代码放一起了，现在看看性能测试的效果。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BenchmarkStringJoin-8   10000000    177 ns/op   160 B/op    2 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;font color=red&gt;整体和&lt;code&gt;+&lt;/code&gt;操作相差不了太多，大概低0.5倍的样子。&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&#34;buffer-拼接&#34;&gt;buffer 拼接 &lt;a href=&#34;#buffer-%e6%8b%bc%e6%8e%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;这种被用的也很多，使用的是&lt;code&gt;bytes.Buffer&lt;/code&gt;进行的字符串拼接，它是非常灵活的一个结构体，不止可以拼接字符串，还是可以&lt;code&gt;byte,rune&lt;/code&gt;等，并且实现了&lt;code&gt;io.Writer&lt;/code&gt;接口，写入也非常方便。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func StringBuffer() string {
	var b bytes.Buffer
	b.WriteString(&amp;#34;昵称&amp;#34;)
	b.WriteString(&amp;#34;:&amp;#34;)
	b.WriteString(&amp;#34;飞雪无情&amp;#34;)
	b.WriteString(&amp;#34;\n&amp;#34;)
	b.WriteString(&amp;#34;博客&amp;#34;)
	b.WriteString(&amp;#34;:&amp;#34;)
	b.WriteString(&amp;#34;http://www.flysnow.org/&amp;#34;)
	b.WriteString(&amp;#34;\n&amp;#34;)
	b.WriteString(&amp;#34;微信公众号&amp;#34;)
	b.WriteString(&amp;#34;:&amp;#34;)
	b.WriteString(&amp;#34;flysnow_org&amp;#34;)
	return b.String()
}

func BenchmarkStringBuffer(b *testing.B) {
	for i:=0;i&amp;lt;b.N;i++{
		StringBuffer()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看看他的性能，运行输出即可：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BenchmarkStringBuffer-8     5000000     291 ns/op   336 B/op    3 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;好像并不是太好,和最差的fmt拼接差不多，和&lt;code&gt;+&lt;/code&gt;号，Join拼接差好远，内存分配也比较多。每次操作耗时也很长。&lt;/p&gt;
&lt;h1 id=&#34;builder-拼接&#34;&gt;builder 拼接 &lt;a href=&#34;#builder-%e6%8b%bc%e6%8e%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;为了改进buffer拼接的性能，从go 1.10 版本开始，增加了一个builder类型，用于提升字符串拼接的性能。它的使用和buffer几乎一样。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func StringBuilder() string {
	var b strings.Builder
	b.WriteString(&amp;#34;昵称&amp;#34;)
	b.WriteString(&amp;#34;:&amp;#34;)
	b.WriteString(&amp;#34;飞雪无情&amp;#34;)
	b.WriteString(&amp;#34;\n&amp;#34;)
	b.WriteString(&amp;#34;博客&amp;#34;)
	b.WriteString(&amp;#34;:&amp;#34;)
	b.WriteString(&amp;#34;http://www.flysnow.org/&amp;#34;)
	b.WriteString(&amp;#34;\n&amp;#34;)
	b.WriteString(&amp;#34;微信公众号&amp;#34;)
	b.WriteString(&amp;#34;:&amp;#34;)
	b.WriteString(&amp;#34;flysnow_org&amp;#34;)
	return b.String()
}

func BenchmarkStringBuilder(b *testing.B) {
	for i:=0;i&amp;lt;b.N;i++{
		StringBuilder()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;官方都说比buffer性能好了，我们看看性能测试的结果。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BenchmarkStringBuilder-8    10000000    170 ns/op   232 B/op    4 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;的确提升了，提升了一倍，虽然每次分配的内存次数有点多，但是每次分配的内存大小比buffer要少。&lt;/p&gt;
&lt;h1 id=&#34;性能对比&#34;&gt;性能对比 &lt;a href=&#34;#%e6%80%a7%e8%83%bd%e5%af%b9%e6%af%94&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;以上就是常用的字符串拼接的方式，现在我们把这些测试结果，汇总到一起，对比下看看,因为Benchmark的测试，对于性能只显示，我把测试的时间设置为3s（秒），把时间拉长便于对比测试，同时生成了cpu profile文件，用于性能分析。&lt;/p&gt;
&lt;p&gt;运行&lt;code&gt;go test xx.go -bench=. -benchmem -benchtime=3s -cpuprofile=profile.out&lt;/code&gt;得到如下测试结果：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;StringPlus-8    50000000    112 ns/op   144 B/op    2 allocs/op
StringFmt-8     20000000    344 ns/op   80 B/op     1 allocs/op
StringJoin-8    30000000    171 ns/op   160 B/op    2 allocs/op
StringBuffer-8  20000000    302 ns/op   336 B/op    3 allocs/op
StringBuilder-8 30000000    171 ns/op   232 B/op    4 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们通过&lt;code&gt;go tool pprof profile.out&lt;/code&gt; 看下我们输出的cpu profile信息。这里主要使用top命令。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Showing top 15 nodes out of 89
      flat  flat%   sum%        cum   cum%
    11.99s 42.55% 42.55%     11.99s 42.55%  runtime.kevent
     6.30s 22.36% 64.90%      6.30s 22.36%  runtime.pthread_cond_wait
     1.65s  5.86% 70.76%      1.65s  5.86%  runtime.pthread_cond_signal
     1.11s  3.94% 74.70%      1.11s  3.94%  runtime.usleep
     1.10s  3.90% 78.60%      1.10s  3.90%  runtime.pthread_cond_timedwait_relative_np
     0.58s  2.06% 80.66%      0.62s  2.20%  runtime.wbBufFlush1
     0.51s  1.81% 82.47%      0.51s  1.81%  runtime.memmove
     0.44s  1.56% 84.03%      1.81s  6.42%  fmt.(*pp).printArg
     0.39s  1.38% 85.42%      2.36s  8.37%  fmt.(*pp).doPrint
     0.36s  1.28% 86.69%      0.70s  2.48%  fmt.(*buffer).WriteString (inline)
     0.34s  1.21% 87.90%      0.93s  3.30%  runtime.mallocgc
     0.20s  0.71% 88.61%      1.20s  4.26%  fmt.(*fmt).fmtS
     0.18s  0.64% 89.25%      0.18s  0.64%  fmt.(*fmt).truncate
     0.16s  0.57% 89.82%      0.16s  0.57%  runtime.memclrNoHeapPointers
     0.15s  0.53% 90.35%      1.35s  4.79%  fmt.(*pp).fmtString
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前15个，可以看到fmt拼接的方式是最差的，因为fmt里很多方法耗时排在了最前面。buffer的WriteString方法也比较耗时。&lt;/p&gt;
&lt;p&gt;以上的TOP可能还不是太直观，如果大家看火焰图的话，就会更清晰。性能最好的是&lt;code&gt;+&lt;/code&gt;号拼接、Join拼接，最慢的是fmt拼接，这里的builder和buffer拼接差不多，并没有发挥出其能力。&lt;/p&gt;
&lt;h1 id=&#34;疑问&#34;&gt;疑问 &lt;a href=&#34;#%e7%96%91%e9%97%ae&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;从整个性能的测试和分析来看，我们期待的builder并没有发挥出来，这是不是意味着builder不实用了呢？还不如+号和Join拼接呢？继续接着分析,猜测可能原因如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拼接的字符串大小&lt;/li&gt;
&lt;li&gt;拼接的字符串数量&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;拼接函数改造&#34;&gt;拼接函数改造 &lt;a href=&#34;#%e6%8b%bc%e6%8e%a5%e5%87%bd%e6%95%b0%e6%94%b9%e9%80%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;前面提到了2种可能的猜测，拼接字符串的数量和拼接字符串的大小，现在我们就开始证明这两种情况，为了演示方便，我们把原来的拼接函数修改一下，可以接受一个[]string类型的参数，这样我们就可以对切片数组进行字符串拼接，这里直接给出所有的拼接方法的改造后实现。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func StringPlus(p []string) string{
	var s string
	l:=len(p)
	for i:=0;i&amp;lt;l;i++{
		s+=p[i]
	}
	return s
}

func StringFmt(p []interface{}) string{
	return fmt.Sprint(p...)
}

func StringJoin(p []string) string{
	return strings.Join(p,&amp;#34;&amp;#34;)
}

func StringBuffer(p []string) string {
	var b bytes.Buffer
	l:=len(p)
	for i:=0;i&amp;lt;l;i++{
		b.WriteString(p[i])
	}
	return b.String()
}

func StringBuilder(p []string) string {
	var b strings.Builder
	l:=len(p)
	for i:=0;i&amp;lt;l;i++{
		b.WriteString(p[i])
	}
	return b.String()
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;测试用例&#34;&gt;测试用例 &lt;a href=&#34;#%e6%b5%8b%e8%af%95%e7%94%a8%e4%be%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;以上的字符串拼接函数修改后，我们就可以构造不同大小的切片进行字符串拼接测试了。为了模拟上次的效果，我们先用10个切片大小的字符串进行拼接测试。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const BLOG  = &amp;#34;http://www.flysnow.org/&amp;#34;

func initStrings(N int) []string{
	s:=make([]string,N)
	for i:=0;i&amp;lt;N;i++{
		s[i]=BLOG
	}
	return s;
}

func initStringi(N int) []interface{}{
	s:=make([]interface{},N)
	for i:=0;i&amp;lt;N;i++{
		s[i]=BLOG
	}
	return s;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是两个构建测试用例切片数组的函数，可以生成N个大小的切片。第二个initStringi函数返回的是[]interface{}，这是专门为StringFmt(p []interface{})拼接函数准备的，减少类型之间的转换。&lt;/p&gt;
&lt;p&gt;有了这两个生成测试用例的函数，我们就可以构建我们的Go语言性能测试了，我们先测试10个大小的切片。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func BenchmarkStringPlus10(b *testing.B) {
	p:= initStrings(10)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringPlus(p)
	}
}

func BenchmarkStringFmt10(b *testing.B) {
	p:= initStringi(10)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringFmt(p)
	}
}

func BenchmarkStringJoin10(b *testing.B) {
	p:= initStrings(10)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringJoin(p)
	}
}

func BenchmarkStringBuffer10(b *testing.B) {
	p:= initStrings(10)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringBuffer(p)
	}
}

func BenchmarkStringBuilder10(b *testing.B) {
	p:= initStrings(10)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringBuilder(p)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在每个性能测试函数中，我们都会调用b.ResetTimer()，这是为了避免测试用例准备时间不同，带来的性能测试效果偏差问题
我们运行&lt;code&gt;go test -bench=. -run=NONE -benchmem&lt;/code&gt; 查看结果。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BenchmarkStringPlus10-8     3000000     593 ns/op   1312 B/op   9 allocs/op
BenchmarkStringFmt10-8      5000000     335 ns/op   240 B/op    1 allocs/op
BenchmarkStringJoin10-8     10000000    200 ns/op   480 B/op    2 allocs/op
BenchmarkStringBuffer10-8   3000000     452 ns/op   864 B/op    4 allocs/op
BenchmarkStringBuilder10-8  10000000    231 ns/op   480 B/op    4 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过这次我们可以看到，&lt;code&gt;+&lt;/code&gt;号拼接不再具有优势，因为string是不可变的，每次拼接都会生成一个新的&lt;code&gt;string&lt;/code&gt;,也就是会进行一次内存分配，我们现在是10个大小的切片，每次操作要进行9次进行分配，占用内存，所以每次操作时间都比较长，自然性能就低下。&lt;/p&gt;
&lt;p&gt;文章上面关于&lt;code&gt;+&lt;/code&gt;拼接还有印象，&lt;code&gt;+&lt;/code&gt;加号拼接的性能测试中显示的只有2次内存分配，但是我们用了好多个&lt;code&gt;+&lt;/code&gt;的。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func StringPlus() string{
	var s string
	s+=&amp;#34;昵称&amp;#34;+&amp;#34;:&amp;#34;+&amp;#34;飞雪无情&amp;#34;+&amp;#34;\n&amp;#34;
	s+=&amp;#34;博客&amp;#34;+&amp;#34;:&amp;#34;+&amp;#34;http://www.flysnow.org/&amp;#34;+&amp;#34;\n&amp;#34;
	s+=&amp;#34;微信公众号&amp;#34;+&amp;#34;:&amp;#34;+&amp;#34;flysnow_org&amp;#34;
	return s
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再来回顾下这段代码，的确是有很多+的，但是只有2次内存分配，我们可以大胆猜测,是3次s+=导致的，正常和我们今天测试的10个长度的切片，只有9次内存分配一样。下面我们通过运行如下命令看下Go编译器对这段代码的优化：&lt;code&gt;go build -gcflags=&amp;quot;-m -m&amp;quot; main.go&lt;/code&gt;,输出中有如下内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;can inline StringPlus as: func() string { var s string; s = &amp;lt;N&amp;gt;; s += &amp;#34;昵称:飞雪无情\n&amp;#34;; s += &amp;#34;博客:http://www.flysnow.org/\n&amp;#34;; s += &amp;#34;微信公众号:flysnow_org&amp;#34;; return s }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在一目了然了，其实是编译器帮我们把字符串做了优化，只剩下3个&lt;code&gt;s+=&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这次，采用长度为10个切片进行测试，也很明显测试出了Builder要比Buffer性能好很多，这个问题原因主要还是&lt;code&gt;[]byte&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;之间的转换，&lt;code&gt;Builder&lt;/code&gt;恰恰解决了这个问题。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (b *Builder) String() string {
	return *(*string)(unsafe.Pointer(&amp;amp;b.buf))
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;很高效的解决方案。&lt;/p&gt;
&lt;h1 id=&#34;100个字符串&#34;&gt;100个字符串 &lt;a href=&#34;#100%e4%b8%aa%e5%ad%97%e7%ac%a6%e4%b8%b2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;现在我们测试下100个字符串拼接的情况，对于我们上面的代码，要改造非常容易，这里直接给出测试代码。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func BenchmarkStringPlus100(b *testing.B) {
	p:= initStrings(100)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringPlus(p)
	}
}

func BenchmarkStringFmt100(b *testing.B) {
	p:= initStringi(100)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringFmt(p)
	}
}

func BenchmarkStringJoin100(b *testing.B) {
	p:= initStrings(100)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringJoin(p)
	}
}

func BenchmarkStringBuffer100(b *testing.B) {
	p:= initStrings(100)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringBuffer(p)
	}
}

func BenchmarkStringBuilder100(b *testing.B) {
	p:= initStrings(100)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringBuilder(p)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在运行性能测试，看看100个字符串连接的性能怎么样，哪个函数最高效。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BenchmarkStringPlus100-8    100000  19711 ns/op     123168 B/op     99 allocs/op
BenchmarkStringFmt100-8     500000  2615 ns/op      2304 B/op       1 allocs/op
BenchmarkStringJoin100-8    1000000 1516 ns/op      4608 B/op       2 allocs/op
BenchmarkStringBuffer100-8  500000  2333 ns/op      8112 B/op       7 allocs/op
BenchmarkStringBuilder100-8 1000000 1714 ns/op      6752 B/op       8 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;+&lt;/code&gt;号和我们上面分析得一样，这次是99次内存分配，性能体验越来越差，在后面的测试中，会排除掉。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fmt&lt;/code&gt;和&lt;code&gt;bufrer&lt;/code&gt;已经的性能也没有提升，继续走低。剩下比较坚挺的是&lt;code&gt;Join&lt;/code&gt;和&lt;code&gt;Builder&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;1000-个字符串&#34;&gt;1000 个字符串。 &lt;a href=&#34;#1000-%e4%b8%aa%e5%ad%97%e7%ac%a6%e4%b8%b2&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;测试用力和上面章节的大同小异，所以我们直接看测试结果。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;BenchmarkStringPlus1000-8       1000    1611985 ns/op   12136228 B/op   999 allocs/op
BenchmarkStringFmt1000-8        50000   28510 ns/op     24590 B/op      1 allocs/op
BenchmarkStringJoin1000-8       100000  15050 ns/op     49152 B/op      2 allocs/op
BenchmarkStringBuffer1000-8     100000  23534 ns/op     122544 B/op     11 allocs/op
BenchmarkStringBuilder1000-8    100000  17996 ns/op     96224 B/op      16 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;整体和100个字符串的时候差不多，表现好的还是&lt;code&gt;Join&lt;/code&gt;和&lt;code&gt;Builder&lt;/code&gt;。这两个方法的使用侧重点有些不一样， 如果有现成的数组、切片那么可以直接使用&lt;code&gt;Join&lt;/code&gt;,但是如果没有，并且追求灵活性拼接，还是选择&lt;code&gt;Builder&lt;/code&gt;。 &lt;code&gt;Join&lt;/code&gt;还是定位于有现成切片、数组的（毕竟拼接成数组也要时间），并且使用固定方式进行分解的，比如逗号、空格等，局限比较大。&lt;/p&gt;
&lt;h1 id=&#34;小结&#34;&gt;小结 &lt;a href=&#34;#%e5%b0%8f%e7%bb%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;至于10000个字符串拼接我这里就不做测试了，大家可以自己试试，看看是不是大同小异的。&lt;/p&gt;
&lt;p&gt;从最近的这两篇文章的分析来看，我们大概可以总结出。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;连接适用于短小的、常量字符串（明确的，非变量），因为编译器会给我们优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Join是比较统一的拼接，不太灵活&lt;/li&gt;
&lt;li&gt;fmt和buffer基本上不推荐&lt;/li&gt;
&lt;li&gt;builder从性能和灵活性上，都是上佳的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;builder-慢在哪&#34;&gt;Builder 慢在哪 &lt;a href=&#34;#builder-%e6%85%a2%e5%9c%a8%e5%93%aa&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;在前面可以看出来少量拼接，&lt;code&gt;builder&lt;/code&gt;并不明显，那么到底慢在哪里呢？既然要优化Builder拼接，那么我们起码知道他慢在哪，我们继续使用我们上篇文章的测试用例，运行看下性能。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Builder10-8     5000000     258 ns/op       480 B/op        4 allocs/op
Builder100-8    1000000     2012 ns/op      6752 B/op       8 allocs/op
Builder1000-8   100000      21016 ns/op     96224 B/op      16 allocs/op
Builder10000-8  10000       195098 ns/op    1120226 B/op    25 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;针对既然要优化&lt;code&gt;Builder&lt;/code&gt;拼接,采取了10、100、1000、10000四种不同数量的字符串进行拼接测试。我们发现每次操作都有不同次数的内存分配，内存分配越多，越慢，如果引起GC，就更慢了，首先我们先优化这个，减少内存分配的次数。&lt;/p&gt;
&lt;h1 id=&#34;内存分配优化&#34;&gt;内存分配优化 &lt;a href=&#34;#%e5%86%85%e5%ad%98%e5%88%86%e9%85%8d%e4%bc%98%e5%8c%96&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;通过cpuprofile，查看生成的火焰图可以得知，&lt;code&gt;runtime.growslice&lt;/code&gt;函数会被频繁的调用，并且时间占比也比较长。我们查看&lt;code&gt;Builder.WriteString&lt;/code&gt;的源代码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (b *Builder) WriteString(s string) (int, error) {
	b.copyCheck()
	b.buf = append(b.buf, s...)
	return len(s), nil
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以肯定是&lt;code&gt;append&lt;/code&gt;方法触发了&lt;code&gt;runtime.growslice&lt;/code&gt;，因为&lt;code&gt;b.buf&lt;/code&gt;的容量&lt;code&gt;cap&lt;/code&gt;不足，所以需要调用&lt;code&gt;runtime.growslice&lt;/code&gt;扩充&lt;code&gt;b.buf&lt;/code&gt;的容量，然后才可以追加新的元素&lt;code&gt;s...&lt;/code&gt;。扩容容量自然会涉及到内存的分配，而且追加的内容越多，内存分配的次数越多，这和我们上面性能测试的数据是一样的。&lt;/p&gt;
&lt;p&gt;既然问题的原因找到了，那么我们就可以优化了，核心手段就是减少&lt;code&gt;runtime.growslice&lt;/code&gt;调用，甚至不调用。照着这个思路的话，我们就要提前为&lt;code&gt;b.buf&lt;/code&gt;分配好容量&lt;code&gt;cap&lt;/code&gt;。幸好&lt;code&gt;Builder&lt;/code&gt;为我们提供了扩充容量的方法&lt;code&gt;Grow&lt;/code&gt;，我们在进行&lt;code&gt;WriteString&lt;/code&gt;之前，先通过&lt;code&gt;Grow&lt;/code&gt;方法，扩充好容量即可。&lt;/p&gt;
&lt;p&gt;现在开始改造我们的StringBuilder函数。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func StringBuilder(p []string,cap int) string {
	var b strings.Builder
	l:=len(p)
	b.Grow(cap)
	for i:=0;i&amp;lt;l;i++{
		b.WriteString(p[i])
	}
	return b.String()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;增加一个参数&lt;code&gt;cap&lt;/code&gt;，让使用者告诉我们需要的容量大小。&lt;code&gt;Grow&lt;/code&gt;方法的实现非常简单，就是一个通过&lt;code&gt;make&lt;/code&gt;函数，扩充&lt;code&gt;b.buf&lt;/code&gt;大小，然后再拷贝&lt;code&gt;b.buf&lt;/code&gt;的过程。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func (b *Builder) grow(n int) {
	buf := make([]byte, len(b.buf), 2*cap(b.buf)+n)
	copy(buf, b.buf)
	b.buf = buf
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么现在我们的性能测试用例变成如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func BenchmarkStringBuilder10(b *testing.B) {
	p:= initStrings(10)
	cap:=10*len(BLOG)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringBuilder(p,cap)
	}
}

func BenchmarkStringBuilder1000(b *testing.B) {
	p:= initStrings(1000)
	cap:=1000*len(BLOG)
	b.ResetTimer()
	for i:=0;i&amp;lt;b.N;i++{
		StringBuilder(p,cap)
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了说明情况和简短代码，这里只有10和1000个元素的用例，其他类似。为了把性能优化到极致，我一次性把需要的容量分配足够。现在我们再运行性能（Benchmark）测试代码。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Builder10-8     10000000    123 ns/op       352 B/op    1 allocs/op
Builder100-8    2000000     898 ns/op       2688 B/op   1 allocs/op
Builder1000-8   200000      7729 ns/op      24576 B/op  1 allocs/op
Builder10000-8  20000       78678 ns/op     237568 B/op 1 allocs/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;性能足足翻了1倍多，只有1次内存分配，每次操作占用的内存也减少了一半多，降低了GC。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结 &lt;a href=&#34;#%e6%80%bb%e7%bb%93&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;背后的原理也非常清楚，就是预先分配内存，减少append过程中的内存重新分配和数据拷贝，这样我们就可以提升很多的性能。所以对于可以预见的长度的切，都可以提前申请申请好内存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文收集来源：https://www.flysnow.org&lt;/p&gt;&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Go的pprof使用技巧</title>
      <link>https://abnerxc.github.io/go/pprof/</link>
      <pubDate>Tue, 15 Jan 2019 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/pprof/</guid>
      <description>&lt;h1 id=&#34;1安装易用的pprof&#34;&gt;1.安装易用的pprof &lt;a href=&#34;#1%e5%ae%89%e8%a3%85%e6%98%93%e7%94%a8%e7%9a%84pprof&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;golang自带的prof包是runtime/pprof，这个是低级别的，需要你手动做一些设置等等周边工作，不利于我们快速上手，利用pprof帮助我们解决实际的问题。这里推荐davecheney封装的pprof，它可以1行代码，让你用上pprof，专心解决自己的代码问题，下载：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go get github.com/pkg/profile
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;2安装graphviz&#34;&gt;2.安装graphviz &lt;a href=&#34;#2%e5%ae%89%e8%a3%85graphviz&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;pprof生成的prof文件时二进制的，需要把这个二进制的文件转换为我们人类可读的，graphviz可以帮助我们把二进制的prof文件转换为图像。Mac安装：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install graphviz
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;3修改main函数&#34;&gt;3.修改main函数 &lt;a href=&#34;#3%e4%bf%ae%e6%94%b9main%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;只需要为hi.go增加这一行，defer profile.Start().Stop()，程序运行时，默认就会记录cpu数据&lt;/p&gt;
&lt;h1 id=&#34;4编译运行你的函数&#34;&gt;4.编译运行你的函数 &lt;a href=&#34;#4%e7%bc%96%e8%af%91%e8%bf%90%e8%a1%8c%e4%bd%a0%e7%9a%84%e5%87%bd%e6%95%b0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;#34;fmt&amp;#34;
	&amp;#34;github.com/pkg/profile&amp;#34;
)

func main() {
	defer profile.Start().Stop()
	sl:=makeSlice()
	fmt.Printf(&amp;#34;sum=%d\n&amp;#34;,sumSlice(sl))
}

func makeSlice() []int {
	sl := make([]int, 10000000)
	for idx := range sl {
		sl[idx] = idx
	}
	return sl
}

func sumSlice(sl []int) int {
	sum := 0
	for _, x := range sl {
		sum += x
	}
	return sum
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行代码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go build hi.go
./hi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;应当看到类似的结果，它输出了生成的cpu.pprof的路径：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;2019/02/26 23:24:22 profile: cpu profiling enabled, /var/folders/zy/d8yskqjj09q21y7jnc0vbsqh0000gn/T/profile152894194/cpu.pprof  
sum=49999995000000  
2019/02/26 23:24:22 profile: cpu profiling disabled, /var/folders/zy/d8yskqjj09q21y7jnc0vbsqh0000gn/T/profile152894194/cpu.pprof  
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;5可视化prof&#34;&gt;5.可视化prof &lt;a href=&#34;#5%e5%8f%af%e8%a7%86%e5%8c%96prof&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;可视化有多种方式，可以转换为text、pdf、svg等等。text命令是&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go tool pprof --text /path/to/yourbinary /var/path/to/cpu.pprof
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go tool pprof --text ./hi /var/folders/zy/d8yskqjj09q21y7jnc0vbsqh0000gn/T/profile626723859/cpu.pprof
File: hi
Type: cpu
Time: Feb 26, 2019 at 11:29pm (CST)
Duration: 203.53ms, Total samples = 100ms (49.13%)
Showing nodes accounting for 100ms, 100% of 100ms total
      flat  flat%   sum%        cum   cum%
      60ms 60.00% 60.00%       60ms 60.00%  runtime.usleep
      30ms 30.00% 90.00%       30ms 30.00%  main.makeSlice
      10ms 10.00%   100%       10ms 10.00%  runtime.nanotime
         0     0%   100%       30ms 30.00%  main.main
         0     0%   100%       10ms 10.00%  runtime.gcBgMarkWorker
         0     0%   100%       70ms 70.00%  runtime.gcBgMarkWorker.func2
         0     0%   100%       70ms 70.00%  runtime.gcDrain
         0     0%   100%       30ms 30.00%  runtime.main
         0     0%   100%       70ms 70.00%  runtime.markroot
         0     0%   100%       70ms 70.00%  runtime.markroot.func1
         0     0%   100%       60ms 60.00%  runtime.mstart
         0     0%   100%       60ms 60.00%  runtime.osyield
         0     0%   100%       70ms 70.00%  runtime.scang
         0     0%   100%       70ms 70.00%  runtime.systemstack
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;生成pdf图&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; go tool pprof --pdf ./hi /var/folders/zy/d8yskqjj09q21y7jnc0vbsqh0000gn/T/profile626723859/cpu.pprof &amp;gt; cpu.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;6获取内存ppfo&#34;&gt;6.获取内存ppfo &lt;a href=&#34;#6%e8%8e%b7%e5%8f%96%e5%86%85%e5%ad%98ppfo&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;如果你掌握了cpu pprof，mem pprof轻而易举就能拿下，只需要改1行代码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;defer profile.Start(profile.MemProfile).Stop()
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Go语言编程模式</title>
      <link>https://abnerxc.github.io/go/go%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 15 Jan 2019 18:35:11 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/go/go%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;性能提示&#34;&gt;性能提示 &lt;a href=&#34;#%e6%80%a7%e8%83%bd%e6%8f%90%e7%a4%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;如果需要把数字转换成字符串，使用 strconv.Itoa() 比 fmt.Sprintf() 要快一倍左右。&lt;/li&gt;
&lt;li&gt;尽可能避免把String转成[]Byte ，这个转换会导致性能下降。&lt;/li&gt;
&lt;li&gt;如果在 for-loop 里对某个 Slice 使用 append()，请先把 Slice 的容量扩充到位，这样可以避免内存重新分配以及系统自动按 2 的 N 次方幂进行扩展但又用不到的情况，从而避免浪费内存。&lt;/li&gt;
&lt;li&gt;使用StringBuffer 或是StringBuild 来拼接字符串，性能会比使用 + 或 +=高三到四个数量级。&lt;/li&gt;
&lt;li&gt;尽可能使用并发的 goroutine，然后使用 sync.WaitGroup 来同步分片操作。&lt;/li&gt;
&lt;li&gt;避免在热代码中进行内存分配，这样会导致 gc 很忙。尽可能使用 sync.Pool 来重用对象。&lt;/li&gt;
&lt;li&gt;使用 lock-free 的操作，避免使用 mutex，尽可能使用 sync/Atomic包&lt;/li&gt;
&lt;li&gt;使用 I/O 缓冲，I/O 是个非常非常慢的操作，使用 bufio.NewWrite() 和 bufio.NewReader() 可以带来更高的性能。&lt;/li&gt;
&lt;li&gt;对于在 for-loop 里的固定的正则表达式，一定要使用 regexp.Compile() 编译正则表达式。性能会提升两个数量级。&lt;/li&gt;
&lt;li&gt;如果你需要更高性能的协议，就要考虑使用 protobuf 或 msgp 而不是 JSON，因为 JSON 的序列化和反序列化里使用了反射。&lt;/li&gt;
&lt;li&gt;你在使用 Map 的时候，使用整型的 key 会比字符串的要快，因为整型比较比字符串比较要快。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;接口编程&#34;&gt;接口编程 &lt;a href=&#34;#%e6%8e%a5%e5%8f%a3%e7%bc%96%e7%a8%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
type Country struct {
    Name string
}

type City struct {
    Name string
}

type Printable interface {
    PrintStr()
}
func (c Country) PrintStr() {
    fmt.Println(c.Name)
}
func (c City) PrintStr() {
    fmt.Println(c.Name)
}

c1 := Country {&amp;#34;China&amp;#34;}
c2 := City {&amp;#34;Beijing&amp;#34;}
c1.PrintStr()
c2.PrintStr()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，这段代码中使用了一个 Printable 的接口，而 Country 和 City 都实现了接口方法 PrintStr() 把自己输出。然而，这些代码都是一样的，能不能省掉呢？其实，我们可以使用“结构体嵌入”的方式来完成这个事，如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
type WithName struct {
    Name string
}

type Country struct {
    WithName
}

type City struct {
    WithName
}

type Printable interface {
    PrintStr()
}

func (w WithName) PrintStr() {
    fmt.Println(w.Name)
}

c1 := Country {WithName{ &amp;#34;China&amp;#34;}}
c2 := City { WithName{&amp;#34;Beijing&amp;#34;}}
c1.PrintStr()
c2.PrintStr()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;引入一个叫 WithName的结构体，但是这会带来一个问题：在初始化的时候变得有点乱。那么，有没有更好的方法呢？再来看另外一个解。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
type Country struct {
    Name string
}

type City struct {
    Name string
}

type Stringable interface {
    ToString() string
}
func (c Country) ToString() string {
    return &amp;#34;Country = &amp;#34; + c.Name
}
func (c City) ToString() string{
    return &amp;#34;City = &amp;#34; + c.Name
}

func PrintStr(p Stringable) {
    fmt.Println(p.ToString())
}

d1 := Country {&amp;#34;USA&amp;#34;}
d2 := City{&amp;#34;Los Angeles&amp;#34;}
PrintStr(d1)
PrintStr(d2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这段代码中，我们可以看到，我们使用了一个叫Stringable 的接口，我们用这个接口把“业务类型” Country 和 City 和“控制逻辑” Print() 给解耦了。于是，只要实现了Stringable 接口，都可以传给 PrintStr() 来使用。&lt;/p&gt;
&lt;h1 id=&#34;接口完整性检查&#34;&gt;接口完整性检查 &lt;a href=&#34;#%e6%8e%a5%e5%8f%a3%e5%ae%8c%e6%95%b4%e6%80%a7%e6%a3%80%e6%9f%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
type Shape interface {
    Sides() int
    Area() int
}
type Square struct {
    len int
}
func (s* Square) Sides() int {
    return 4
}
func main() {
    s := Square{len: 5}
    fmt.Printf(&amp;#34;%d\n&amp;#34;,s.Sides())
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，Square 并没有实现 Shape 接口的所有方法，程序虽然可以跑通，但是这样的编程方式并不严谨，如果我们需要强制实现接口的所有方法，那该怎么办呢？&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var _ Shape = (*Square)(nil)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;声明一个 _ 变量（没人用）会把一个 nil 的空指针从 Square 转成 Shape，这样，如果没有实现完相关的接口方法，编译器就会报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cannot use (*Square)(nil) (type *Square) as type Shape in assignment: *Square does not implement Shape (missing Area method)&lt;/p&gt;&lt;/blockquote&gt;
&lt;h1 id=&#34;functional-options-编程模式&#34;&gt;Functional Options 编程模式 &lt;a href=&#34;#functional-options-%e7%bc%96%e7%a8%8b%e6%a8%a1%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main

import (
	&amp;#34;crypto/tls&amp;#34;
	&amp;#34;fmt&amp;#34;
	&amp;#34;time&amp;#34;
)

type Option func(*Server)

type Server struct {
	Addr     string
	Port     int
	Protocol string
	Timeout  time.Duration
	MaxConns int
	TLS      *tls.Config
}

func Protocol(p string) Option {
	return func(s *Server) {
		s.Protocol = p
	}
}
func Timeout(timeout time.Duration) Option {
	return func(s *Server) {
		s.Timeout = timeout
	}
}
func MaxConns(maxconns int) Option {
	return func(s *Server) {
		s.MaxConns = maxconns
	}
}
func TLS(tls *tls.Config) Option {
	return func(s *Server) {
		s.TLS = tls
	}
}
func NewService(addr string, port int, options ...func(*Server)) (*Server, error) {
	srv := Server{
		Addr:     addr,
		Port:     port,
		Protocol: &amp;#34;tcp&amp;#34;,
		Timeout:  30 * time.Second,
		MaxConns: 1000,
		TLS:      nil,
	}
	for _, option := range options {
		option(&amp;amp;srv)
	} //...
	return &amp;amp;srv, nil
}

func main() {
	server, _ := NewService(&amp;#34;localhost&amp;#34;, 80, Protocol(&amp;#34;ftp&amp;#34;),Timeout(5*10))
	fmt.Println(server)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;mapreducefilter-模式&#34;&gt;Map,Reduce,Filter 模式 &lt;a href=&#34;#mapreducefilter-%e6%a8%a1%e5%bc%8f&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
type Employee struct {
    Name     string
    Age      int
    Vacation int
    Salary   int
}

var list = []Employee{
    {&amp;#34;Hao&amp;#34;, 44, 0, 8000},
    {&amp;#34;Bob&amp;#34;, 34, 10, 5000},
    {&amp;#34;Alice&amp;#34;, 23, 5, 9000},
    {&amp;#34;Jack&amp;#34;, 26, 0, 4000},
    {&amp;#34;Tom&amp;#34;, 48, 9, 7500},
    {&amp;#34;Marry&amp;#34;, 29, 0, 6000},
    {&amp;#34;Mike&amp;#34;, 32, 8, 4000},
}


func EmployeeCountIf(list []Employee, fn func(e *Employee) bool) int {
    count := 0
    for i, _ := range list {
        if fn(&amp;amp;list[i]) {
            count += 1
        }
    }
    return count
}

func EmployeeFilterIn(list []Employee, fn func(e *Employee) bool) []Employee {
    var newList []Employee
    for i, _ := range list {
        if fn(&amp;amp;list[i]) {
            newList = append(newList, list[i])
        }
    }
    return newList
}

func EmployeeSumIf(list []Employee, fn func(e *Employee) int) int {
    var sum = 0
    for i, _ := range list {
        sum += fn(&amp;amp;list[i])
    }
    return sum
}

//统计有多少员工大于 40 岁

old := EmployeeCountIf(list, func(e *Employee) bool {
    return e.Age &amp;gt; 40
})
fmt.Printf(&amp;#34;old people: %d\n&amp;#34;, old)
//old people: 2
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://abnerxc.github.io/go/base4.%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://abnerxc.github.io/go/base4.%E6%8E%A5%E5%8F%A3/</guid>
      <description>&lt;p&gt;title = &amp;lsquo;Go基础-接口&amp;rsquo;
date = 2019-01-15T18:35:11+08:00
draft = false
categories=[&amp;lsquo;Go&amp;rsquo;]&lt;/p&gt;
&lt;h1 id=&#34;什么是接口&#34;&gt;什么是接口 &lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e6%8e%a5%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;在一些面向对象的编程语言中，例如 Java、PHP 等，接口定义了对象的行为，只指定了对象应该做什么。行为的具体实现取决于对象。&lt;/p&gt;
&lt;p&gt;在 Go 语言中，接口是一组方法的集合，但不包含方法的实现、是抽象的，接口中也不能包含变量。当一个类型 T 提供了接口中所有方法的定义时，就说 T 实现了接口。接口指定类型应该有哪些方法，类型决定如何去实现这些方法。&lt;/p&gt;
&lt;h1 id=&#34;接口声明&#34;&gt;接口声明 &lt;a href=&#34;#%e6%8e%a5%e5%8f%a3%e5%a3%b0%e6%98%8e&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Shape interface {
    Area() float32
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码定义了接口类型 Shape，接口中包含了一个不带参数、返回值为 float32  的方法 Area()。任何实现了方法 Area() 的类型 T，我们就说它实现了接口 Shape。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func main() {
    var s Shape
    fmt.Println(&amp;#34;value of s is&amp;#34;, s)
    fmt.Printf(&amp;#34;type of s is %T\n&amp;#34;, s)
}

//output
value of s is &amp;lt;nil&amp;gt;
type of s is &amp;lt;nil&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;接口的类型值&#34;&gt;接口的类型值 &lt;a href=&#34;#%e6%8e%a5%e5%8f%a3%e7%9a%84%e7%b1%bb%e5%9e%8b%e5%80%bc&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&#34;静态类型和动态类型&#34;&gt;静态类型和动态类型 &lt;a href=&#34;#%e9%9d%99%e6%80%81%e7%b1%bb%e5%9e%8b%e5%92%8c%e5%8a%a8%e6%80%81%e7%b1%bb%e5%9e%8b&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;变量的类型在声明时指定、且不能改变，称为&lt;code&gt;静态类型&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;接口类型的静态值就是接口本身。&lt;/li&gt;
&lt;li&gt;接口没有静态值，它指向的是动态值。&lt;/li&gt;
&lt;li&gt;接口类型的变量存的是实现接口的类型的值。该值就是接口的动态值，实现接口的类型就是接口的动态类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Iname interface {
    Mname()
}

type St1 struct {}
func (St1) Mname() {}
type St2 struct {}
func (St2) Mname() {}

func main() {
    var i Iname = St1{}
    fmt.Printf(&amp;#34;type is %T\n&amp;#34;,i)
    fmt.Printf(&amp;#34;value is %v\n&amp;#34;,i)
    i = St2{}
    fmt.Printf(&amp;#34;type is %T\n&amp;#34;,i)
    fmt.Printf(&amp;#34;value is %v\n&amp;#34;,i)
}
//output 
type is main.St1
value is {}
type is main.St2
value is {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;变量&lt;code&gt;i&lt;/code&gt;的静态类型是&lt;code&gt;Iname&lt;/code&gt;,是不能改变的。动态类型却是不固定的。第一次分配是 &lt;code&gt;St1&lt;/code&gt; 第二次是&lt;code&gt;St2&lt;/code&gt;,动态值都是&lt;code&gt;空结构体&lt;/code&gt;
有时候，接口的动态类型又称为&lt;code&gt;具体类型&lt;/code&gt;，当访问的时候，返回的是底层的动态值类型&lt;/p&gt;
&lt;h2 id=&#34;nil值&#34;&gt;nil值 &lt;a href=&#34;#nil%e5%80%bc&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Iname interface {
    Mname()
}
type St struct {}
func (St) Mname() {}
func main() {
    var t *St
    if t == nil {
        fmt.Println(&amp;#34;t is nil&amp;#34;)
    } else {
        fmt.Println(&amp;#34;t is not nil&amp;#34;)
    }
    var i Iname = t
    fmt.Printf(&amp;#34;%T\n&amp;#34;, i)
    if i == nil {
        fmt.Println(&amp;#34;i is nil&amp;#34;)
    } else {
        fmt.Println(&amp;#34;i is not nil&amp;#34;)
    }
    fmt.Printf(&amp;#34;i is nil pointer:%v&amp;#34;,i == (*St)(nil))
}
//output
t is nil
*main.St
i is not nil
i is nil pointer:true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;当且仅当动态值和动态类型都为 nil 时，接口类型值才为 nil&lt;/code&gt;。上面的代码，给变量 i  赋值之后，i 的动态值是 nil，但是动态类型却是 *St， i 是一个 nil 指针，所以条件不成立。&lt;/p&gt;
&lt;p&gt;Go语言规范：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; var x interface{}  // x is nil and has static type interface{}
 var v *T           // v has value nil, static type *T
 x = 42             // x has value 42 and dynamic type int
 x = v              // x has value (*T)(nil) and dynamic type *T
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;实现接口&#34;&gt;实现接口 &lt;a href=&#34;#%e5%ae%9e%e7%8e%b0%e6%8e%a5%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Shape interface {
    Area() float32
}

type Rect struct {
    width  float32
    height float32
}
//结构体实现了接口
func (r Rect) Area() float32 {
    return r.width * r.height
}

func main() {
    var s Shape
    s = Rect{5.0, 4.0}
    r := Rect{5.0, 4.0}
    fmt.Printf(&amp;#34;type of s is %T\n&amp;#34;, s)
    fmt.Printf(&amp;#34;value of s is %v\n&amp;#34;, s)
    fmt.Println(&amp;#34;area of rectange s&amp;#34;, s.Area())
    fmt.Println(&amp;#34;s == r is&amp;#34;, s == r)
}
//output
type of s is main.Rect
value of s is {5 4}
area of rectange s 20
s == r is true
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;空接口&#34;&gt;空接口 &lt;a href=&#34;#%e7%a9%ba%e6%8e%a5%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func Println(a ...interface{}) (n int, err error) {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type MyString string
type Rect struct {
    width  float32
    height float32
}
func explain(i interface{}) {
    fmt.Printf(&amp;#34;type of s is %T\n&amp;#34;, i)
    fmt.Printf(&amp;#34;value of s is %v\n\n&amp;#34;, i)
}
func main() {
    ms := MyString(&amp;#34;Seekload&amp;#34;)
    r := Rect{5.0, 4.0}
    explain(ms)
    explain(r)
}
//output
type of s is main.MyString
value of s is Seekload

type of s is main.Rect
value of s is {5 4}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码，创建了自定义的字符串类型 MyString 、结构体 Rect 和 explain() 函数。explain() 函数的形参是空接口，所以可以接收任意类型的值。&lt;/p&gt;
&lt;h1 id=&#34;实现多个接口&#34;&gt;实现多个接口 &lt;a href=&#34;#%e5%ae%9e%e7%8e%b0%e5%a4%9a%e4%b8%aa%e6%8e%a5%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Shape interface {
	Area() float32
}
 
type Object interface {
	Perimeter() float32
}

type Circle struct {
	radius float32
}

func (c Circle) Area() float32 {
    return math.Pi * (c.radius * c.radius)
}

func (c Circle) Perimeter() float32 {
   return 2 * math.Pi * c.radius
}

func main() {
    c := Circle{3}
    var s Shape = c
    var p Object = c
    fmt.Println(&amp;#34;area: &amp;#34;, s.Area())
    fmt.Println(&amp;#34;perimeter: &amp;#34;, p.Perimeter())
}
//output
area:  28.274334
perimeter:  18.849556
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果修改&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fmt.Println(&amp;#34;area: &amp;#34;, p.Area())
fmt.Println(&amp;#34;perimeter: &amp;#34;, s.Perimeter())
//output
p.Area undefined (type Object has no field or method Area)
s.Perimeter undefined (type Shape has no field or method Perimeter)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为 s 的静态类型是 Shape，而 p 的静态类型是 Object，此问题可以使用&lt;code&gt;类型断言&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;类型断言&#34;&gt;类型断言 &lt;a href=&#34;#%e7%b1%bb%e5%9e%8b%e6%96%ad%e8%a8%80&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;类型断言可以用来获取接口的底层值，通常的语法：&lt;code&gt;i.(Type)&lt;/code&gt;，其中 i 是接口，Type 是类型或接口。编译时会自动检测 i 的动态类型与 Type 是否一致。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Shape interface {
	Area() float32
}
 
type Object interface {
	Perimeter() float32
}

type Circle struct {
	radius float32
}

func (c Circle) Area() float32 {
    return math.Pi * (c.radius * c.radius)
}

func (c Circle) Perimeter() float32 {
   return 2 * math.Pi * c.radius
}

func main() {
    var s Shape = Circle{3}
    c := s.(Circle)
    var p Object = c
    fmt.Printf(&amp;#34;%T\n&amp;#34;,c)
    fmt.Printf(&amp;#34;%v\n&amp;#34;,c)
    fmt.Println(&amp;#34;area: &amp;#34;, c.Area())
    fmt.Println(&amp;#34;perimeter: &amp;#34;, c.Perimeter())
}
//output
main.Circle
{3}
area:  28.274334
perimeter:  18.849556
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码，我们可以通过 c 访问接口 s 的底层值，也可以通过 c 分别调用方法 Area() 和 Perimeter()，这就解决了上面遇到的问题。
&lt;code&gt;在语法 i.(Type) 中，如果 Type 没有实现 i 所属的接口，编译的时候会报错；或者 i 的动态值不是 Type，则会报 panic 错误&lt;/code&gt;。怎么解决呢？可以使用下面的语法:&lt;code&gt;value, ok := i.(Type)&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;类型选择&#34;&gt;类型选择 &lt;a href=&#34;#%e7%b1%bb%e5%9e%8b%e9%80%89%e6%8b%a9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;func switchType(i interface{}) {
     switch i.(type) {
     case string:
         fmt.Printf(&amp;#34;string and value is %s\n&amp;#34;, i.(string))
     case int:
         fmt.Printf(&amp;#34;int and value is %d\n&amp;#34;, i.(int))
     default:
         fmt.Printf(&amp;#34;Unknown type\n&amp;#34;)
     }
}
func main() {
    switchType(&amp;#34;Seekload&amp;#34;)
    switchType(27)
    switchType(true)
}
//output
string and value is Seekload
int and value is 27
Unknown type
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;注意：只有接口类型才可以进行类型选择&lt;/code&gt;。其他类型，例如 int、string等是不能&lt;/p&gt;
&lt;h1 id=&#34;接口嵌套&#34;&gt;接口嵌套 &lt;a href=&#34;#%e6%8e%a5%e5%8f%a3%e5%b5%8c%e5%a5%97&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Go 语言中，接口不能去实现别的接口也不能继承，但是可以通过嵌套接口创建新接口&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Math interface {
	Shape
	Object
}
type Shape interface {
	Area() float32
}

type Object interface {
	Perimeter() float32
}

type Circle struct {
	radius float32
}

func (c Circle) Area() float32 {
	return math.Pi * (c.radius * c.radius)
}

func (c Circle) Perimeter() float32 {
	return 2 * math.Pi * c.radius
}

func main() {
    c := Circle{3}
    var m Math = c
    fmt.Printf(&amp;#34;%T\n&amp;#34;, m )
    fmt.Println(&amp;#34;area: &amp;#34;, m.Area())
    fmt.Println(&amp;#34;perimeter: &amp;#34;, m.Perimeter())
}
//output
main.Circle
area:  28.274334
perimeter:  18.849556
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码，通过嵌套接口 Shape 和 Object，创建了新的接口 Math。任何类型如果实现了接口 Shape 和 Object 定义的方法，则说类型也实现了接口 Math，例如我们创建的结构体 Circle。
主函数里面，定义了接口类型的变量 m，动态类型是结构体 Circle，注意下方法 Area 和  Perimeter 的调用方式，类似与访问嵌套结构体的成员。&lt;/p&gt;
&lt;h1 id=&#34;使用指针接收者和值接收者实现接口&#34;&gt;使用指针接收者和值接收者实现接口 &lt;a href=&#34;#%e4%bd%bf%e7%94%a8%e6%8c%87%e9%92%88%e6%8e%a5%e6%94%b6%e8%80%85%e5%92%8c%e5%80%bc%e6%8e%a5%e6%94%b6%e8%80%85%e5%ae%9e%e7%8e%b0%e6%8e%a5%e5%8f%a3&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;type Shape interface {
	Area() float32
}
type Circle struct {
	radius float32
}
type Square struct {
	side float32
}
func (c Circle) Area() float32 {
	return math.Pi * (c.radius * c.radius)
}

func (s *Square) Area() float32 {
	return s.side*s.side
}
func main() {
    var s Shape
    c1 := Circle{3}
    s = c1
    fmt.Printf(&amp;#34;%v\n&amp;#34;,s.Area())

    c2 := Circle{4}
    s = &amp;amp;c2
    fmt.Printf(&amp;#34;%v\n&amp;#34;,s.Area())

    c3 := Square{3}
    //s = c3
    s = &amp;amp;c3
    fmt.Printf(&amp;#34;%v\n&amp;#34;,s.Area())
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码，结构体 Circle 通过值接收者实现了接口 Shape。值接收者的方法可以使用值或者指针调用，所以上面的 c1 和 c2 的调用方式是合法的。&lt;/p&gt;
&lt;p&gt;结构体 Square 通过指针接收者实现了接口 Shape。如果将上方注释部分打开的话，编译就会出错：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cannot use c3 (type Square) as type Shape in assignment:
Square does not implement Shape (Area method has pointer receiver)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
