<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>代码 on Abner的博客</title>
    <link>https://abnerxc.github.io/categories/%E4%BB%A3%E7%A0%81/</link>
    <description>Recent content in 代码 on Abner的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 25 Jan 2021 22:07:58 +0800</lastBuildDate><atom:link href="https://abnerxc.github.io/categories/%E4%BB%A3%E7%A0%81/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HttpClient使用技巧</title>
      <link>https://abnerxc.github.io/note/java-httpclient%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 25 Jan 2021 22:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/note/java-httpclient%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h2 id=&#34;1-规范背景&#34;&gt;1. 规范背景 &lt;a href=&#34;#1-%e8%a7%84%e8%8c%83%e8%83%8c%e6%99%af&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;11-http-client选择&#34;&gt;1.1. http client选择 &lt;a href=&#34;#11-http-client%e9%80%89%e6%8b%a9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如无特殊情况（比如：单机tps上千），建议选Spring Rest Template做门面，Apache HttpClient 4.x做实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-rest-template-运行环境&#34;&gt;1.2. rest template 运行环境 &lt;a href=&#34;#12-rest-template-%e8%bf%90%e8%a1%8c%e7%8e%af%e5%a2%83&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;jdk 1.8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring boot项目&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-配置-rest-template&#34;&gt;2. 配置 rest template &lt;a href=&#34;#2-%e9%85%8d%e7%bd%ae-rest-template&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;21-引入jar包&#34;&gt;2.1. 引入jar包 &lt;a href=&#34;#21-%e5%bc%95%e5%85%a5jar%e5%8c%85&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Rest Template在spring-web模块中内置了，spring boot会自动帮你引进来，因此无需再引入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引入Apache HttpClient 4.x包:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;4.5.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- 如果不配异步（AsyncRestTemplate），则不需要这个依赖 --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;io.netty&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;netty-all&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;4.1.5.Final&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;22-编写-yml-文件配置可选&#34;&gt;2.2. 编写 yml 文件配置（可选） &lt;a href=&#34;#22-%e7%bc%96%e5%86%99-yml-%e6%96%87%e4%bb%b6%e9%85%8d%e7%bd%ae%e5%8f%af%e9%80%89&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# yml配置的优先级高于java配置；如果yml配置和java配置同时存在，则yml配置会覆盖java配置
####restTemplate的yml配置开始####
spring:
  restTemplate:
    maxTotalConnect: 1000 #连接池的最大连接数，0代表不限；如果取0，需要考虑连接泄露导致系统崩溃的后果
    maxConnectPerRoute: 200
    connectTimeout: 3000
    readTimeout: 5000
    charset: UTF-8
####restTemplate的 yml配置开始####
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;23-编写java配置必备不可省略&#34;&gt;2.3. 编写java配置（必备，不可省略） &lt;a href=&#34;#23-%e7%bc%96%e5%86%99java%e9%85%8d%e7%bd%ae%e5%bf%85%e5%a4%87%e4%b8%8d%e5%8f%af%e7%9c%81%e7%95%a5&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//xxx代表你的项目，例如：
//com.douyu.wsd.adx.gateway.config
//com.douyu.wsd.venus.config
//可以写一级，也可以写多级，具体自己随意
package com.douyu.wsd.xxx.config;



import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;

import org.apache.http.Header;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.message.BasicHeader;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.client.Netty4ClientHttpRequestFactory;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.web.client.AsyncRestTemplate;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestTemplate;

@Configuration
@ConfigurationProperties(prefix = &amp;#34;spring.restTemplate&amp;#34;)
@ConditionalOnClass(value = {RestTemplate.class, CloseableHttpClient.class})
public class RestTemplateConfiguration {

    // java配置的优先级低于yml配置；如果yml配置不存在，会采用java配置
    // ####restTemplate的 java配置开始####

    private int maxTotalConnection = 500; //连接池的最大连接数

    private int maxConnectionPerRoute = 100; //同路由的并发数

    private int connectionTimeout = 2 * 1000; //连接超时，默认2s

    private int readTimeout = 30 * 1000; //读取超时，默认30s

    private String charset = &amp;#34;UTF-8&amp;#34;;

    // ####restTemplate的 java配置结束####

    public void setMaxTotalConnection(int maxTotalConnection) {
        this.maxTotalConnection = maxTotalConnection;
    }

    public void setMaxConnectionPerRoute(int maxConnectionPerRoute) {
        this.maxConnectionPerRoute = maxConnectionPerRoute;
    }

    public void setConnectionTimeout(int connectionTimeout) {
        this.connectionTimeout = connectionTimeout;
    }

    public void setReadTimeout(int readTimeout) {
        this.readTimeout = readTimeout;
    }

    public void setCharset(String charset) {
        this.charset = charset;
    }

    //创建HTTP客户端工厂
    @Bean(name = &amp;#34;clientHttpRequestFactory&amp;#34;)
    public ClientHttpRequestFactory clientHttpRequestFactory() {
        return createClientHttpRequestFactory(this.connectionTimeout, this.readTimeout);
    }

    //初始化RestTemplate,并加入spring的Bean工厂，由spring统一管理
    @Bean(name = &amp;#34;restTemplate&amp;#34;)
    @ConditionalOnMissingBean(RestTemplate.class)
    public RestTemplate restTemplate(ClientHttpRequestFactory factory) {
        return createRestTemplate(factory);
    }

    //初始化支持异步的RestTemplate,并加入spring的Bean工厂，由spring统一管理
    //如果你用不到异步，则无须创建该对象
    @Bean(name = &amp;#34;asyncRestTemplate&amp;#34;)
    @ConditionalOnMissingBean(AsyncRestTemplate.class)
    public AsyncRestTemplate asyncRestTemplate(RestTemplate restTemplate) {
        final Netty4ClientHttpRequestFactory factory = new Netty4ClientHttpRequestFactory();
        factory.setConnectTimeout(this.connectionTimeout);
        factory.setReadTimeout(this.readTimeout);
        return new AsyncRestTemplate(factory, restTemplate);
    }

    private ClientHttpRequestFactory createClientHttpRequestFactory(int connectionTimeout, int readTimeout) {
        //maxTotalConnection 和 maxConnectionPerRoute 必须要配
        if (this.maxTotalConnection &amp;lt;= 0) {
            throw new IllegalArgumentException(&amp;#34;invalid maxTotalConnection: &amp;#34; + maxTotalConnection);
        }
        if (this.maxConnectionPerRoute &amp;lt;= 0) {
            throw new IllegalArgumentException(&amp;#34;invalid maxConnectionPerRoute: &amp;#34; + maxTotalConnection);
        }

        //全局默认的header头配置
        List&amp;lt;Header&amp;gt; headers = new LinkedList&amp;lt;&amp;gt;();
        headers.add(new BasicHeader(&amp;#34;Accept-Encoding&amp;#34;, &amp;#34;gzip,deflate&amp;#34;));
        headers.add(new BasicHeader(&amp;#34;Accept-Language&amp;#34;, &amp;#34;zh-CN,zh;q=0.8,en;q=0.6&amp;#34;));

        //禁用自动重试，需要重试时，请自行控制
        HttpRequestRetryHandler retryHandler = new DefaultHttpRequestRetryHandler(0, false);

        PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
        cm.setMaxTotal(maxTotalConnection);
        cm.setDefaultMaxPerRoute(maxConnectionPerRoute);

        //创建真正处理http请求的httpClient实例
        CloseableHttpClient httpClient = HttpClients.custom()
                .setDefaultHeaders(headers)
                .setRetryHandler(retryHandler)
                .setConnectionManager(cm)
                .build();

        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory(
                httpClient);
        factory.setConnectTimeout(connectionTimeout);
        factory.setReadTimeout(readTimeout);
        return factory;
    }

    private RestTemplate createRestTemplate(ClientHttpRequestFactory factory) {
        RestTemplate restTemplate = new RestTemplate(factory);

        //我们采用RestTemplate内部的MessageConverter
        //重新设置StringHttpMessageConverter字符集，解决中文乱码问题
        modifyDefaultCharset(restTemplate);

        //设置错误处理器
        restTemplate.setErrorHandler(new DefaultResponseErrorHandler());

        return restTemplate;
    }

    private void modifyDefaultCharset(RestTemplate restTemplate) {
        List&amp;lt;HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; converterList = restTemplate.getMessageConverters();
        HttpMessageConverter&amp;lt;?&amp;gt; converterTarget = null;
        for (HttpMessageConverter&amp;lt;?&amp;gt; item : converterList) {
            if (StringHttpMessageConverter.class == item.getClass()) {
                converterTarget = item;
                break;
            }
        }
        if (null != converterTarget) {
            converterList.remove(converterTarget);
        }
        Charset defaultCharset = Charset.forName(charset);
        converterList.add(1, new StringHttpMessageConverter(defaultCharset));
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;做完上述配置，就生成了可用的RestTemplate实例&lt;/p&gt;
&lt;p&gt;采用上述配置，可以做到开箱即用；自己配，可能会踩些坑，比如：&lt;a href=&#34;http://doc.dz11.com/ddse/preview/share/9c0f4c855b09e2b1cf33?sid=187&#34;&gt;spring boot 配置技巧&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-rest-template基本用法&#34;&gt;3. rest template基本用法 &lt;a href=&#34;#3-rest-template%e5%9f%ba%e6%9c%ac%e7%94%a8%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;31-get演示&#34;&gt;3.1. get演示 &lt;a href=&#34;#31-get%e6%bc%94%e7%a4%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;演示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.lang.StringUtils;

import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.AsyncRestTemplate;
import org.springframework.web.client.RestTemplate;

@RestController
@Slf4j
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @Resource
    private AsyncRestTemplate asyncRestTemplate;

    //最简单的get操作
    @RequestMapping(&amp;#34;/get&amp;#34;)
    public String testGet(String keyword) throws Exception {
        String kw = StringUtils.defaultString(URLEncoder.encode(keyword, &amp;#34;UTF-8&amp;#34;));
        String html = restTemplate.getForObject(&amp;#34;https://www.douyu.com/search/?kw=&amp;#34; + kw, String.class);
        return html;//返回的是斗鱼主站的html
    }

    //需要自定义header头的get操作
    @RequestMapping(&amp;#34;/get2&amp;#34;)
    public String testGet2(String keyword) throws Exception {
        HttpHeaders headers = new HttpHeaders();
        headers.set(&amp;#34;MyHeaderKey&amp;#34;, &amp;#34;MyHeaderValue&amp;#34;);
        HttpEntity entity = new HttpEntity(headers);

        String kw = StringUtils.defaultString(URLEncoder.encode(keyword, &amp;#34;UTF-8&amp;#34;));
        ResponseEntity&amp;lt;String&amp;gt; response = restTemplate.exchange(&amp;#34;https://www.douyu.com/search/?kw=&amp;#34; + kw, HttpMethod.GET, entity, String.class);
        return response.getBody();//返回的是斗鱼主站的html
    }
    
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;32-post表单演示&#34;&gt;3.2. post表单演示 &lt;a href=&#34;#32-post%e8%a1%a8%e5%8d%95%e6%bc%94%e7%a4%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;演示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.lang.StringUtils;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import com.google.common.collect.ImmutableMap;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/postForm&amp;#34;)
    public String testPostForm(String posid) throws Exception {//测试用例：posid=804009
        String url = &amp;#34;http://www.douyu.com/lapi/sign/app/getinfo?aid=android1&amp;amp;client_sys=android&amp;amp;mdid=phone&amp;amp;time=1524495658&amp;amp;token=&amp;amp;auth=789c4f732d6aa4d0a5c8fb33765af8cf&amp;#34;;
        MultiValueMap&amp;lt;String, String&amp;gt; form = new LinkedMultiValueMap&amp;lt;String, String&amp;gt;();
        form.add(&amp;#34;app&amp;#34;, &amp;#34;{\&amp;#34;aname\&amp;#34;:\&amp;#34;斗鱼直播\&amp;#34;,\&amp;#34;pname\&amp;#34;:\&amp;#34;air.tv.douyu.android\&amp;#34;}&amp;#34;);
        form.add(&amp;#34;mdid&amp;#34;, &amp;#34;phone&amp;#34;);
        form.add(&amp;#34;cate1&amp;#34;, &amp;#34;0&amp;#34;);
        form.add(&amp;#34;client_sys&amp;#34;, &amp;#34;ios&amp;#34;);
        form.add(&amp;#34;cate2&amp;#34;, &amp;#34;0&amp;#34;);
        form.add(&amp;#34;auth&amp;#34;, &amp;#34;789c4f732d6aa4d0a5c8fb33765af8cf&amp;#34;);
        form.add(&amp;#34;roomid&amp;#34;, &amp;#34;0&amp;#34;);
        form.add(&amp;#34;posid&amp;#34;, posid);
        form.add(&amp;#34;imei&amp;#34;, &amp;#34;863254010282712&amp;#34;);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
        //headers.add(&amp;#34;xx&amp;#34;, &amp;#34;yy&amp;#34;);//可以加入自定义的header头
        HttpEntity&amp;lt;MultiValueMap&amp;lt;String, String&amp;gt;&amp;gt; formEntity = new HttpEntity&amp;lt;&amp;gt;(form, headers);
        String json = restTemplate.postForObject(url, formEntity, String.class);
        return json;//返回的是广告api的json
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;33-post请求体演示&#34;&gt;3.3. post请求体演示 &lt;a href=&#34;#33-post%e8%af%b7%e6%b1%82%e4%bd%93%e6%bc%94%e7%a4%ba&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;演示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.lang.StringUtils;

import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/postBody&amp;#34;)
    public String testPostBody() throws Exception {
        String url = &amp;#34;https://venus.dz11.com/venus/release/pc/checkUpdate&amp;#34;;
        String jsonBody = &amp;#34;{\n&amp;#34;
                + &amp;#34;    \&amp;#34;channelCode\&amp;#34;: \&amp;#34;official\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;appCode\&amp;#34;: \&amp;#34;Douyu_Live_PC_Client\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;versionCode\&amp;#34;: \&amp;#34;201804121\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;versionName\&amp;#34;: \&amp;#34;V5.1.9\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;deviceUid\&amp;#34;: \&amp;#34;02-15-03-59-5C-E2\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;deviceResolution\&amp;#34;: \&amp;#34;1920*1080\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;token\&amp;#34;: \&amp;#34;token\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;webView\&amp;#34;: \&amp;#34;\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;osInfo\&amp;#34;: \&amp;#34;10.0\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;osType\&amp;#34;: \&amp;#34;64\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;cpuInfo\&amp;#34;:\n&amp;#34;
                + &amp;#34;    {\n&amp;#34;
                + &amp;#34;        \&amp;#34;OemId\&amp;#34;: \&amp;#34;0\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorArchitecture\&amp;#34;: \&amp;#34;0\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;PageSize\&amp;#34;: \&amp;#34;4096\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;MinimumApplicationAddress\&amp;#34;: \&amp;#34;00010000\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;MaximumApplicationAddress\&amp;#34;: \&amp;#34;7FFEFFFF\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ActiveProcessorMask\&amp;#34;: \&amp;#34;15\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;NumberOfProcessors\&amp;#34;: \&amp;#34;4\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorType\&amp;#34;: \&amp;#34;586\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;AllocationGranularity\&amp;#34;: \&amp;#34;65536\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorLevel\&amp;#34;: \&amp;#34;6\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorRevision\&amp;#34;: \&amp;#34;40457\&amp;#34;\n&amp;#34;
                + &amp;#34;    },\n&amp;#34;
                + &amp;#34;    \&amp;#34;diskInfo\&amp;#34;: \&amp;#34;931.507GB\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;memoryInfo\&amp;#34;: \&amp;#34;15.8906GB\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;driveInfo\&amp;#34;: \&amp;#34;Intel(R) HD Graphics 630:23.20.16.4973;\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;startTime\&amp;#34;: \&amp;#34;-501420357\&amp;#34;\n&amp;#34;
                + &amp;#34;}\n&amp;#34;;

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        //headers.add(&amp;#34;xx&amp;#34;, &amp;#34;yy&amp;#34;);//可以加入自定义的header头
        HttpEntity&amp;lt;String&amp;gt; bodyEntity = new HttpEntity&amp;lt;&amp;gt;(jsonBody, headers);
        
        //1.直接拿原始json串
        String json = restTemplate.postForObject(url, bodyEntity, String.class);
        
        //2.将原始的json传转成java对象，rest template可以自动完成
        ResultVo resultVo = restTemplate.postForObject(url, bodyEntity, ResultVo.class);
        if (resultVo != null &amp;amp;&amp;amp; resultVo.success()) {
            Object res = resultVo.getData();//data节点的实际类型是java.util.LinkedHashMap
            logger.info(&amp;#34;处理成功，返回数据: {}&amp;#34;, resultVo.getData());
        } else {
            logger.info(&amp;#34;处理失败，响应结果: {}&amp;#34;, resultVo);
        }

        return json;//返回的是分包api的json
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;34-post文件上传&#34;&gt;3.4. post文件上传 &lt;a href=&#34;#34-post%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;场景说明：只适合小文件（20MB以内）上传&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;演示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.codec.CodecUtils;
import com.douyu.wsd.framework.common.lang.StringUtils;

import java.io.File;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
@Slf4j
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/postFile&amp;#34;)
    public String testPostBody() throws Exception {
        String filePath = &amp;#34;D:/config.png&amp;#34;;
        
        //通过磁盘文件上传，如果产生了临时文件，一定要记得删除，否则，临时文件越积越多，磁盘会爆
        FileSystemResource resource = new FileSystemResource(new File(filePath));
	
        String url = &amp;#34;http://dev.resuploader.dz11.com/Resource/Dss/put&amp;#34;;
        String appId = &amp;#34;***&amp;#34;;//测试的时候换成自己的配置
        String secureKey = &amp;#34;***&amp;#34;;
        String time = String.valueOf(System.currentTimeMillis());
        String pubStr = &amp;#34;1&amp;#34;;
        String tempStr = String.format(&amp;#34;app_id=%s&amp;amp;is_public=%s&amp;amp;time=%s&amp;amp;vframe=0%s&amp;#34;, appId, pubStr, time, secureKey);
        MultiValueMap&amp;lt;String, Object&amp;gt; form = new LinkedMultiValueMap&amp;lt;&amp;gt;();
        form.add(&amp;#34;is_public&amp;#34;, pubStr);
        form.add(&amp;#34;vframe&amp;#34;, &amp;#34;0&amp;#34;);
        form.add(&amp;#34;file&amp;#34;, resource);
        form.add(&amp;#34;app_id&amp;#34;, appId);
        form.add(&amp;#34;time&amp;#34;, time);
        form.add(&amp;#34;sign&amp;#34;, CodecUtils.md5(tempStr));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        //headers.add(&amp;#34;xx&amp;#34;, &amp;#34;yy&amp;#34;);//可以加入自定义的header头
        HttpEntity&amp;lt;MultiValueMap&amp;lt;String, Object&amp;gt;&amp;gt; formEntity = new HttpEntity&amp;lt;&amp;gt;(form, headers);
        String json = restTemplate.postForObject(url, formEntity, String.class);
        return json;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;35-文件下载&#34;&gt;3.5. 文件下载 &lt;a href=&#34;#35-%e6%96%87%e4%bb%b6%e4%b8%8b%e8%bd%bd&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;场景说明：只适合小文件（10MB以内）下载&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;演示代码&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.lang.StringUtils;

import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
@Slf4j
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/downloadFile&amp;#34;)
    public ResponseEntity testDownloadFile() throws Exception {
        String url = &amp;#34;http://editor.baidu.com/editor/download/BaiduEditor(Online)_5-9-16.exe&amp;#34;;
        HttpHeaders headers = new HttpHeaders();
        headers.setAccept(Collections.singletonList(MediaType.APPLICATION_OCTET_STREAM));
        HttpEntity&amp;lt;String&amp;gt; entity = new HttpEntity&amp;lt;&amp;gt;(headers);
        ResponseEntity&amp;lt;byte[]&amp;gt; response = restTemplate.exchange(url, HttpMethod.GET, entity, byte[].class);
        byte[] bytes = response.getBody();
        long contentLength = bytes != null ? bytes.length : 0;
        headers.setContentLength((int) contentLength);
        headers.setContentDispositionFormData(&amp;#34;baidu.exe&amp;#34;, URLEncoder.encode(&amp;#34;百度安装包.exe&amp;#34;, &amp;#34;UTF-8&amp;#34;));
        return new ResponseEntity&amp;lt;&amp;gt;(response.getBody(), headers, HttpStatus.OK);
    }   
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;36-更多api&#34;&gt;3.6. 更多API &lt;a href=&#34;#36-%e6%9b%b4%e5%a4%9aapi&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;361--resttemplate-api-与http动词的对象关系&#34;&gt;3.6.1.  RestTemplate API 与http动词的对象关系： &lt;a href=&#34;#361--resttemplate-api-%e4%b8%8ehttp%e5%8a%a8%e8%af%8d%e7%9a%84%e5%af%b9%e8%b1%a1%e5%85%b3%e7%b3%bb&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;| HTTP动词  | 对应的RestTemplate API   |
| ++++++-  |:++++++++++++-: |
|DELETE|	delete(String, String&amp;hellip;)
|GET|	getForObject(String, Class, String&amp;hellip;)
|HEAD|	headForHeaders(String, String&amp;hellip;)
|OPTIONS|	optionsForAllow(String, String&amp;hellip;)
|POST|	postForLocation(String, Object, String&amp;hellip;)
|PUT|	put(String, Object, String&amp;hellip;)&lt;/p&gt;
&lt;h4 id=&#34;362--postgetforentity-api-和-postgetforobject-的区别&#34;&gt;3.6.2.  (post|get)ForEntity API 和 (post|get)ForObject 的区别 &lt;a href=&#34;#362--postgetforentity-api-%e5%92%8c-postgetforobject-%e7%9a%84%e5%8c%ba%e5%88%ab&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;ForEntity API拿到的是ResponseEntity，通过ResponseEntity可以拿到状态码，response header等信息

ForObject API拿到的是java对象，用在不关心response状态码和header的场合中
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;363-getxxxpostxxx-和-exchange-方法的区别&#34;&gt;3.6.3. getXXX、postXXX 和 exchange 方法的区别 &lt;a href=&#34;#363-getxxxpostxxx-%e5%92%8c-exchange-%e6%96%b9%e6%b3%95%e7%9a%84%e5%8c%ba%e5%88%ab&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;getXXX、postXXX 用于比较简单的调用

exchange 用于比较复杂的调用
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-rest-template高阶用法&#34;&gt;4. rest template高阶用法 &lt;a href=&#34;#4-rest-template%e9%ab%98%e9%98%b6%e7%94%a8%e6%b3%95&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;41-带泛型的响应解码&#34;&gt;4.1. 带泛型的响应解码 &lt;a href=&#34;#41-%e5%b8%a6%e6%b3%9b%e5%9e%8b%e7%9a%84%e5%93%8d%e5%ba%94%e8%a7%a3%e7%a0%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
import com.douyu.wsd.framework.common.lang.StringUtils;

import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
@Slf4j
public class TestController {

    private static final Logger logger = LoggerFactory.getLogger(TestController.class);

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/postBody&amp;#34;)
    public String testPostBody() throws Exception {//测试用例：posid=804009
        String url = &amp;#34;https://venus.dz11.com/venus/release/pc/checkUpdate&amp;#34;;
        String jsonBody = &amp;#34;{\n&amp;#34;
                + &amp;#34;    \&amp;#34;channelCode\&amp;#34;: \&amp;#34;official\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;appCode\&amp;#34;: \&amp;#34;Douyu_Live_PC_Client\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;versionCode\&amp;#34;: \&amp;#34;201804121\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;versionName\&amp;#34;: \&amp;#34;V5.1.9\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;deviceUid\&amp;#34;: \&amp;#34;02-15-03-59-5C-E2\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;deviceResolution\&amp;#34;: \&amp;#34;1920*1080\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;token\&amp;#34;: \&amp;#34;token\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;webView\&amp;#34;: \&amp;#34;\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;osInfo\&amp;#34;: \&amp;#34;10.0\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;osType\&amp;#34;: \&amp;#34;64\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;cpuInfo\&amp;#34;:\n&amp;#34;
                + &amp;#34;    {\n&amp;#34;
                + &amp;#34;        \&amp;#34;OemId\&amp;#34;: \&amp;#34;0\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorArchitecture\&amp;#34;: \&amp;#34;0\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;PageSize\&amp;#34;: \&amp;#34;4096\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;MinimumApplicationAddress\&amp;#34;: \&amp;#34;00010000\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;MaximumApplicationAddress\&amp;#34;: \&amp;#34;7FFEFFFF\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ActiveProcessorMask\&amp;#34;: \&amp;#34;15\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;NumberOfProcessors\&amp;#34;: \&amp;#34;4\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorType\&amp;#34;: \&amp;#34;586\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;AllocationGranularity\&amp;#34;: \&amp;#34;65536\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorLevel\&amp;#34;: \&amp;#34;6\&amp;#34;,\n&amp;#34;
                + &amp;#34;        \&amp;#34;ProcessorRevision\&amp;#34;: \&amp;#34;40457\&amp;#34;\n&amp;#34;
                + &amp;#34;    },\n&amp;#34;
                + &amp;#34;    \&amp;#34;diskInfo\&amp;#34;: \&amp;#34;931.507GB\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;memoryInfo\&amp;#34;: \&amp;#34;15.8906GB\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;driveInfo\&amp;#34;: \&amp;#34;Intel(R) HD Graphics 630:23.20.16.4973;\&amp;#34;,\n&amp;#34;
                + &amp;#34;    \&amp;#34;startTime\&amp;#34;: \&amp;#34;-501420357\&amp;#34;\n&amp;#34;
                + &amp;#34;}\n&amp;#34;;

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        HttpEntity&amp;lt;String&amp;gt; bodyEntity = new HttpEntity&amp;lt;&amp;gt;(jsonBody, headers);
        
        //1. 直接拿原始的json串
        String json = restTemplate.postForObject(url, bodyEntity, String.class);

        //2. 将原始json传转java对象，跟上文不同的是，这个java对象里面有泛型（ResultVo&amp;lt;PcUpdateRes&amp;gt;）
        //大家实际使用的时候，把ResultVo&amp;lt;PcUpdateRes&amp;gt;换成自己的类，比如：List&amp;lt;MemberInfo&amp;gt;
        ResponseEntity&amp;lt;ResultVo&amp;lt;PcUpdateRes&amp;gt;&amp;gt; response = restTemplate
                .exchange(url, HttpMethod.POST, bodyEntity, new ParameterizedTypeReference&amp;lt;ResultVo&amp;lt;PcUpdateRes&amp;gt;&amp;gt;() {});
        if (response.getStatusCode().is2xxSuccessful() &amp;amp;&amp;amp; response.getBody() != null &amp;amp;&amp;amp; response.getBody().success()) {
            ResultVo&amp;lt;PcUpdateRes data = &amp;gt; resultVo = response.getBody();
            PcUpdateRes data = resultVo.getData();
            logger.info(&amp;#34;处理成功，返回数据: {}&amp;#34;, data);
        } else {
            logger.info(&amp;#34;处理失败，响应结果: {}&amp;#34;, response);
        }

        return json;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;42-上传文件流&#34;&gt;4.2. 上传文件流 &lt;a href=&#34;#42-%e4%b8%8a%e4%bc%a0%e6%96%87%e4%bb%b6%e6%b5%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.codec.CodecUtils;
import com.douyu.wsd.framework.common.io.IOUtils;
import com.douyu.wsd.framework.common.lang.StringUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import javax.annotation.Resource;

import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

@RestController
@Slf4j
public class TestController {

    @Resource
    private RestTemplate restTemplate;

    @RequestMapping(&amp;#34;/postFile&amp;#34;)
    public String testPostBody() throws Exception {
        String filePath = &amp;#34;D:/config.png&amp;#34;;
        MultipartFileResource resource = new MultipartFileResource(new FileInputStream(new File(filePath)), &amp;#34;config.png&amp;#34;);
        String url = &amp;#34;http://dev.resuploader.dz11.com/Resource/Dss/put&amp;#34;;
        String appId = &amp;#34;***&amp;#34;;//测试的时候换成自己的配置
        String secureKey = &amp;#34;***&amp;#34;;
        String time = String.valueOf(System.currentTimeMillis());
        String pubStr = &amp;#34;1&amp;#34;;
        String tempStr = String.format(&amp;#34;app_id=%s&amp;amp;is_public=%s&amp;amp;time=%s&amp;amp;vframe=0%s&amp;#34;, appId, pubStr, time, secureKey);
        MultiValueMap&amp;lt;String, Object&amp;gt; form = new LinkedMultiValueMap&amp;lt;&amp;gt;();
        form.add(&amp;#34;is_public&amp;#34;, pubStr);
        form.add(&amp;#34;vframe&amp;#34;, &amp;#34;0&amp;#34;);
        form.add(&amp;#34;file&amp;#34;, resource);
        form.add(&amp;#34;app_id&amp;#34;, appId);
        form.add(&amp;#34;time&amp;#34;, time);
        form.add(&amp;#34;sign&amp;#34;, CodecUtils.md5(tempStr));

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        //headers.add(&amp;#34;xx&amp;#34;, &amp;#34;yy&amp;#34;);//可以加入自定义的header头
        HttpEntity&amp;lt;MultiValueMap&amp;lt;String, Object&amp;gt;&amp;gt; formEntity = new HttpEntity&amp;lt;&amp;gt;(form, headers);
        String json = restTemplate.postForObject(url, formEntity, String.class);
        return json;
    }

    private class MultipartFileResource extends InputStreamResource {

        private String filename;

        public MultipartFileResource(InputStream inputStream, String filename) {
            super(inputStream);
            this.filename = filename;
        }

        @Override
        public String getFilename() {
            return this.filename;
        }

        @Override
        public long contentLength() throws IOException {
            return -1; // we do not want to generally read the whole stream into memory ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;43-异步操作&#34;&gt;4.3 异步操作 &lt;a href=&#34;#43-%e5%bc%82%e6%ad%a5%e6%93%8d%e4%bd%9c&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AsyncRestTemplate 可支持异步，与同步API基本一致，返回的是future:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import com.douyu.wsd.framework.common.lang.StringUtils;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Resource;

import org.springframework.http.ResponseEntity;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.AsyncRestTemplate;

@RestController
public class TestController {

    @Resource
    private AsyncRestTemplate asyncRestTemplate;

    @RequestMapping(&amp;#34;/douyu&amp;#34;)
    public String douyu() throws Exception {
        ListenableFuture&amp;lt;ResponseEntity&amp;lt;String&amp;gt;&amp;gt; future = asyncRestTemplate
                .getForEntity(&amp;#34;http://www.douyu.com&amp;#34;, String.class);
        return future.get(2 * 1000, TimeUnit.SECONDS).getBody();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;44-不同的超时时间&#34;&gt;4.4. 不同的超时时间 &lt;a href=&#34;#44-%e4%b8%8d%e5%90%8c%e7%9a%84%e8%b6%85%e6%97%b6%e6%97%b6%e9%97%b4&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;假如我碰到这种场景：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ServiceA | 10s

ServiceB | 25s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有3个套路可解决：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;套路一，创建多个实例，每个实例有自己的超时时间，比如&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    // 超时时间短的实例
    @Bean(name = &amp;#34;clientHttpRequestFactoryA&amp;#34;)
    public ClientHttpRequestFactory clientHttpRequestFactoryA() {
        return createClientHttpRequestFactory(2*1000, 10*1000);
    }

    @Bean(name = &amp;#34;restTemplateA&amp;#34;)
    @ConditionalOnMissingBean(RestTemplate.class)
    public RestTemplate restTemplateA() {
        return createRestTemplate(clientHttpRequestFactoryA());
    }
    
    // 超时时间长的实例
    @Bean(name = &amp;#34;clientHttpRequestFactoryB&amp;#34;)
    public ClientHttpRequestFactory clientHttpRequestFactoryB() {
        return createClientHttpRequestFactory(5*1000, 25*1000);
    }

    @Bean(name = &amp;#34;restTemplateB&amp;#34;)
    @ConditionalOnMissingBean(RestTemplate.class)
    public RestTemplate restTemplateB() {
        return createRestTemplate(clientHttpRequestFactoryB());
    }
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;套路二，AsyncRestTemplate&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ListenableFuture&amp;lt;ResponseEntity&amp;lt;String&amp;gt;&amp;gt; future = asyncRestTemplate
                .getForEntity(&amp;#34;http://www.douyu.com&amp;#34;, String.class);
return future.get(2 * 1000, TimeUnit.SECONDS).getBody();
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;套路三，上&lt;a href=&#34;https://spring.io/guides/gs/circuit-breaker/&#34;&gt; Circuit Breaker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@EnableCircuitBreaker
public class MyApp {
    public static void main(String[] args) {
        SpringApplication.run(MyApp .class, args);
    }
}

@Service
public class MyService {
    private final RestTemplate restTemplate;

    public BookService(RestTemplate rest) {
        this.restTemplate = rest;
    }

    @HystrixCommand(
        fallbackMethod = &amp;#34;fooMethodFallback&amp;#34;,
        commandProperties = { 
            @HystrixProperty(
                 name = &amp;#34;execution.isolation.thread.timeoutInMilliseconds&amp;#34;, 
                 value=&amp;#34;5000&amp;#34;
            )
        }
    )
    public String fooMethod() {
        // Your logic here.
        restTemplate.exchange(...); 
    }

    public String fooMethodFallback(Throwable t) {
        log.error(&amp;#34;Fallback happened&amp;#34;, t);
        return &amp;#34;Sensible Default Here!&amp;#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;45-如何设置连接池&#34;&gt;4.5. 如何设置连接池 &lt;a href=&#34;#45-%e5%a6%82%e4%bd%95%e8%ae%be%e7%bd%ae%e8%bf%9e%e6%8e%a5%e6%b1%a0&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;连接池需要服务端支持长连接，并非所有服务端都支持，因此单独开了篇文章：&lt;a href=&#34;http://doc.dz11.com/ddse/preview/space/14816?sid=29&amp;amp;pid=12940&#34;&gt;RestTemplate如何配置长连接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;46-全局统一的异常处理&#34;&gt;4.6. 全局统一的异常处理 &lt;a href=&#34;#46-%e5%85%a8%e5%b1%80%e7%bb%9f%e4%b8%80%e7%9a%84%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//实现异常处理接口
public class CustomErrorHandler extends DefaultResponseErrorHandler {  
  
    @Override  
    public void handleError(ClientHttpResponse response) throws IOException {  
  
    }
    
}  

//将自定义的异常处理器加进去
@Configuration  
public class RestClientConfig {  
  
    @Bean  
    public RestTemplate restTemplate() {  
        RestTemplate restTemplate = new RestTemplate();  
        restTemplate.setErrorHandler(new CustomErrorHandler());  
        return restTemplate;  
    }  
  
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;5-小技巧&#34;&gt;5. 小技巧 &lt;a href=&#34;#5-%e5%b0%8f%e6%8a%80%e5%b7%a7&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;51-参数模板&#34;&gt;5.1. 参数模板 &lt;a href=&#34;#51-%e5%8f%82%e6%95%b0%e6%a8%a1%e6%9d%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数组传参&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;String result = restTemplate.getForObject(&amp;#34;http://example.com/hotels/{hotel}/bookings/{booking}&amp;#34;, 
    String.class, &amp;#34;42&amp;#34;, &amp;#34;21&amp;#34;);
//实际效果等同于：GET http://example.com/hotels/42/bookings/21
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;map传参&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Map&amp;lt;String, String&amp;gt; vars = new HashMap&amp;lt;String, String&amp;gt;();
vars.put(&amp;#34;hotel&amp;#34;, &amp;#34;42&amp;#34;);
vars.put(&amp;#34;booking&amp;#34;, &amp;#34;21&amp;#34;);
String result = restTemplate.getForObject(&amp;#34;http://example.com/hotels/{hotel}/bookings/{booking}&amp;#34;, 
    String.class, vars);
//实际效果等同于：GET http://example.com/hotels/42/rooms/42
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;52-文件上传注意点&#34;&gt;5.2. 文件上传注意点 &lt;a href=&#34;#52-%e6%96%87%e4%bb%b6%e4%b8%8a%e4%bc%a0%e6%b3%a8%e6%84%8f%e7%82%b9&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果使用了本地临时文件，一定要在finally代码块中删除，否则可能会撑爆磁盘&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-faq&#34;&gt;6. FAQ &lt;a href=&#34;#6-faq&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&#34;61-获取状态码&#34;&gt;6.1. 获取状态码 &lt;a href=&#34;#61-%e8%8e%b7%e5%8f%96%e7%8a%b6%e6%80%81%e7%a0%81&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;使用xxForEntity类方法调用接口，将返回ResponseEntity对象，通过它能取到状态码。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//判断接口返回是否为200
public static Boolean ping(){
    String url = &amp;#34;xxx&amp;#34;;
    try{
        ResponseEntity&amp;lt;String&amp;gt; responseEntity = restTemplate.getForEntity(url, String.class);
        HttpStatus status = responseEntity.getStatusCode();//获取返回状态
        return status.is2xxSuccessful();//判断状态码是否为2开头的
    }catch(Exception e){
        log.error(&amp;#34;处理失败: {}&amp;#34;, url, e);
        return false; //502 ,500是不能正常返回结果的，需要catch住，返回一个false
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;62-我需要手工释放连接吗&#34;&gt;6.2. 我需要手工释放连接吗？ &lt;a href=&#34;#62-%e6%88%91%e9%9c%80%e8%a6%81%e6%89%8b%e5%b7%a5%e9%87%8a%e6%94%be%e8%bf%9e%e6%8e%a5%e5%90%97&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不需要，rest template会帮我们释放，具体请看：&lt;a href=&#34;https://stackoverflow.com/questions/40161117/spring-resttemplate-need-to-release-connection&#34;&gt;spring-resttemplate-need-to-release-connection ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;62-如何调试rest-template&#34;&gt;6.2. 如何调试rest template &lt;a href=&#34;#62-%e5%a6%82%e4%bd%95%e8%b0%83%e8%af%95rest-template&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;可以在logback里单独配一个debug级别的logger，把org.apache.http下面的日志定向到控制台：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;logger name=&amp;#34;org.apache.http&amp;#34; level=&amp;#34;DEBUG&amp;#34; additivity=&amp;#34;false&amp;#34;&amp;gt;
    &amp;lt;appender-ref ref=&amp;#34;STDOUT&amp;#34; /&amp;gt;
&amp;lt;/logger&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>JAVA代码生成</title>
      <link>https://abnerxc.github.io/note/java-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</link>
      <pubDate>Mon, 25 Jan 2021 22:07:58 +0800</pubDate>
      
      <guid>https://abnerxc.github.io/note/java-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</guid>
      <description>&lt;h1 id=&#34;依赖包版本&#34;&gt;依赖包版本 &lt;a href=&#34;#%e4%be%9d%e8%b5%96%e5%8c%85%e7%89%88%e6%9c%ac&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mybatis-plus-generator&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.5.3.1&amp;lt;/version&amp;gt;
    &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.freemarker&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;freemarker&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.3.32&amp;lt;/version&amp;gt; &amp;lt;!-- or latest version --&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;java代码生成&#34;&gt;Java代码生成 &lt;a href=&#34;#java%e4%bb%a3%e7%a0%81%e7%94%9f%e6%88%90&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;import com.baomidou.mybatisplus.generator.FastAutoGenerator;
import com.baomidou.mybatisplus.generator.config.OutputFile;
import com.baomidou.mybatisplus.generator.config.rules.DbColumnType;
import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;
import com.baomidou.mybatisplus.generator.config.builder.CustomFile;
import java.sql.Types;
import java.util.*;

public class CodeGeneratorTest {
    public static void main(String[] args) {
        // 数据库配置
        String url = &amp;#34;jdbc:mysql://127.0.01:3306/test?useUnicode=true&amp;amp;characterEncoding=UTF8&amp;amp;useSSL=false&amp;amp;serverTimezone=Asia/Shanghai&amp;#34;;
        String username = &amp;#34;root&amp;#34;;
        String password = &amp;#34;123456&amp;#34;;

        // 表名配置
        String[] tableName = {&amp;#34;sys_subject&amp;#34;};
        String[] tablePreFix = {&amp;#34;sys_&amp;#34;, &amp;#34;tpl_&amp;#34;};

        // 项目配置
        String projectName = &amp;#34;com-server-demo-provider&amp;#34;;
        String basePkg = &amp;#34;com.server.demo.provider&amp;#34;;
        String moduleName = &amp;#34;subject&amp;#34;;
        String author = &amp;#34;abner&amp;#34;;

        String rootPath = System.getProperty(&amp;#34;user.dir&amp;#34;);
        String mainPath = rootPath + &amp;#34;/&amp;#34; + projectName + &amp;#34;/src/main&amp;#34;;

         FastAutoGenerator.create(url, username, password)
                .globalConfig(builder -&amp;gt; {
                    builder.author(author)
                            .fileOverride()
                            .outputDir(mainPath + &amp;#34;/java&amp;#34;);
                })
                .dataSourceConfig(builder -&amp;gt; builder.typeConvertHandler((globalConfig, typeRegistry, metaInfo) -&amp;gt; {
                    int typeCode = metaInfo.getJdbcType().TYPE_CODE;
                    if (typeCode == Types.SMALLINT || typeCode == Types.TINYINT) {  // 添加 TINYINT 类型处理
                        return DbColumnType.INTEGER;
                    }
                    return typeRegistry.getColumnType(metaInfo);
                }))
                .packageConfig(builder -&amp;gt; {
                    builder.parent(basePkg)
                            .moduleName(moduleName)
                            .entity(&amp;#34;model.entity&amp;#34;)  // 实体类放在model包下
                            .pathInfo(Collections.singletonMap(OutputFile.xml, mainPath + &amp;#34;/mapper/&amp;#34; + moduleName));
                })
                .strategyConfig(builder -&amp;gt; {
                    builder.addInclude(tableName)
                            .addTablePrefix(tablePreFix);

                    // 实体类配置
                    builder.entityBuilder()
                            //.superClass(BaseEntity.class)
                            .enableChainModel()
                            .enableLombok()
                            .disableSerialVersionUID()
                            .enableTableFieldAnnotation()
                            // 字段过滤配置（排除BaseEntity.class父类中已经继承的字段，防止重复生成覆盖）
                            //.addSuperEntityColumns(&amp;#34;id&amp;#34;, &amp;#34;create_by&amp;#34;, &amp;#34;create_name&amp;#34;,
                                    &amp;#34;create_time&amp;#34;, &amp;#34;modify_by&amp;#34;, &amp;#34;modify_name&amp;#34;,
                                    &amp;#34;modify_time&amp;#34;);

                    // 新增Controller配置
                    builder.controllerBuilder()
                            .enableRestStyle()  // 使用@RestController注解
                            .enableHyphenStyle() // 启用驼峰转连字符
                            .formatFileName(&amp;#34;%sController&amp;#34;);

                    // Mapper配置
                    builder.mapperBuilder()
                            .superClass(BaseMapperX.class)
                            .enableBaseColumnList()
                            .enableMapperAnnotation();

                    // Service配置
                    builder.serviceBuilder()
                            .formatServiceFileName(&amp;#34;%sService&amp;#34;);
                })
                .injectionConfig(builder -&amp;gt; {
                    Map&amp;lt;String, Object&amp;gt; customMap = new HashMap&amp;lt;&amp;gt;();
                    // 添加父包路径变量
                    customMap.put(&amp;#34;packageName&amp;#34;, basePkg + &amp;#34;.&amp;#34; + moduleName);
                    customMap.put(&amp;#34;dtoPackage&amp;#34;, &amp;#34;model.dto&amp;#34;);
                    customMap.put(&amp;#34;voPackage&amp;#34;, &amp;#34;model.vo&amp;#34;);
                    customMap.put(&amp;#34;convertPackage&amp;#34;, &amp;#34;model.convert&amp;#34;);

                    builder.customMap(customMap)
                            // DTO模板
                            .customFile(new CustomFile.Builder()
                                    .fileName(&amp;#34;Dto.java&amp;#34;)
                                    .templatePath(&amp;#34;/templates/dto.java.ftl&amp;#34;)
                                    .packageName(&amp;#34;model.dto&amp;#34;)
                                    .build())
                            // VO模板
                            .customFile(new CustomFile.Builder()
                                    .fileName(&amp;#34;Vo.java&amp;#34;)
                                    .templatePath(&amp;#34;/templates/vo.java.ftl&amp;#34;)
                                    .packageName(&amp;#34;model.vo&amp;#34;)
                                    .build())
                            // Convert模板
                            .customFile(new CustomFile.Builder()
                                    .fileName(&amp;#34;Convert.java&amp;#34;)
                                    .templatePath(&amp;#34;/templates/convert.java.ftl&amp;#34;)
                                    .packageName(&amp;#34;model.convert&amp;#34;)
                                    .build());
                })
                .templateEngine(new FreemarkerTemplateEngine())
                .execute();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;freemarker模板&#34;&gt;Freemarker模板 &lt;a href=&#34;#freemarker%e6%a8%a1%e6%9d%bf&#34; class=&#34;anchor&#34;&gt;🔗&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;convert.java.ftl&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;package ${packageName}.${convertPackage};

import ${package.Entity}.${entity};
import ${package.Entity?replace(&amp;#34;entity&amp;#34;,&amp;#34;dto&amp;#34;)}.${entity}Dto;
import ${package.Entity?replace(&amp;#34;entity&amp;#34;,&amp;#34;vo&amp;#34;)}.${entity}Vo;
import org.mapstruct.Mapper;
import org.mapstruct.factory.Mappers;
import java.util.List;

@Mapper(componentModel = &amp;#34;spring&amp;#34;)
public interface ${entity}Convert {

${entity}Convert INSTANCE = Mappers.getMapper(${entity}Convert.class);

${entity}Dto entityToDto(${entity} entity);

${entity} dtoToEntity(${entity}Dto dto);

${entity} voToEntity(${entity}Vo vo);

List&amp;lt;${entity}Dto&amp;gt; entityListToDto(List&amp;lt;${entity}&amp;gt; entities);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dto.java.ftl&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;package ${packageName}.${dtoPackage};

    import lombok.Data;
    import lombok.experimental.Accessors;

    @Data
    @Accessors(chain = true)
    public class ${table.entityName}Dto {

    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;vo.java.ftl&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;package ${packageName}.${voPackage};

    import lombok.Data;
    import lombok.experimental.Accessors;

    @Data
    @Accessors(chain = true)
    public class ${table.entityName}Vo {

    }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
